"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[906],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=i,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8440:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const o={id:"service-imports",title:"Imports"},a=void 0,s={unversionedId:"the-service/service-imports",id:"the-service/service-imports",title:"Imports",description:"Importing Entities and Data Organization",source:"@site/subgraph/03-the-service/03-imports.md",sourceDirName:"03-the-service",slug:"/the-service/service-imports",permalink:"/subgraph/the-service/service-imports",draft:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/03-the-service/03-imports.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"service-imports",title:"Imports"},sidebar:"subgraphSidebar",previous:{title:"Port",permalink:"/subgraph/the-service/service-port"},next:{title:"Cors Options",permalink:"/subgraph/the-service/cors-options"}},p={},l=[{value:"Importing Entities and Data Organization",id:"importing-entities-and-data-organization",level:2},{value:"The Import File",id:"the-import-file",level:3}],c={toc:l};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"importing-entities-and-data-organization"},"Importing Entities and Data Organization"),(0,i.kt)("p",null,"As your configuration file expands, the service file may become unwieldy. While consolidating all configuration into a single file is acceptable for smaller applications, as your application grows, separating logic into multiple files becomes advantageous."),(0,i.kt)("p",null,"Subgraph supports the ability to define entities in separate files, offering a tidy and organized approach to configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[service]\nname = "my_service"\nport = 3030\nimports = [\n  "./todo.toml",\n  "./todo_history.toml",\n  "./todo_access.toml",\n  "./user_connections.toml",\n  "./user.toml"\n]\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note")," - This syntax only supports the ability to import Entities. Anything with ",(0,i.kt)("inlineCode",{parentName:"p"},"service.entities"),"\nas the table prefix is valid to move to another file."),(0,i.kt)("h3",{id:"the-import-file"},"The Import File"),(0,i.kt)("p",null,"Working with an import file can help to declutter a complex config file. Within an import file, you will no longer need to\nprovide the ",(0,i.kt)("inlineCode",{parentName:"p"},"service")," prefix. The key ",(0,i.kt)("inlineCode",{parentName:"p"},"[[service.entities]]")," simply becomes ",(0,i.kt)("inlineCode",{parentName:"p"},"[[entities]]"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'# Import file represents an entity\n[[entities]] # Note, no longer prefix with `service.`\nname = "product"\nrequired = true\nfields = [\n  { name = "id", scalar = "Int", required = true, exclude_from_input = ["All"], exclude_from_output = true  },\n  { name = "uuid", scalar = "UUID", required = true, exclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"] },\n  { name = "title", scalar = "String", required = true },\n  { name = "description", scalar = "String", required = true },\n]\n\n## Any nested `entities` properties can be defined here.\n[[entities.guards]]\n...\n[[entities.data_source]]\n...\n')))}u.isMDXComponent=!0}}]);