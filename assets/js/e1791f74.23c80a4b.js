"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[6213],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,v=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return t?r.createElement(v,s(s({ref:n},u),{},{components:t})):r.createElement(v,s({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3033:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={id:"eval-expr",title:"The EvalExpr Crate"},s=void 0,o={unversionedId:"expressions/eval-expr",id:"expressions/eval-expr",title:"The EvalExpr Crate",description:"EvalExpr",source:"@site/subgraph/11-expressions/01-eval-expr.md",sourceDirName:"11-expressions",slug:"/expressions/eval-expr",permalink:"/subgraph/expressions/eval-expr",draft:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/11-expressions/01-eval-expr.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"eval-expr",title:"The EvalExpr Crate"},sidebar:"subgraphSidebar",previous:{title:"Expressions",permalink:"/subgraph/category/expressions"},next:{title:"Built In Functions",permalink:"/subgraph/expressions/built-in-functions"}},l={},p=[{value:"EvalExpr",id:"evalexpr",level:2},{value:"Definitions",id:"definitions",level:2},{value:"The Multi-Line Expression",id:"the-multi-line-expression",level:3},{value:"The Inline Expression",id:"the-inline-expression",level:3},{value:"Returned Values",id:"returned-values",level:2},{value:"Variables",id:"variables",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"evalexpr"},"EvalExpr"),(0,a.kt)("p",null,"The crate ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/evalexpr/latest/evalexpr/"},"evalexpr")," allows developers to create custom and unique expressions interact with contextual data specific to a request.\nThis allows developers to utilize user specific data to perform an action."),(0,a.kt)("p",null,"Any functionality of the ",(0,a.kt)("inlineCode",{parentName:"p"},"evalexpr")," API can be utilized when constructing an expression. Reading the documentaioned provided by\nthis crate can be extreemly useful when working with expressions that are applied to the Subgraph Service."),(0,a.kt)("p",null,"Here are a couple quick examples to get up in running. That being said, don't be afraid of reading the EvalExpr Documentation."),(0,a.kt)("h2",{id:"definitions"},"Definitions"),(0,a.kt)("p",null,"There are two ways to define expressions, Multi-Line expressions and Inline expressions."),(0,a.kt)("h3",{id:"the-multi-line-expression"},"The Multi-Line Expression"),(0,a.kt)("p",null,"Using three single quotes when defining the expression string will break the code into a multi line expression allowing you to write longer form expressions\nwhile still preserving the ability to read the expression easily."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[[entities.data_source.resolvers.update_many.guards]]\nname = "todo_not_found"\n# Multi Line Expression\nif_expr = \'\'\'\n  todo_uuids = input("query", "uuid");\n  todos = context("todo.id");\n  len(todo_uuids) != len(todos)\n\'\'\'\nthen_msg = "Todo not found."\n')),(0,a.kt)("h3",{id:"the-inline-expression"},"The Inline Expression"),(0,a.kt)("p",null,"Inline expressions are useful when working with smaller expressions."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: They require double quotes to be escaped.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[[entities]]\nname = "todo"\nrequired = true\nfields = [\n  { name = "id", scalar = "Int" },\n  { name = "title", scalar = "String" },\n  # The Inline expression for `default_value`\n  { name = "updated_by", scalar = "Int", default_value = "context(\\"user.id\\")" },\n]\n')),(0,a.kt)("h2",{id:"returned-values"},"Returned Values"),(0,a.kt)("p",null,"Returning a value from an expression is implicit and similar to Rust syntax. Omitting the expression chaining operator, the semicolon, will implicitly return the value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.guards]]\nname = "access_denied"\nif_expr = \'\'\'\n    // Evaluates to true, blocking the request. No semicolon following the final line returns the evaluated expression.\n    1 == 1\n\'\'\'\nthen_msg = "No one may ever access as the expression always evaluates to true."\n\n# Same as above, just different syntax:\n[service]\nguards = [\n    { name = "access_denied", if_expr = "1 == 1", then_msg = "Nope, still no access." }\n]\n')),(0,a.kt)("h2",{id:"variables"},"Variables"),(0,a.kt)("p",null,"You may define variables so that guards become more readable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},"[[service.guards]]\nname = \"access_denied\"\nif_expr = '''\n    // Defining a variable, should_guard, by using a semicolon to chain the operation.\n    should_guard = 1 == 1;\n\n    // Return the evaluated expression:\n    should_guard\n'''\nthen_msg = \"No one may ever access as the expression always evaluates to true.\"\n")))}c.isMDXComponent=!0}}]);