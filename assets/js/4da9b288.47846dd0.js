"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[5378],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>v});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=n.createContext({}),l=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},d=function(e){var r=l(e.components);return n.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(t),v=a,h=c["".concat(u,".").concat(v)]||c[v]||p[v]||i;return t?n.createElement(h,o(o({ref:r},d),{},{components:t})):n.createElement(h,o({ref:r},d))}));function v(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var s={};for(var u in r)hasOwnProperty.call(r,u)&&(s[u]=r[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8094:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=t(7462),a=(t(7294),t(3905));const i={id:"query-the-server",title:"Query The Server"},o=void 0,s={unversionedId:"usage/query-the-server",id:"usage/query-the-server",title:"Query The Server",description:"The server should sit behind a federated gateway. Query the gateway to query the server. Use the Apollo Sandbox for generated documentation on available resolvers and queries.",source:"@site/media/03-usage/01-query-the-server.md",sourceDirName:"03-usage",slug:"/usage/query-the-server",permalink:"/media/usage/query-the-server",draft:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/media/03-usage/01-query-the-server.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"query-the-server",title:"Query The Server"},sidebar:"mailerSidebar",previous:{title:"Setup The Server",permalink:"/media/setup"},next:{title:"Upload and Serve Files",permalink:"/media/usage/upload-and-serve-files"}},u={},l=[{value:"Required Headers",id:"required-headers",level:2},{value:"Extended Properties/Required Services",id:"extended-propertiesrequired-services",level:3}],d={toc:l};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The server should sit behind a federated gateway. Query the gateway to query the server. Use the Apollo Sandbox for generated documentation on available resolvers and queries."),(0,a.kt)("h2",{id:"required-headers"},"Required Headers"),(0,a.kt)("p",null,"All routes within this service require a ",(0,a.kt)("inlineCode",{parentName:"p"},"context")," header to be passed with the request. The ",(0,a.kt)("inlineCode",{parentName:"p"},"context")," header should be stringified JSON of the type Context. Be sure to include the ",(0,a.kt)("inlineCode",{parentName:"p"},"auth")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface Context extends Record<string, any> {\n  auth: {\n    account: { _id: string; email: string } | null;\n    user: {\n      _id: string;\n      role: number;\n      email: string;\n    } | null;\n    isAuth: boolean;\n  };\n  // ...context\n}\n")),(0,a.kt)("h3",{id:"extended-propertiesrequired-services"},"Extended Properties/Required Services"),(0,a.kt)("p",null,"The media service extends federated entities from external services. The following federated services and properties are required in order to run this service."),(0,a.kt)("p",null,"User"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"_","id")),(0,a.kt)("p",null,"If you want to run this service without the ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," entity, it is possible with minimal updating to the code base."))}p.isMDXComponent=!0}}]);