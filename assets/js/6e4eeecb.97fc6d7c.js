"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[1782],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),g=r,f=u["".concat(s,".").concat(g)]||u[g]||p[g]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5319:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={id:"eager-loading",title:"Eager Loading"},o=void 0,l={unversionedId:"entities/fields/eager-loading",id:"entities/fields/eager-loading",title:"Eager Loading",description:"Advanced Filtering with Eager Loading",source:"@site/subgraph/05-entities/02-fields/10-eager-loading.md",sourceDirName:"05-entities/02-fields",slug:"/entities/fields/eager-loading",permalink:"/subgraph/entities/fields/eager-loading",draft:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/05-entities/02-fields/10-eager-loading.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{id:"eager-loading",title:"Eager Loading"},sidebar:"subgraphSidebar",previous:{title:"Associations",permalink:"/subgraph/entities/fields/associations"},next:{title:"Default Values",permalink:"/subgraph/entities/fields/default-values"}},s={},d=[{value:"Advanced Filtering with Eager Loading",id:"advanced-filtering-with-eager-loading",level:2},{value:"Enabling Eager Loading",id:"enabling-eager-loading",level:3},{value:"After Enabling",id:"after-enabling",level:3},{value:"The Outcome",id:"the-outcome",level:3}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"advanced-filtering-with-eager-loading"},"Advanced Filtering with Eager Loading"),(0,r.kt)("p",null,"Subgraph offers the ability to pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"eager")," property to a field in order to enable\na filtering capability called Eager Loading."),(0,r.kt)("p",null,'What exactly is "Eager Loading"?'),(0,r.kt)("p",null,"Associations and extensions allows the ability to fetch data that is related to an entiy."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For example, you may search for a user and also include the comments associated with the user.")),(0,r.kt)("p",null,"Eager loading allows you to search for an entity by the fields of a related entity."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'For example, you may search for a user that has a comment that has a title of "Post 123".')),(0,r.kt)("p",null,"Enable eager loading by passing a true value to the eager property:"),(0,r.kt)("h3",{id:"enabling-eager-loading"},"Enabling Eager Loading"),(0,r.kt)("p",null,"First, ensure the entity is associated to another entity by providing the association properties\n",(0,r.kt)("inlineCode",{parentName:"p"},"as_type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"join_on"),", and optionally ",(0,r.kt)("inlineCode",{parentName:"p"},"join_from"),"."),(0,r.kt)("p",null,"Then pass a true value to ",(0,r.kt)("inlineCode",{parentName:"p"},"eager"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Eager loaded associations must belong to the same data source as the parent entity.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.entities.fields]]\nname = "access"\nscalar = "Int" # While access is an integer in the database....\nas_type = "todo_access" # We will search by the properties of an actual access object.\nlist = true\nrequired = true\njoin_on = "todo_id"\njoin_from = "id"\neager = true\n')),(0,r.kt)("h3",{id:"after-enabling"},"After Enabling"),(0,r.kt)("p",null,"Once you have configured eager loading, you will see a few changes in the schema."),(0,r.kt)("p",null,"The input of the eager loaded entity will now change types from the originally defined\nscalar type to an object containing the keys of the eager loaded entity."),(0,r.kt)("p",null,"You may now send queries for FindOne and FindMany to search for entities based on the properties of\nanother entity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Without Eager Loading\nconst response = await query(GET_TODOS, {\n  query: {\n    completed: false,\n    access: 12345, // Access is of type INT without eager loading.\n  },\n});\n\n// With Eager Loading\nconst response = await query(GET_TODOS, {\n  query: {\n    completed: false,\n    // Access is of type `access` with eager loading.\n    access: {\n      user: {\n        uuid: userUuidVar(),\n      },\n      revoked: false,\n    },\n  },\n});\n")),(0,r.kt)("h3",{id:"the-outcome"},"The Outcome"),(0,r.kt)("p",null,"Eager loading is a fancy word for creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"JOIN")," in sql or ",(0,r.kt)("inlineCode",{parentName:"p"},"$lookup")," in mongo, which is why\neager loaded associations must belong to the same data source as the parent entity."))}p.isMDXComponent=!0}}]);