"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[7430],{7806:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=t(4848),s=t(8453),a=t(7547);const r={slug:"subgraph-v0.0.4-versatile-typings",title:"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator",authors:["nick"],tags:["subgraph"],date:new Date("2023-02-20T00:00:00.000Z")},o=void 0,l={permalink:"/blog/subgraph-v0.0.4-versatile-typings",editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.4/index.md",source:"@site/blog/subgraph-v0.0.4/index.md",title:"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator",description:"Hello all! Thanks for joining!",date:"2023-02-20T00:00:00.000Z",tags:[{label:"subgraph",permalink:"/blog/tags/subgraph"}],readingTime:2.94,hasTruncateMarker:!0,authors:[{name:"Nick McLean",title:"Maintainer of The Devoyage",url:"https://medium.com/@thedevoyage",imageURL:"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg",key:"nick"}],frontMatter:{slug:"subgraph-v0.0.4-versatile-typings",title:"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator",authors:["nick"],tags:["subgraph"],date:"2023-02-20T00:00:00.000Z"},unlisted:!1,prevItem:{title:"Subgraph v0.0.5 - API vs. Car - Startups, What is an API and Why Generate?",permalink:"/blog/subgraph-v0.0.5-api-vs-car"},nextItem:{title:"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust",permalink:"/blog/subgraph-v0.0.3-reusable-resolvers"}},h={authorsImageUrls:[void 0]},c=[{value:"Versatile Typings",id:"versatile-typings",level:2},{value:"The Typings",id:"the-typings",level:3},{value:"Defining an Entity",id:"defining-an-entity",level:3},{value:"Spin It Up",id:"spin-it-up",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Hello all! Thanks for joining!"}),"\n",(0,i.jsx)(n.p,{children:"Today, the goal is to share the idea of versatile typings for an API Generator."}),"\n",(0,i.jsxs)(n.p,{children:["In version ",(0,i.jsx)(n.code,{children:"v0.0.4"})," of the ",(0,i.jsx)(n.code,{children:"subgraph"})," API Generator Project, I am happy to introduce the (mongo) Object Id Scalar. This means it's now possible to instantly start an API ",(0,i.jsx)(n.code,{children:"Subgraph"})," Instance with the capabilities to find Mongo Documents by their Object ID! One simple step forward for this POC GraphQL API Generator written in Rust."]}),"\n",(0,i.jsxs)(n.p,{children:["In case you are new to ",(0,i.jsx)(n.code,{children:"Project Subgraph"}),', "Define to Run", is the motto. Define a simple configuration, and start the API. The code does the rest by generating resolvers and database connections -- An instantly generated API.']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://res.cloudinary.com/the-devoyage/image/upload/v1676924961/The-Devoyage/INTUITIVE_SCALARS_4_ttaqvh.png",alt:"GraphQL Versatile Typings"})}),"\n",(0,i.jsx)(n.p,{children:"So, what kind of scalars are we including in this API Generator? Let's take a look."}),"\n",(0,i.jsx)(n.h2,{id:"versatile-typings",children:"Versatile Typings"}),"\n",(0,i.jsx)(n.p,{children:"Creating an API Generator needs to be versatile, yet simple. Two steps simple."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Define the entities."}),"\n",(0,i.jsx)(n.li,{children:"Let the code do it's job to create the API."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This means that the scalar type of each entity versatile enough to cover many circumstances."}),"\n",(0,i.jsx)(n.h3,{id:"the-typings",children:"The Typings"}),"\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"Subgraph v0.0.4"})," we have a simple set of options, as the project is still a proof of concept in its infancy. There are 4, mostly primitive, scalars to define entities."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Object ID (Mongo)"}),"\n",(0,i.jsx)(n.li,{children:"String"}),"\n",(0,i.jsx)(n.li,{children:"Int"}),"\n",(0,i.jsx)(n.li,{children:"Boolean"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"As the project ramps up, more versatile options will be included."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Email"}),"\n",(0,i.jsx)(n.li,{children:"Date"}),"\n",(0,i.jsx)(n.li,{children:"DateTime"}),"\n",(0,i.jsx)(n.li,{children:"Password"}),"\n",(0,i.jsx)(n.li,{children:"Phone"}),"\n",(0,i.jsx)(n.li,{children:"Objects"}),"\n",(0,i.jsx)(n.li,{children:"Other Entities"}),"\n",(0,i.jsx)(n.li,{children:"... the list goes on!"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For now, we can establish some base practices on implementing new scalars before diving into the deep end."}),"\n",(0,i.jsx)(n.h3,{id:"defining-an-entity",children:"Defining an Entity"}),"\n",(0,i.jsx)(n.p,{children:"I'll say it once, and I'll say it again. Define to Run is the motto."}),"\n",(0,i.jsx)(n.p,{children:"Defining an entity is the almost the only thing you need to do in order to start the API, aside from declaring some database configuration."}),"\n",(0,i.jsxs)(n.p,{children:["Below, we define an entity for our ",(0,i.jsx)(n.code,{children:"Beers"})," service. It's the weekend somewhere."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Beer"})," entity has three properties including, ",(0,i.jsx)(n.code,{children:"name"}),", ",(0,i.jsx)(n.code,{children:"IBU"}),", and ",(0,i.jsx)(n.code,{children:"inStock"}),". The ability to define more than one entity is just as simple, if so chosen."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'[service]\n...\n\n[[service.entities]]\nname = "Beer"\n\n[[service.entities.fields]]\nname = "_id"\nscalar = "ObjectID"\nrequired = true\n\n[[service.entities.fields]]\nname = "name"\nscalar = "String"\nrequired = true\n\n[[service.entities.fields]]\nname = "IBU"\nscalar = "Int"\nrequired = false\n\n[[service.entities.fields]]\nname = "inStock"\nscalar = "Boolean"\nrequired = true\n\n[[service.entities]]\n...\n'})}),"\n",(0,i.jsx)(n.p,{children:"In about 50 lines of code, this little API can be started! Compare that to the hundreds or thousands of lines that might be written for a completely custom API that does nearly the exact same thing."}),"\n",(0,i.jsx)(n.p,{children:"Now that these couple lines have been written into a configuration file, the API can be spun up and queried."}),"\n",(0,i.jsx)(n.h3,{id:"spin-it-up",children:"Spin It Up"}),"\n",(0,i.jsx)(n.p,{children:"Once the entities are defined, the hard part is done. Starting the service can be done through a simple CLI Command."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"subgraph --config ./config.toml --port 5000\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And like that... a brand new Beer API has been born! Checkout the sandbox hosted at the defined port, ",(0,i.jsx)(n.code,{children:"http://localhost:5000"}),", to sample your server."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Thanks for checking out the ",(0,i.jsx)(n.a,{href:"https://www.github.com/the-devoyage/subgraph",children:"Repo"}),", and following along with this proof of concept. If you are interested in contributing or have some ideas, feel free to share on the ",(0,i.jsx)(n.code,{children:"issues"})," tab."]}),"\n",(0,i.jsxs)(n.p,{children:["Version ",(0,i.jsx)(n.code,{children:"v0.0.5"})," is on it's way, with configurable CORS settings. If you like the project or want to keep up to date, follow along to get notifications of future releases."]}),"\n",(0,i.jsx)(a.K,{})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7547:(e,n,t)=>{t.d(n,{K:()=>a});t(6540);var i=t(8774),s=t(4848);const a=()=>(0,s.jsx)("div",{className:"alert alert--info margin-vert--lg",style:{display:"flex",justifyContent:"space-between",flexDirection:"column"},children:(0,s.jsxs)("div",{className:"avatar",children:[(0,s.jsx)("a",{className:"avatar__photo-link avatar__photo avatar__photo--lg",href:"https://medium.com/@thedevoyage",children:(0,s.jsx)("img",{alt:"Nick McLean Profile Image",src:"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"})}),(0,s.jsxs)("div",{className:"avatar__intro",children:[(0,s.jsx)("div",{className:"avatar__name",children:"Nick McLean"}),(0,s.jsx)("small",{className:"avatar__subtitle padding-bottom--md",children:"Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!"}),(0,s.jsx)("div",{children:[{to:"https://medium.com/@thedevoyage",label:"Medium"},{to:"https://twitter.com/thedevoyage",label:"Twitter"},{to:"https://thedevoyage.slack.com",label:"Slack"},{to:"https://thedevoyage.gumroad.com/subscribe",label:"Newsletter"}].map((e=>(0,s.jsx)(i.A,{to:e.to,children:(0,s.jsx)("button",{className:"button button--primary margin-right--md",style:{color:"#fff",backgroundColor:"var(--ifm-color-dark-blue)"},children:e.label})},e.to)))})]})]})})},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);