"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[6266],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>u});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=n.createContext({}),o=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=o(e.components);return n.createElement(c.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=o(t),u=r,f=m["".concat(c,".").concat(u)]||m[u]||p[u]||l;return t?n.createElement(f,i(i({ref:a},d),{},{components:t})):n.createElement(f,i({ref:a},d))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var s={};for(var c in a)hasOwnProperty.call(a,c)&&(s[c]=a[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=t[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6600:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var n=t(7462),r=(t(7294),t(3905));const l={id:"field-scalar",title:"Scalar Types"},i=void 0,s={unversionedId:"entities/fields/field-scalar",id:"entities/fields/field-scalar",title:"Scalar Types",description:"Field Scalar Types",source:"@site/subgraph/05-entities/02-fields/03-scalar-type.md",sourceDirName:"05-entities/02-fields",slug:"/entities/fields/field-scalar",permalink:"/subgraph/entities/fields/field-scalar",draft:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/05-entities/02-fields/03-scalar-type.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"field-scalar",title:"Scalar Types"},sidebar:"subgraphSidebar",previous:{title:"Field Name",permalink:"/subgraph/entities/fields/field-name"},next:{title:"List Fields",permalink:"/subgraph/entities/fields/list-fields"}},c={},o=[{value:"Field Scalar Types",id:"field-scalar-types",level:2},{value:"String Scalar",id:"string-scalar",level:3},{value:"Integer Scalar",id:"integer-scalar",level:3},{value:"Boolean Scalar",id:"boolean-scalar",level:3},{value:"DateTime Scalar",id:"datetime-scalar",level:3},{value:"UUID Scalar",id:"uuid-scalar",level:3},{value:"ObjectID Scalar",id:"objectid-scalar",level:3},{value:"Object Scalar",id:"object-scalar",level:3}],d={toc:o};function p(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"field-scalar-types"},"Field Scalar Types"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Required")),(0,r.kt)("p",null,"A scalar describes the associated data type for the field, such as an integer or string. In addition\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," property, scalar type is required to define a field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.entities]]\nname = "Comment"\nfields = [\n    { name = "id", scalar = "Int" }\n]\n')),(0,r.kt)("p",null,"There are many scalar types that subgraph supports."),(0,r.kt)("h3",{id:"string-scalar"},"String Scalar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.entities]]\nname = "Comment"\nfields = [\n    { name = "description", scalar = "String" }\n]\n')),(0,r.kt)("h3",{id:"integer-scalar"},"Integer Scalar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.entities]]\nname = "Comment"\nfields = [\n    { name = "id", scalar = "Int" }\n]\n')),(0,r.kt)("h3",{id:"boolean-scalar"},"Boolean Scalar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.entities]]\nname = "Comment"\nfields = [\n    { name = "is_visible", scalar = "Boolean" }\n]\n')),(0,r.kt)("h3",{id:"datetime-scalar"},"DateTime Scalar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.entities]]\nname = "Comment"\nfields = [\n    { name = "created_at", scalar = "DateTime" }\n]\n')),(0,r.kt)("h3",{id:"uuid-scalar"},"UUID Scalar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.entities]]\nname = "Comment"\nfields = [\n    { name = "uuid", scalar = "UUID" }\n]\n')),(0,r.kt)("h3",{id:"objectid-scalar"},"ObjectID Scalar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.entities]]\nname = "Comment"\nfields = [\n    { name = "_id", scalar = "ObjectID" }\n]\n')),(0,r.kt)("h3",{id:"object-scalar"},"Object Scalar"),(0,r.kt)("p",null,"The object scalar is a unique scalar for Mongo and HTTP Data Sources. It allows for nested\nextensions to an entity."),(0,r.kt)("p",null,"To define a field that is an object, you must provide a nested array of fields to describe the\nobject, as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[[service.entities]]\nname = "User"\nfields = [\n    { name = "address", scalar = "Object", fields = [\n        { name = "first_line", scalar = "String" },\n        { name = "second_line", scalar = "String" },\n        { name = "zip_code", scalar = "Int" },\n        { name = "city", scalar = "String" },\n        { name = "state", scalar = "Int" },\n    ] }\n]\n')))}p.isMDXComponent=!0}}]);