"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[5819],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=p(r),g=n,b=h["".concat(s,".").concat(g)]||h[g]||c[g]||o;return r?a.createElement(b,i(i({ref:t},u),{},{components:r})):a.createElement(b,i({ref:t},u))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},6303:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const o={slug:"subgraph-v0.0.3-reusable-resolvers",title:"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust",authors:["nick"],tags:["subgraph"],date:new Date("2023-02-04T00:00:00.000Z")},i=void 0,l={permalink:"/blog/subgraph-v0.0.3-reusable-resolvers",editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.3/index.md",source:"@site/blog/subgraph-v0.0.3/index.md",title:"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust",description:"Hello all! Thanks for joining.",date:"2023-02-04T00:00:00.000Z",formattedDate:"February 4, 2023",tags:[{label:"subgraph",permalink:"/blog/tags/subgraph"}],readingTime:2.005,hasTruncateMarker:!0,authors:[{name:"Nick McLean",title:"Maintainer of The Devoyage",url:"https://medium.com/@thedevoyage",imageURL:"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg",key:"nick"}],frontMatter:{slug:"subgraph-v0.0.3-reusable-resolvers",title:"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust",authors:["nick"],tags:["subgraph"],date:"2023-02-04T00:00:00.000Z"},prevItem:{title:"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator",permalink:"/blog/subgraph-v0.0.4-versatile-typings"}},s={authorsImageUrls:[void 0]},p=[],u={toc:p};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Hello all! Thanks for joining."),(0,n.kt)("p",null,"Today I'd like to share a quick update for ",(0,n.kt)("inlineCode",{parentName:"p"},"@the-devoyage/subgraph"),", a GraphQL API Generator with the goal of simplicity.\xa0"),(0,n.kt)("p",null,"Define to run is the motto so far, which references the ease of running this API Generator. Define the schema to run the API. It should be that easy to start an API up."),(0,n.kt)("p",null,"In version ",(0,n.kt)("inlineCode",{parentName:"p"},"v0.0.3")," we are adding the ability to Find Many which is one of the reusable resolvers that is created for you when you start the service. "),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/the-devoyage/image/upload/v1675543551/The-Devoyage/CRUD_GraphQL_aaooqr.png",alt:"GraphQL Resolvers CRUD"})))}c.isMDXComponent=!0}}]);