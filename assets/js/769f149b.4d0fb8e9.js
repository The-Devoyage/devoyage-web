"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[2116],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={id:"quickstart",title:"Quickstart"},o=void 0,l={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"Rapid API Deployment with Subgraph",source:"@site/subgraph/02-quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/subgraph/quickstart",draft:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/02-quickstart.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"quickstart",title:"Quickstart"},sidebar:"subgraphSidebar",previous:{title:"Subgraph",permalink:"/subgraph/intro"},next:{title:"Usage",permalink:"/subgraph/category/usage"}},s={},c=[{value:"Rapid API Deployment with Subgraph",id:"rapid-api-deployment-with-subgraph",level:2},{value:"Download/Install",id:"downloadinstall",level:3},{value:"The Config File",id:"the-config-file",level:3},{value:"Create the File",id:"create-the-file",level:4},{value:"Run the Service",id:"run-the-service",level:3},{value:"Inspect the API",id:"inspect-the-api",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"rapid-api-deployment-with-subgraph"},"Rapid API Deployment with Subgraph"),(0,a.kt)("p",null,"Achieve a new API in just a matter of minutes with Subgraph. Our primary objective is straightforward: let your focus remain on your data, while Subgraph takes care of the surrounding code intricacies."),(0,a.kt)("h3",{id:"downloadinstall"},"Download/Install"),(0,a.kt)("p",null,"To begin, ensure you have the Subgraph software in place."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Download the latest version from ",(0,a.kt)("a",{parentName:"li",href:"https://thedevoyage.gumroad.com/l/subgraph"},"our store"),". Free trial is available."),(0,a.kt)("li",{parentName:"ol"},"Optionally, add the application to your path or make it easy to execute.")),(0,a.kt)("h3",{id:"the-config-file"},"The Config File"),(0,a.kt)("p",null,"In the realm of Subgraph, the config file reigns supreme. It serves as the control center, offering options for everything essential to run the API \u2013 from defining data creation processes to specifying data access permissions."),(0,a.kt)("h4",{id:"create-the-file"},"Create the File"),(0,a.kt)("p",null,"Initiate the process by creating a new file named ",(0,a.kt)("inlineCode",{parentName:"p"},"config.toml"),". The name of the file can be customized, but it must have a ",(0,a.kt)("inlineCode",{parentName:"p"},".toml")," extension."),(0,a.kt)("p",null,"This TOML file serves as the vessel for your configuration. Check out ",(0,a.kt)("a",{parentName:"p",href:"https://toml.io/en/"},"Toms Obvious Minimal Language")," for a quick and easy guide!"),(0,a.kt)("p",null,"Establishing a basic configuration is straightforward. Begin by outlining fundamental service options, specifying a data source, and defining an entity."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'# Information needed to start the Web Server.\n[service]\nname = "coffee_shop"\nport = 3030\n\n[[service.data_sources]]\n[service.data_sources.SQL] # Mongo, PG, MySQL, SqLite, HTTP options!\nname = "caffeine_data_source"\nuri = "sqlite:/home/nickisyourfan/Desktop/DEV/dbs/caffeine.db"\ndialect = "SQLITE"\n\n# Entities are sql tables or mongo collections\n# provided from the source.\n[[service.entities]]\nname = "Coffee" # The name of the table or collection.\nfields = [\n{ name = "id", scalar = "Int", required = true },\n{ name = "name", scalar = "String", required = true },\n{ name = "price", scalar = "Int", required = true },\n{ name = "available", scalar = "Boolean", required = true }\n]\n\n[[service.entities]]\nname = "Espresso"\n# The columns or properties that belong to the row or document.\nfields = [\n{ name = "id", scalar = "Int", required = true },\n{ name = "name", scalar = "String", required = true },\n{ name = "price", scalar = "Int" },\n{ name = "available", scalar = "Boolean" }\n]\n')),(0,a.kt)("h3",{id:"run-the-service"},"Run the Service"),(0,a.kt)("p",null,"Confirm that the data source is correctly configured and initiate the service. This process may involve creating initial structures and configuring databases, with migrations being a prime example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"subgraph --config ./config.toml\n")),(0,a.kt)("h3",{id:"inspect-the-api"},"Inspect the API"),(0,a.kt)("p",null,"Once the service is running, open your browser and navigate to the sandbox hosted at the specified port, which, in the example above, is port 3030."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/the-devoyage/image/upload/v1680991155/Screenshot_from_2023-04-08_16-58-17_lt8kqz.png",alt:"sandbox screenshot"})),(0,a.kt)("p",null,"Inside the sandbox, explore the built-in Docs section to understand the API capabilities. Subgraph's primary role is to generate methods for interacting with data:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Find One:")," Query the API for a single result."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Find Many:")," Search for multiple results."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Create One:")," Add new instances of entities to the data source."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Update One (when supported):")," Modify properties of a specific entity."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Update Many:")," Modify properties of multiple entities.")),(0,a.kt)("p",null,"To interact with the API, start by crafting a GraphQL query. Don't hesitate to refer to the generated Docs or Schema for assistance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query FindOneCoffee {\n  get_coffee(get_coffee_input: { query: { id: 24 } }) {\n    id\n    name\n    price\n    available\n  }\n}\n")))}u.isMDXComponent=!0}}]);