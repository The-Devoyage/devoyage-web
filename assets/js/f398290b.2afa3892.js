"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[5693],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=l(t),f=i,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||s;return t?r.createElement(m,a(a({ref:n},d),{},{components:t})):r.createElement(m,a({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,a=new Array(s);a[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8141:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const s={id:"examples-associations",title:"Extending Entities/Associations"},a=void 0,o={unversionedId:"examples/examples-associations",id:"examples/examples-associations",title:"Extending Entities/Associations",description:"Using the field configuration properties, astype, joinon, and join_from, you can extend or associate an entity with another.",source:"@site/subgraph/12-examples/10-joins-extends.md",sourceDirName:"12-examples",slug:"/examples/examples-associations",permalink:"/subgraph/examples/examples-associations",draft:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/12-examples/10-joins-extends.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{id:"examples-associations",title:"Extending Entities/Associations"},sidebar:"subgraphSidebar",previous:{title:"CORS Examples",permalink:"/subgraph/examples/examples-cors"},next:{title:"Guards",permalink:"/subgraph/examples/examples-guards"}},c={},l=[],d={toc:l};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Using the field configuration properties, ",(0,i.kt)("inlineCode",{parentName:"p"},"as_type"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"join_on"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"join_from"),", you can extend or associate an entity with another."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[service]\nname = "friends"\nport = 4050\nlog_level = "debug"\n\n[[service.data_sources]]\n[service.data_sources.Mongo]\nname = "friends_data_source"\nuri = "mongodb://sun:sun@127.0.0.1:27017/sun"\ndb = "sun"\n\n[[service.data_sources]]\n[service.data_sources.SQL]\nname = "coffee_data_source"\nuri = "sqlite:/home/nickisyourfan/Desktop/DEV/dbs/caffeine.db"\ndialect = "SQLITE"\n\n[[service.data_sources]]\n[service.data_sources.HTTP]\nname = "todos"\nurl = "https://jsonplaceholder.typicode.com"\n\n## The following `user` entity defines associations to the `Coffee` and  `todo` entities.\n## The DB stores a reference ID or array of IDs to associate.\n## Subgraph automatically populates the associated entity when querying.\n[[service.entities]]\nname = "user"\n[[service.entities.fields]]\nname = "_id"\nscalar = "ObjectID"\nrequired = true\nexclude_from_input = ["CreateOne", "UpdateOne"]\n[[service.entities.fields]]\nname = "name"\nscalar = "String"\nrequired = true\n[[service.entities.fields]]\nname = "age"\nscalar = "Int"\nrequired = false\n[[service.entities.fields]]\nname = "married"\nscalar = "Boolean"\nrequired = true\n[[service.entities.fields]]\nname = "friends"\nscalar = "ObjectID"\nrequired = false\nlist = true\nas_type = "user"\njoin_on = "_id"\n[[service.entities.fields]]\nname = "fav_coffees"\nscalar = "Int"\nrequired = false\nas_type = "Coffee"\nlist = true\njoin_on = "id"\n[[service.entities.fields]]\nname = "todos"\nscalar = "Int"\nrequired = false\nas_type = "todo"\nlist = true\njoin_on = "id"\n[[service.entities.fields]]\nname = "todo"\nscalar = "Int"\nrequired = false\nas_type = "todo"\njoin_on = "id"\n\n[[service.entities]]\nname = "Coffee"\n[service.entities.data_source]\nfrom = "coffee_data_source"\n[[service.entities.fields]]\nname = "id"\nscalar= "Int"\nrequired = true\nexclude_from_input = ["CreateOne", "UpdateOne", "UpdateMany"]\n[[service.entities.fields]]\nname = "name"\nscalar = "String"\nrequired = true\n[[service.entities.fields]]\nname = "price"\nscalar = "Int"\nrequired = true\n[[service.entities.fields]]\nname = "available"\nscalar = "Boolean"\nrequired = true\n\n[[service.entities]]\nname = "todo"\n[service.entities.data_source]\nfrom = "todos"\npath = "/todos"\n[service.entities.data_source.resolvers]\n[service.entities.data_source.resolvers.find_one]\npath = "/:id"\n[service.entities.data_source.resolvers.find_many]\nsearch_query = [["userId", ":userId"], ["completed", ":completed"], ["id", ":id"]]\n[[service.entities.fields]]\nname = "userId"\nscalar = "Int"\nrequired = true\n[[service.entities.fields]]\nname = "id"\nscalar = "Int"\nrequired = true\n[[service.entities.fields]]\nname = "title"\nscalar = "String"\nrequired = true\n[[service.entities.fields]]\nname = "completed"\nscalar = "Boolean"\nrequired = true\n')))}u.isMDXComponent=!0}}]);