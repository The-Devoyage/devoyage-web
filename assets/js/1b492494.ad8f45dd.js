"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[7638],{7179:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var r=n(4848),i=n(8453);const s={id:"registration-process",title:"Registration Process"},o=void 0,a={id:"auth-service/registration-process",title:"Registration Process",description:"Using the browser's built in Passkey API, you can easily create client side code to perform the registration process.",source:"@site/subgraph/06-auth-service/04-registration-process.md",sourceDirName:"06-auth-service",slug:"/auth-service/registration-process",permalink:"/subgraph/auth-service/registration-process",draft:!1,unlisted:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/06-auth-service/04-registration-process.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"registration-process",title:"Registration Process"},sidebar:"subgraphSidebar",previous:{title:"The Subgraph User",permalink:"/subgraph/auth-service/subgraph-user"},next:{title:"Authentication Process",permalink:"/subgraph/auth-service/authentication-process"}},c={},u=[{value:"Two Steps to Register",id:"two-steps-to-register",level:2},{value:"Register Start",id:"register-start",level:3},{value:"Register Finish",id:"register-finish",level:3}];function l(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Using the browser's built in Passkey API, you can easily create client side code to perform the registration process."}),"\n",(0,r.jsx)(t.h2,{id:"two-steps-to-register",children:"Two Steps to Register"}),"\n",(0,r.jsx)(t.p,{children:"There are two requests that are required in order to perform a successful registration."}),"\n",(0,r.jsx)(t.h3,{id:"register-start",children:"Register Start"}),"\n",(0,r.jsx)(t.p,{children:"First, send the API an identifier of which you want to register using the register start mutation."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'// Create the mutation\nconst REGISTER_START = gql`\n  mutation RegisterStart($identifier: String!) {\n    register_start(identifier: $identifier)\n  }\n`;\n\n// Execute the mutation using your client of choice.\nconst response = executeMutation(REGISTER_START, {\n  identifier: "nickisyourfan",\n});\n'})}),"\n",(0,r.jsx)(t.p,{children:"The response object will contain signed options that the Browser's Passkey API can use\nto continue the registration process."}),"\n",(0,r.jsx)(t.h3,{id:"register-finish",children:"Register Finish"}),"\n",(0,r.jsxs)(t.p,{children:["Once the options are received, execute the ",(0,r.jsx)(t.code,{children:"REGISTER_FINISH"})," mutation to finalize the registration process."]}),"\n",(0,r.jsxs)(t.p,{children:["Before executing, build the credential using the options received from the ",(0,r.jsx)(t.code,{children:"REGISTER_START"})," mutation along with\nthe browsers Passkey API."]}),"\n",(0,r.jsxs)(t.p,{children:["Some properties, as shown below, are required to be of type Int Array. The example below uses the npm library ",(0,r.jsx)(t.code,{children:"js-base64"}),"\nto assist with this process."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'import { Base64 } from "js-base64";\n\n// Create the mutation\nconst REGISTER_FINISH = gql`\n  mutation RegisterFinish($identifier: String!, $public_key: String!) {\n    register_finish(identifier: $identifier, public_key: $public_key)\n  }\n`;\n\n//  Extract the credential creation options from the previous response.\nconst cco = response.register_start as CredentialCreationOptions;\n\n// Build the credential using the browser\'s navigator credentials api.\nconst credential = await navigator.credentials.create({\n  publicKey: {\n    ...cco.publicKey,\n    challenge: Base64.toUint8Array(\n      (cco.publicKey?.challenge as unknown) as string\n    ),\n    user: {\n      ...cco.publicKey?.user,\n      id: Base64.toUint8Array((cco.publicKey?.user?.id as unknown) as string),\n    },\n  },\n});\n\nif (credential instanceof PublicKeyCredential) {\n  // Create a credential to share with the API.\n  const jsonCredential = {\n    id: credential.id,\n    type: credential.type,\n    rawId: Base64.fromUint8Array(new Uint8Array(credential.rawId), true),\n    extensions: credential.getClientExtensionResults(),\n    response: {\n      clientDataJSON: Base64.fromUint8Array(\n        new Uint8Array(credential.response.clientDataJSON),\n        true\n      ),\n      attestationObject: Base64.fromUint8Array(\n        new Uint8Array(\n          ((credential.response as unknown) as Record<string, ArrayBuffer>)\n            .attestationObject as ArrayBuffer\n        ),\n        true\n      ),\n    },\n  };\n\n  // Execute the operation\n  const success = executeMutation(REGISTER_START, {\n    identifier: "nickisyourfan",\n    public_key: JSON.stringify(jsonCredential),\n  });\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:'Once a successful response is received, the user may proceed to "log in" using the Authentication Process.'})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(6540);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);