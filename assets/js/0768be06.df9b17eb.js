"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[7405],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),h=u(n),d=i,f=h["".concat(c,".").concat(d)]||h[d]||p[d]||a;return n?r.createElement(f,s(s({ref:t},l),{},{components:n})):r.createElement(f,s({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7016:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={id:"authentication-process",title:"Authentication Process"},s=void 0,o={unversionedId:"auth-service/authentication-process",id:"auth-service/authentication-process",title:"Authentication Process",description:"After a user has successfully registered using the Registration process in the previous step,",source:"@site/subgraph/06-auth-service/05-authentication-process.md",sourceDirName:"06-auth-service",slug:"/auth-service/authentication-process",permalink:"/subgraph/auth-service/authentication-process",draft:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/06-auth-service/05-authentication-process.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"authentication-process",title:"Authentication Process"},sidebar:"subgraphSidebar",previous:{title:"Registration Process",permalink:"/subgraph/auth-service/registration-process"},next:{title:"Authorization",permalink:"/subgraph/auth-service/authorization"}},c={},u=[{value:"Two Steps to Authenticate",id:"two-steps-to-authenticate",level:2},{value:"Authenticate Start",id:"authenticate-start",level:3},{value:"Authenticate Finish",id:"authenticate-finish",level:3},{value:"Response Details",id:"response-details",level:2}],l={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"After a user has successfully registered using the Registration process in the previous step,\nthey may authenticate using a similar two step process."),(0,i.kt)("h2",{id:"two-steps-to-authenticate"},"Two Steps to Authenticate"),(0,i.kt)("h3",{id:"authenticate-start"},"Authenticate Start"),(0,i.kt)("p",null,"First, initialize the process by sending a ",(0,i.kt)("inlineCode",{parentName:"p"},"authenticate_start")," mutation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Create the mutation\nexport const AUTHENTICATE_START = gql`\n  mutation AuthenticateStart($identifier: String!) {\n    authenticate_start(identifier: $identifier)\n  }\n`;\n\n// Execute the mutation using your client of choice.\nconst response = executeMutation(REGISTER_START, { identifier "nickisyourfan" });\n')),(0,i.kt)("h3",{id:"authenticate-finish"},"Authenticate Finish"),(0,i.kt)("p",null,"Use the options in the response to create a credential that is used to identify the user in the next request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const credentialRequestOptions = (response.authenticate_start as unknown) as CredentialRequestOptions;\n\n// Create the credential.\nconst credential = await navigator.credentials.get({\n  publicKey: {\n    ...credentialRequestOptions.publicKey,\n    challenge: Base64.toUint8Array(\n      (credentialRequestOptions.publicKey?.challenge as unknown) as string\n    ),\n    allowCredentials: credentialRequestOptions.publicKey?.allowCredentials?.map(\n      (c) => ({\n        ...c,\n        id: Base64.toUint8Array((c.id as unknown) as string),\n      })\n    ),\n  },\n});\n\nif (credential instanceof PublicKeyCredential) {\n  // Get the response from the credential.\n  const response = credential.response as AuthenticatorAssertionResponse;\n\n  // Build a serializable credential to send to the API.\n  const jsonCredential = {\n    id: credential.id,\n    type: credential.type,\n    rawId: Base64.fromUint8Array(new Uint8Array(credential.rawId), true),\n    extensions: credential.getClientExtensionResults(),\n    response: {\n      authenticatorData: Base64.fromUint8Array(\n        new Uint8Array(response.authenticatorData),\n        true\n      ),\n      clientDataJSON: Base64.fromUint8Array(\n        new Uint8Array(response.clientDataJSON),\n        true\n      ),\n      signature: Base64.fromUint8Array(\n        new Uint8Array(response.signature),\n        true\n      ),\n    },\n  };\n\n  // Execute the operation\n  const {\n    authenticate_finish: { user_identifier, user_uuid, token },\n  } = executeMutation(REGISTER_FINISH, {\n    identifier: "nickisyourfan",\n    public_key: JSON.stringify(jsonCredential),\n  });\n}\n')),(0,i.kt)("h2",{id:"response-details"},"Response Details"),(0,i.kt)("p",null,"After succcessfuly logging in you will receive three properties including the user's identifier, UUID, and token."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Identifier - The input provided by the user to identify their account. Usually an email or username."),(0,i.kt)("li",{parentName:"ul"},"UUID - The shareable id that can be used to identify a user."),(0,i.kt)("li",{parentName:"ul"},"Token - A signed ",(0,i.kt)("inlineCode",{parentName:"li"},"biscuit")," token, similar to a JWT, that is used to further access the API. See the biscuit rust crate for more details concerning biscuits.")))}p.isMDXComponent=!0}}]);