"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[6134],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>g});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=u(r),g=i,h=d["".concat(c,".").concat(g)]||d[g]||p[g]||s;return r?n.createElement(h,a(a({ref:t},l),{},{components:r})):n.createElement(h,a({ref:t},l))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,a=new Array(s);a[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var u=2;u<s;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6645:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var n=r(7462),i=(r(7294),r(3905));const s={id:"registration-process",title:"Registration Process"},a=void 0,o={unversionedId:"auth-service/registration-process",id:"auth-service/registration-process",title:"Registration Process",description:"Using the browser's built in Passkey API, you can easily create client side code to perform the registration process.",source:"@site/subgraph/06-auth-service/04-registration-process.md",sourceDirName:"06-auth-service",slug:"/auth-service/registration-process",permalink:"/subgraph/auth-service/registration-process",draft:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/06-auth-service/04-registration-process.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"registration-process",title:"Registration Process"},sidebar:"subgraphSidebar",previous:{title:"The Subgraph User",permalink:"/subgraph/auth-service/subgraph-user"},next:{title:"Authentication Process",permalink:"/subgraph/auth-service/authentication-process"}},c={},u=[{value:"Two Steps to Register",id:"two-steps-to-register",level:2},{value:"Register Start",id:"register-start",level:3},{value:"Register Finish",id:"register-finish",level:3}],l={toc:u};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Using the browser's built in Passkey API, you can easily create client side code to perform the registration process."),(0,i.kt)("h2",{id:"two-steps-to-register"},"Two Steps to Register"),(0,i.kt)("p",null,"There are two requests that are required in order to perform a successful registration."),(0,i.kt)("h3",{id:"register-start"},"Register Start"),(0,i.kt)("p",null,"First, send the API an identifier of which you want to register using the register start mutation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// Create the mutation\nconst REGISTER_START = gql`\n  mutation RegisterStart($identifier: String!) {\n    register_start(identifier: $identifier)\n  }\n`;\n\n// Execute the mutation using your client of choice.\nconst response = executeMutation(REGISTER_START, {\n  identifier: "nickisyourfan",\n});\n')),(0,i.kt)("p",null,"The response object will contain signed options that the Browser's Passkey API can use\nto continue the registration process."),(0,i.kt)("h3",{id:"register-finish"},"Register Finish"),(0,i.kt)("p",null,"Once the options are received, execute the ",(0,i.kt)("inlineCode",{parentName:"p"},"REGISTER_FINISH")," mutation to finalize the registration process."),(0,i.kt)("p",null,"Before executing, build the credential using the options received from the ",(0,i.kt)("inlineCode",{parentName:"p"},"REGISTER_START")," mutation along with\nthe browsers Passkey API."),(0,i.kt)("p",null,"Some properties, as shown below, are required to be of type Int Array. The example below uses the npm library ",(0,i.kt)("inlineCode",{parentName:"p"},"js-base64"),"\nto assist with this process."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Base64 } from "js-base64";\n\n// Create the mutation\nconst REGISTER_FINISH = gql`\n  mutation RegisterFinish($identifier: String!, $public_key: String!) {\n    register_finish(identifier: $identifier, public_key: $public_key)\n  }\n`;\n\n//  Extract the credential creation options from the previous response.\nconst cco = response.register_start as CredentialCreationOptions;\n\n// Build the credential using the browser\'s navigator credentials api.\nconst credential = await navigator.credentials.create({\n  publicKey: {\n    ...cco.publicKey,\n    challenge: Base64.toUint8Array(\n      (cco.publicKey?.challenge as unknown) as string\n    ),\n    user: {\n      ...cco.publicKey?.user,\n      id: Base64.toUint8Array((cco.publicKey?.user?.id as unknown) as string),\n    },\n  },\n});\n\nif (credential instanceof PublicKeyCredential) {\n  // Create a credential to share with the API.\n  const jsonCredential = {\n    id: credential.id,\n    type: credential.type,\n    rawId: Base64.fromUint8Array(new Uint8Array(credential.rawId), true),\n    extensions: credential.getClientExtensionResults(),\n    response: {\n      clientDataJSON: Base64.fromUint8Array(\n        new Uint8Array(credential.response.clientDataJSON),\n        true\n      ),\n      attestationObject: Base64.fromUint8Array(\n        new Uint8Array(\n          ((credential.response as unknown) as Record<string, ArrayBuffer>)\n            .attestationObject as ArrayBuffer\n        ),\n        true\n      ),\n    },\n  };\n\n  // Execute the operation\n  const success = executeMutation(REGISTER_START, {\n    identifier: "nickisyourfan",\n    public_key: JSON.stringify(jsonCredential),\n  });\n}\n')),(0,i.kt)("p",null,'Once a successful response is received, the user may proceed to "log in" using the Authentication Process.'))}p.isMDXComponent=!0}}]);