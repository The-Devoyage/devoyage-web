"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[9973],{7670:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var i=s(4848),r=s(8453);const t={id:"eval-expr",title:"The EvalExpr Crate"},a=void 0,o={id:"expressions/eval-expr",title:"The EvalExpr Crate",description:"EvalExpr",source:"@site/subgraph/11-expressions/01-eval-expr.md",sourceDirName:"11-expressions",slug:"/expressions/eval-expr",permalink:"/subgraph/expressions/eval-expr",draft:!1,unlisted:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/11-expressions/01-eval-expr.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"eval-expr",title:"The EvalExpr Crate"},sidebar:"subgraphSidebar",previous:{title:"Expressions",permalink:"/subgraph/category/expressions"},next:{title:"Built In Functions",permalink:"/subgraph/expressions/built-in-functions"}},l={},d=[{value:"EvalExpr",id:"evalexpr",level:2},{value:"Definitions",id:"definitions",level:2},{value:"The Multi-Line Expression",id:"the-multi-line-expression",level:3},{value:"The Inline Expression",id:"the-inline-expression",level:3},{value:"Returned Values",id:"returned-values",level:2},{value:"Variables",id:"variables",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"evalexpr",children:"EvalExpr"}),"\n",(0,i.jsxs)(n.p,{children:["The crate ",(0,i.jsx)(n.a,{href:"https://docs.rs/evalexpr/latest/evalexpr/",children:"evalexpr"})," allows developers to create custom and unique expressions interact with contextual data specific to a request.\nThis allows developers to utilize user specific data to perform an action."]}),"\n",(0,i.jsxs)(n.p,{children:["Any functionality of the ",(0,i.jsx)(n.code,{children:"evalexpr"})," API can be utilized when constructing an expression. Reading the documentaioned provided by\nthis crate can be extreemly useful when working with expressions that are applied to the Subgraph Service."]}),"\n",(0,i.jsx)(n.p,{children:"Here are a couple quick examples to get up in running. That being said, don't be afraid of reading the EvalExpr Documentation."}),"\n",(0,i.jsx)(n.h2,{id:"definitions",children:"Definitions"}),"\n",(0,i.jsx)(n.p,{children:"There are two ways to define expressions, Multi-Line expressions and Inline expressions."}),"\n",(0,i.jsx)(n.h3,{id:"the-multi-line-expression",children:"The Multi-Line Expression"}),"\n",(0,i.jsx)(n.p,{children:"Using three single quotes when defining the expression string will break the code into a multi line expression allowing you to write longer form expressions\nwhile still preserving the ability to read the expression easily."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[[entities.data_source.resolvers.update_many.guards]]\nname = "todo_not_found"\n# Multi Line Expression\nif_expr = \'\'\'\n  todo_uuids = input("query", "uuid");\n  todos = context("todo.id");\n  len(todo_uuids) != len(todos)\n\'\'\'\nthen_msg = "Todo not found."\n'})}),"\n",(0,i.jsx)(n.h3,{id:"the-inline-expression",children:"The Inline Expression"}),"\n",(0,i.jsx)(n.p,{children:"Inline expressions are useful when working with smaller expressions."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Note: They require double quotes to be escaped."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[[entities]]\nname = "todo"\nrequired = true\nfields = [\n  { name = "id", scalar = "Int" },\n  { name = "title", scalar = "String" },\n  # The Inline expression for `default_value`\n  { name = "updated_by", scalar = "Int", default_value = "context(\\"user.id\\")" },\n]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"returned-values",children:"Returned Values"}),"\n",(0,i.jsx)(n.p,{children:"Returning a value from an expression is implicit and similar to Rust syntax. Omitting the expression chaining operator, the semicolon, will implicitly return the value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[[service.guards]]\nname = "access_denied"\nif_expr = \'\'\'\n    // Evaluates to true, blocking the request. No semicolon following the final line returns the evaluated expression.\n    1 == 1\n\'\'\'\nthen_msg = "No one may ever access as the expression always evaluates to true."\n\n# Same as above, just different syntax:\n[service]\nguards = [\n    { name = "access_denied", if_expr = "1 == 1", then_msg = "Nope, still no access." }\n]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(n.p,{children:"You may define variables so that guards become more readable."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:"[[service.guards]]\nname = \"access_denied\"\nif_expr = '''\n    // Defining a variable, should_guard, by using a semicolon to chain the operation.\n    should_guard = 1 == 1;\n\n    // Return the evaluated expression:\n    should_guard\n'''\nthen_msg = \"No one may ever access as the expression always evaluates to true.\"\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);