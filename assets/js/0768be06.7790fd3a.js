"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[1727],{8743:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var i=n(4848),s=n(8453);const r={id:"authentication-process",title:"Authentication Process"},a=void 0,o={id:"auth-service/authentication-process",title:"Authentication Process",description:"After a user has successfully registered using the Registration process in the previous step,",source:"@site/subgraph/06-auth-service/05-authentication-process.md",sourceDirName:"06-auth-service",slug:"/auth-service/authentication-process",permalink:"/subgraph/auth-service/authentication-process",draft:!1,unlisted:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/06-auth-service/05-authentication-process.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"authentication-process",title:"Authentication Process"},sidebar:"subgraphSidebar",previous:{title:"Registration Process",permalink:"/subgraph/auth-service/registration-process"},next:{title:"Authorization",permalink:"/subgraph/auth-service/authorization"}},c={},u=[{value:"Two Steps to Authenticate",id:"two-steps-to-authenticate",level:2},{value:"Authenticate Start",id:"authenticate-start",level:3},{value:"Authenticate Finish",id:"authenticate-finish",level:3},{value:"Response Details",id:"response-details",level:3}];function l(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"After a user has successfully registered using the Registration process in the previous step,\nthey may authenticate using a similar two step process."}),"\n",(0,i.jsx)(t.h2,{id:"two-steps-to-authenticate",children:"Two Steps to Authenticate"}),"\n",(0,i.jsx)(t.h3,{id:"authenticate-start",children:"Authenticate Start"}),"\n",(0,i.jsxs)(t.p,{children:["First, initialize the process by sending a ",(0,i.jsx)(t.code,{children:"authenticate_start"})," mutation."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'// Create the mutation\nexport const AUTHENTICATE_START = gql`\n  mutation AuthenticateStart($identifier: String!) {\n    authenticate_start(identifier: $identifier)\n  }\n`;\n\n// Execute the mutation using your client of choice.\nconst response = executeMutation(REGISTER_START, { identifier "nickisyourfan" });\n'})}),"\n",(0,i.jsx)(t.h3,{id:"authenticate-finish",children:"Authenticate Finish"}),"\n",(0,i.jsx)(t.p,{children:"Use the options in the response to create a credential that is used to identify the user in the next request."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'const credentialRequestOptions = (response.authenticate_start as unknown) as CredentialRequestOptions;\n\n// Create the credential.\nconst credential = await navigator.credentials.get({\n  publicKey: {\n    ...credentialRequestOptions.publicKey,\n    challenge: Base64.toUint8Array(\n      (credentialRequestOptions.publicKey?.challenge as unknown) as string\n    ),\n    allowCredentials: credentialRequestOptions.publicKey?.allowCredentials?.map(\n      (c) => ({\n        ...c,\n        id: Base64.toUint8Array((c.id as unknown) as string),\n      })\n    ),\n  },\n});\n\nif (credential instanceof PublicKeyCredential) {\n  // Get the response from the credential.\n  const response = credential.response as AuthenticatorAssertionResponse;\n\n  // Build a serializable credential to send to the API.\n  const jsonCredential = {\n    id: credential.id,\n    type: credential.type,\n    rawId: Base64.fromUint8Array(new Uint8Array(credential.rawId), true),\n    extensions: credential.getClientExtensionResults(),\n    response: {\n      authenticatorData: Base64.fromUint8Array(\n        new Uint8Array(response.authenticatorData),\n        true\n      ),\n      clientDataJSON: Base64.fromUint8Array(\n        new Uint8Array(response.clientDataJSON),\n        true\n      ),\n      signature: Base64.fromUint8Array(\n        new Uint8Array(response.signature),\n        true\n      ),\n    },\n  };\n\n  // Execute the operation\n  const {\n    authenticate_finish: { user_identifier, user_uuid, token },\n  } = executeMutation(REGISTER_FINISH, {\n    identifier: "nickisyourfan",\n    public_key: JSON.stringify(jsonCredential),\n  });\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"response-details",children:"Response Details"}),"\n",(0,i.jsx)(t.p,{children:"After succcessfuly logging in you will receive three properties including the user's identifier, UUID, and token."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Identifier - The input provided by the user to identify their account. Usually an email or username."}),"\n",(0,i.jsx)(t.li,{children:"UUID - The shareable id that can be used to identify a user."}),"\n",(0,i.jsxs)(t.li,{children:["Token - A signed ",(0,i.jsx)(t.code,{children:"biscuit"})," token, similar to a JWT, that is used to further access the API. See the biscuit rust crate for more information concerning biscuits."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);