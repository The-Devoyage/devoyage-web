"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"subgraph-v0.0.4-versatile-typings","metadata":{"permalink":"/blog/subgraph-v0.0.4-versatile-typings","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.4/index.md","source":"@site/blog/subgraph-v0.0.4/index.md","title":"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator","description":"Hello all! Thanks for joining!","date":"2023-02-14T00:00:00.000Z","formattedDate":"February 14, 2023","tags":[{"label":"subgraph","permalink":"/blog/tags/subgraph"}],"readingTime":2.905,"hasTruncateMarker":false,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"slug":"subgraph-v0.0.4-versatile-typings","title":"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator","authors":["nick"],"tags":["subgraph"],"date":"2023-02-14T00:00:00.000Z"},"nextItem":{"title":"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust","permalink":"/blog/subgraph-v0.0.3-reusable-resolvers"}},"content":"Hello all! Thanks for joining!\\n\\nToday, the goal is to share the idea of versatile typings for an API Generator. \\n\\nIn version `v0.0.4` of the `subgraph` API Generator Project, I am happy to introduce the (mongo) Object Id Scalar. This means it\'s now possible to instantly start an API `Subgraph` Instance with the capabilities to find Mongo Documents by their Object ID! One simple step forward for this POC GraphQL API Generator written in Rust.\\n\\nIn case you are new to `Project Subgraph`, \\"Define to Run\\", is the motto. Define a simple configuration, and start the API. The code does the rest by generating resolvers and database connections -- An instantly generated API.  \\n\\n![GraphQL Versatile Typings](https://res.cloudinary.com/the-devoyage/image/upload/v1676924961/The-Devoyage/INTUITIVE_SCALARS_4_ttaqvh.png)\\n\\nSo, what kind of scalars are we including in this API Generator? Let\'s take a look.\\n\\n## Versatile Typings\\n\\nCreating an API Generator needs to be versatile, yet simple. Two steps simple. \\n\\n1. Define the entities.\\n2. Let the code do it\'s job to create the API.\\n\\nThis means that the scalar type of each entity versatile enough to cover many circumstances.\\n\\n### The Typings\\n\\nWith `Subgraph v0.0.4` we have a simple set of options, as the project is still a proof of concept in its infancy. There are 4, mostly primitive, scalars to define entities.\\n\\n- Object ID (Mongo)\\n- String\\n- Int\\n- Boolean\\n\\nAs the project ramps up, more versatile options will be included.\\n\\n- Email\\n- Date\\n- DateTime\\n- Password\\n- Phone\\n- Objects\\n- Other Entities\\n- ... the list goes on!\\n\\nFor now, we can establish some base practices on implementing new scalars before diving into the deep end.\\n\\n### Defining an Entity\\n\\nI\'ll say it once, and I\'ll say it again. Define to Run is the motto.\\n\\nDefining an entity is the almost the only thing you need to do in order to start the API, aside from declaring some database configuration.\\n\\nBelow, we define an entity for our `Beers` service. It\'s the weekend somewhere.\\n\\nThe `Beer` entity has three properties including, `name`, `IBU`, and `inStock`. The ability to define more than one entity is just as simple, if so chosen.\\n\\n```\\n[service]\\n...\\n\\n[[service.entities]]\\nname = \\"Beer\\"\\n\\n[[service.entities.fields]]\\nname = \\"_id\\"\\nscalar = \\"ObjectID\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"name\\"\\nscalar = \\"String\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"IBU\\"\\nscalar = \\"Int\\"\\nrequired = false\\n\\n[[service.entities.fields]]\\nname = \\"inStock\\"\\nscalar = \\"Boolean\\"\\nrequired = true  \\n\\n[[service.entities]]\\n...\\n```\\n\\nIn about 50 lines of code, this little API can be started! Compare that to the hundreds or thousands of lines that might be written for a completely custom API that does nearly the exact same thing. \\n\\nNow that these couple lines have been written into a configuration file, the API can be spun up and queried.\\n\\n### Spin It Up\\n\\nOnce the entities are defined, the hard part is done. Starting the service can be done through a simple CLI Command.\\n\\n```bash\\nsubgraph --config ./config.toml --port 5000\\n```\\n\\nAnd like that... a brand new Beer API has been born! Checkout the sandbox hosted at the defined port, `http://localhost:5000`, to sample your server.\\n\\n---\\n\\nThanks for checking out the [Repo](https://www.github.com/the-devoyage/subgraph), and following along with this proof of concept. If you are interested in contributing or have some ideas, feel free to share on the `issues` tab.\\n\\nVersion `v0.0.5` is on it\'s way, with configurable CORS settings. If you like the project or want to keep up to date, follow along to get notifications of future releases."},{"id":"subgraph-v0.0.3-reusable-resolvers","metadata":{"permalink":"/blog/subgraph-v0.0.3-reusable-resolvers","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.3/index.md","source":"@site/blog/subgraph-v0.0.3/index.md","title":"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust","description":"Hello all! Thanks for joining.","date":"2023-02-04T00:00:00.000Z","formattedDate":"February 4, 2023","tags":[{"label":"subgraph","permalink":"/blog/tags/subgraph"}],"readingTime":2,"hasTruncateMarker":false,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"slug":"subgraph-v0.0.3-reusable-resolvers","title":"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust","authors":["nick"],"tags":["subgraph"],"date":"2023-02-04T00:00:00.000Z"},"prevItem":{"title":"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator","permalink":"/blog/subgraph-v0.0.4-versatile-typings"}},"content":"Hello all! Thanks for joining.\\n\\nToday I\'d like to share a quick update for `@the-devoyage/subgraph`, a GraphQL API Generator with the goal of simplicity.\xa0\\n\\nDefine to run is the motto so far, which references the ease of running this API Generator. Define the schema to run the API. It should be that easy to start an API up.\\n\\nIn version `v0.0.3` we are adding the ability to Find Many which is one of the reusable resolvers that is created for you when you start the service. \\n\\n![GraphQL Resolvers CRUD](https://res.cloudinary.com/the-devoyage/image/upload/v1675543551/The-Devoyage/CRUD_GraphQL_aaooqr.png)\\n\\n## Reusable Resolvers\\n\\nThe idea of an API Generator is to make creating a standardized API easy. Many parts of creating an API can be automated, including the creation of resolvers. \\n\\nThe core of an API revolves around CRUD operations (Create, Read, Update, Delete) which can easily be automated considering there are really not many variations to consider.\\n\\nThe Devoyage\'s `subgraph` project (The API Generator) has the goal of automating a variety of these operations for each defined entity. \\n\\n- Find One/Many\\n- Create One/Many\\n- Delete One/Many\\n- Update One/Many\\n\\nThis means there will be a total of 8 reusable resolvers created for each defined entity as this project proceeds.\\n\\n## The New Resolver\\n\\nVersion `v0.0.3` takes a step at closing the gap to including all 8 of these automated resolvers by including the `Find Many` resolver. Let\'s take a look!\\n\\n### Define The Entity (or Entities)\\n\\nFirst define the entity in the config file. Remember the motto - \\"Define to Run\\".\\n\\n```toml\\n[service]\\nservice_name = \\"pets\\"\\n\\n[service.database_config]\\nmongo_uri = \\"mongodb://user:pass@127.0.0.1:27017/db\\"\\nmongo_db = \\"myDb\\"\\n\\n[[service.entities]]\\nname = \\"Dog\\"\\n\\n[service.entities.database_config]\\nmongo_collection = \\"dogs\\"\\n\\n[[service.entities.fields]]\\nname = \\"_id\\"\\nscalar = \\"ObjectID\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"name\\"\\nscalar = \\"String\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"weight\\"\\nscalar = \\"Int\\"\\nrequired = false\\n```\\n\\n### Run The service\\n\\nStep 1 is easy. Step 2 is even easier. Start the service.\\n\\n```bash\\nsubgraph --config ./config.toml --port 5011\\n```\\n\\n### The Find Many Resolver\\n\\nCheck out the schema, the find many resolver is now included as a choice for querying your new API.\\n\\n```graphql\\ntype Query {\\n  get_dogs(get_dogs_input: get_dogs_input!): [Dog!]!\\n  ...resolvers\\n}\\n```\\n\\n---\\n\\nIt\'s a small step toward the goal and I am glad you are here to follow along. If you\'re interested in checking out the code or trying out this proof of concept, check out the [Subgraph Project](https://www.github.com/the-devoyage/subgraph) on GitHub!"}]}')}}]);