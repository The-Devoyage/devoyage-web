"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"subgraph-v0.0.13-instant-api-at-your-fingertips","metadata":{"permalink":"/blog/subgraph-v0.0.13-instant-api-at-your-fingertips","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.13/index.md","source":"@site/blog/subgraph-v0.0.13/index.md","title":"Subgraph v0.0.13 - Instant API Generation At Your Fingertips with Subgraph","description":"Creating a flexible and standardized API is now easier than ever with Subgraph\'s new features such as built-in auth with webauthn and customizable data filtering.","date":"2023-12-29T00:00:00.000Z","formattedDate":"December 29, 2023","tags":[{"label":"subgraph","permalink":"/blog/tags/subgraph"}],"readingTime":7.665,"hasTruncateMarker":true,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"title":"Subgraph v0.0.13 - Instant API Generation At Your Fingertips with Subgraph","slug":"subgraph-v0.0.13-instant-api-at-your-fingertips","authors":["nick"],"tags":["subgraph"],"date":"2023-12-29T00:00:00.000Z","description":"Creating a flexible and standardized API is now easier than ever with Subgraph\'s new features such as built-in auth with webauthn and customizable data filtering.","image":"https://res.cloudinary.com/the-devoyage/image/upload/v1687224196/Subgraph_1_swkuzy.png","keywords":["graphql","subgraph","api","api generator"]},"nextItem":{"title":"Subgraph v0.0.9 - Instant GraphQL API - Joined Types and Guards","permalink":"/blog/subgraph-v0.0.9-joins-and-guards"}},"content":"import {LicenseAlert} from \'@site/src/components/common/docs\';\\n\\nWelcome Voyager.\\n\\nEmbark on an epic journey as I unveil an exciting chapter in the realm of **Automated API Generation** using Subgraph!\\n\\nThis iteration, `v0.0.13`, not only marks a significant milestone but also welcome a wave of powerful new options that promise to redefine the way you craft APIs.\\n\\nPicture this \u2013 the ability to spin up robust yet flexible APIs in only a few moments, freeing you to channel your focus where it truly matters: your business logic. With Subgraph at your helm, bid\\nfarewell to the intricacies of code logic and immerse yourself in the artistry of your unique digital ventures.\\n\\nToday, the horizon expands, and you, fellow Voyager, are here to see it happen. Ready to dive into the extraordinary? Let\'s set sail!\\n\\n<LicenseAlert product=\\"subgraph\\" to=\\"https://thedevoyage.gumroad.com/l/subgraph\\" btnTxt=\\"Early Alpha Release\\" />\\n\\n![sailboat gif](https://media.giphy.com/media/hWSXtvw9P3aAov0UX3/giphy.gif)\\n\\n\x3c!--truncate--\x3e\\n\\n## Generate Your Next API\\n\\nWhether connecting to your existing database or embarking on a new project, Subgraph empowers you to turn ideas into fully functional applications within minutes. The key? A straightforward configuration file that makes management a breeze.\\n\\nWith Subgraph, you can seamlessly bring your concepts to life without the hassle of complex coding. Whether you\'re accustomed to working with your established databases or starting from scratch, Subgraph streamlines the process, ensuring that your focus remains on the essence of your project, not the intricacies of development.\\n\\nThis user-friendly approach eliminates the need for lengthy development cycles, letting you see results quickly and effortlessly. Subgraph is the tool that simplifies the journey from idea to application, offering a stress-free and efficient way to materialize your vision.\\n\\nLarge applications or small POCs, it all starts with a configuration file that focuses on the data you want to distribute.\\n\\n![subgraph config](https://res.cloudinary.com/the-devoyage/image/upload/v1703825219/carbon_2_pfrg4u.png)\\n\\n### Simplifying Data Management with Subgraph\\n\\nAt the heart of Subgraph lies a fundamental goal: to streamline the process of data management. Imagine effortlessly managing your data with a tool that revolves around simplicity. Subgraph achieves this by utilizing your provided configuration to establish consistent and user-friendly methods for interacting with data.\\n\\nIn the realm of API development, standardization is key. Subgraph empowers you to deliver a highly standardized API to your developers and customers, easing the burden of interfacing with your data. The result? A seamless and efficient experience for all stakeholders involved.\\n\\nWith Subgraph\'s generated actions, you can interact with your data in a way that aligns with the needs of almost any project:\\n\\n- Find One: Locate a single entity effortlessly.\\n- Find Many: Retrieve multiple entities with ease.\\n- Update One: Modify a single entity conveniently.\\n- Update Many: Streamline the process of updating multiple entities.\\n- Create One: Effortlessly add a new data/entities to your system.\\n\\nSubgraph empowers developers and startup owners by providing a toolkit that not only simplifies but enhances data management. Say goodbye to convoluted processes and hello to a standardized, efficient, and user-friendly approach to handling your data.\\n\\n### Diverse Data Sources Made Simple\\n\\nSubgraph thrives on versatility, making it a breeze to incorporate a variety of familiar data sources into your toolkit. With support for various databases and protocols, you have the flexibility to leverage the tools you know and trust.\\n\\n**Supported Data Sources:**\\n\\n- Mongo: Seamlessly integrate and interact with MongoDB databases.\\n- MySQL: Harness the power of MySQL databases for robust data handling.\\n- Postgres: Benefit from the reliability and scalability of PostgreSQL databases.\\n- SQLite: Enjoy a lightweight yet powerful option for local data storage.\\n- HTTP/Restful: Extend your reach beyond traditional databases with seamless integration of HTTP/Restful APIs.\\n\\nWhether you\'re rooted in the familiarity of relational databases or exploring the possibilities of HTTP/Restful APIs, Subgraph accommodates your preferences. This flexibility ensures that your data management remains efficient, regardless of the sources you rely on. Subgraph empowers developers and startup owners to work with the tools that suit their needs best, fostering a seamless and adaptable data integration experience. Elevate your data management capabilities with Subgraph\u2014where versatility meets simplicity.\\n\\n![many data sources](https://res.cloudinary.com/the-devoyage/image/upload/v1703955372/big-data-7216839_1280_ej08cb.png)\\n\\n### Enhanced Entity Associations with Subgraph\\n\\nUnlock a new dimension of efficiency with Subgraph\'s powerful entity association capabilities. Subgraph empowers you to seamlessly link the entities within a service, paving the way for resolving associated entities in a single network request or GraphQL query. Say goodbye to multiple requests and embrace a streamlined, all-encompassing approach to entity resolution.\\n\\n**Key Features:**\\n\\n- Effortless Association: With Subgraph, associating entities is a breeze. Connect related entities swiftly and intuitively from within the configuration file, enhancing the coherence of your data structure.\\n- Single Network Request/GraphQL Query: Witness the magic of resolving associated entities with a single network request or GraphQL query. Subgraph optimizes the process, minimizing latency and maximizing efficiency.\\n- Cross-Data Source Association: Subgraph breaks down silos by enabling instant associations across different data sources. Seamlessly integrate entities from diverse origins, creating a unified and comprehensive view of your data.\\n\\nEmbrace a future where entity associations are not just a feature but a catalyst for enhanced performance. Subgraph empowers developers and startup owners to elevate their data resolution capabilities, fostering a more connected and\\nresponsive system.\\n\\n### Tailored Data Retrieval with Subgraph APIs\\n\\nIn the world of Subgraph, querying APIs isn\'t just about extracting data\u2014it\'s about sculpting the precise dataset your UI demands. Subgraph introduces a versatile filtering API, a standard feature for every generated resolver. This empowers users to effortlessly combine custom filters using nested and/or clauses, providing a tailored approach to data retrieval.\\n\\n**Key Benefits:**\\n\\n- User-Centric Querying: Subgraph acknowledges that every UI is unique. Its querying capabilities enable users to fetch precisely the data needed to support their specific UI requirements, promoting a seamless and tailored user experience.\\n- Flexible Filtering: The filtering API in Subgraph is a game-changer. Users can flexibly combine an array of custom filters, utilizing nested and/or clauses to refine data retrieval. This flexibility ensures that users can adapt their queries to the evolving needs of their projects.\\n\\nIn addition to its robust querying capabilities, Subgraph introduces eager loading for database focused data sources. This feature enables filtering based on the properties of associated entities, offering an advanced dimension to data retrieval.\\n\\nSubgraph isn\'t just about querying; it\'s about empowering users to curate data experiences that align precisely with their application needs.\\n\\n### Effortless Security with Subgraph\\n\\nIn the realm of Subgraph, security isn\'t a complex ordeal\u2014it\'s a few lines in your config file. Subgraph brings simplicity to the forefront with its seamless authorization and authentication capabilities. Define a concise set of lines in the config file, and Subgraph empowers you with authentication services, leveraging the robustness of web authentication (WebAuthn).\\n\\n**Key Features:**\\n\\n- Configurable Authorization: Subgraph simplifies the process of configuring authorization with just a few lines in your config file. Define your rules effortlessly, ensuring that your API is secure and accessible only to those with the proper permissions.\\n- Authentication with WebAuthn: Subgraph goes beyond traditional authentication methods by seamlessly integrating with WebAuthn. Elevate your security measures with the robust authentication capabilities offered by the web authentication standard.\\n- No Passwords and Higher Security - WebAuthn eliminates the need for passwords, providing a user-friendly interface while enhancing backend security through advanced cryptographic and biometric authentication methods.\\n\\nSubgraph\'s commitment to simplicity extends to its security features, ensuring that even the process of authentication and authorization aligns with the tool\'s user-friendly ethos.\\n\\n### New Documentation\\n\\nWe are thrilled to unveil the new documentation website for Subgraph, offering users a seamless and intuitive experience in navigating the wealth of information about our API deployment tool.\\n\\n- [Subgraph Docs](/subgraph/intro) - Start from the top, and learn about subgraph.\\n- [Quick Start](/subgraph/quickstart) - Jump in with a 5 minute quickstart to a brand new API.\\n\\nThis user-friendly platform is designed to provide comprehensive guidance on configuring, running, and inspecting APIs with Subgraph. With a clean and organized layout, users can easily\\nexplore the documentation, access quick-start guides, and delve into detailed explanations of Subgraph\'s features. The new doc website is a testament to our commitment to user accessibility\\nand support, ensuring that both beginners and experienced developers can harness the full potential of Subgraph effortlessly. Explore the documentation now and embark on a journey to streamline your API development process.\\n\\n## Create a Graph For Free\\n\\nIt\'s free to try. No Credit Card Needed.\\n\\n<LicenseAlert product=\\"subgraph\\" to=\\"https://thedevoyage.gumroad.com/l/subgraph\\" btnTxt=\\"Early Alpha Release\\" />\\n\\nSubgraph v0.0.13 represents a monumental leap forward in the realm of Automated API Generation. With a host of powerful new features, this release empowers users to effortlessly create robust APIs in mere moments, redirecting their\\nfocus towards core business logic.\\n\\nThe journey begins with a simple configuration file, making API management a breeze. Subgraph\'s commitment to simplicity extends across diverse aspects, from streamlined data management, versatile\\ndata source integration, and enhanced entity associations to tailored data retrieval with robust filtering APIs.\\n\\nSecurity is seamlessly woven into Subgraph\'s fabric, leveraging WebAuthn for authentication without passwords, prioritizing user-friendly interfaces while fortifying backend security.\\n\\nThe unveiling of the new documentation website further cements Subgraph\'s dedication to user accessibility, providing a comprehensive resource for both novice and seasoned developers.\\n\\nEmbark on this transformative journey with Subgraph, where ease meets innovation, and redefine your approach to API development."},{"id":"subgraph-v0.0.9-joins-and-guards","metadata":{"permalink":"/blog/subgraph-v0.0.9-joins-and-guards","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.9/index.md","source":"@site/blog/subgraph-v0.0.9/index.md","title":"Subgraph v0.0.9 - Instant GraphQL API - Joined Types and Guards","description":"Joining types and guards now available for Subgraph, an instant dynamic API.","date":"2023-06-18T00:00:00.000Z","formattedDate":"June 18, 2023","tags":[{"label":"subgraph","permalink":"/blog/tags/subgraph"}],"readingTime":5.645,"hasTruncateMarker":true,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"title":"Subgraph v0.0.9 - Instant GraphQL API - Joined Types and Guards","slug":"subgraph-v0.0.9-joins-and-guards","authors":["nick"],"tags":["subgraph"],"date":"2023-06-18T00:00:00.000Z","description":"Joining types and guards now available for Subgraph, an instant dynamic API.","image":"https://res.cloudinary.com/the-devoyage/image/upload/v1687224196/Subgraph_1_swkuzy.png","keywords":["graphql","subgraph","api","api generator"]},"prevItem":{"title":"Subgraph v0.0.13 - Instant API Generation At Your Fingertips with Subgraph","permalink":"/blog/subgraph-v0.0.13-instant-api-at-your-fingertips"},"nextItem":{"title":"Three Fancy Bash Directory Jumpers to \\"Avoid The Path\\"","permalink":"/blog/fancy-bash-directory-jumpers"}},"content":"import {BlogFooter} from \'@site/src/components/common/blog-footer\'\\nimport {LicenseAlert} from \'@site/src/components/common/docs\';\\n\\nHello All! Thanks for Joining!\\n\\nToday, I am super excited to share the most recent update for Subgraph, an application written in Rust that creates an Instant GraphQL API.\\n\\nHere is the low down: Provide a simple configuration, spin it up, and send those network requests. Your API is running in minutes not\\nmonths saving you time and money.\\n\\nThis dynamic application gets fed a configuration file to describe your data in order to instantly spin up a usable GraphQL Server. Version `v0.0.9`\\ntakes a few huge steps to make your API even more powerful with Joins and Guards.\\n\\nLet\'s take a look at the new features and write a quick API in order to demonstrate how Subgraph can benefit your next project.\\n\\n![Subgraph SQL](https://res.cloudinary.com/the-devoyage/image/upload/v1687224196/Subgraph_1_swkuzy.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## Guards, Joins, and the New Stuff\\n\\nVersion v0.0.9 introduces a diverse range of new capabilities, improvements, and fixes. Among these are two exciting features called Guards and Joins, designed\\nto empower you in building a robust API for any upcoming project.\\n\\n### Guards (alpha release)\\n\\nProtecting your API is a must and Subgraph aims to make it easy to guard your data from a variety of prospectives. The first version of\\nguards allows you to block access at four different points in the life cycle of a request by writing simple boolean evaluations. No complex\\nlogic, framework, or code needed.\\n\\n1. Service Guards - Stop access to the entire server.\\n2. Resolver Guards - Prevent access on a per operation basis.\\n3. Entity Guards - Protect specific entities of your service.\\n4. Field Guards - Scope access down to a field of an entity.\\n\\nAs mentioned above, guards are boolean evaluations that are simple to write. Evaluate a truthy condition and the access to the server is blocked with\\ncustom error messages. Let\'s take a look at defining a service with a simple guard.\\n\\n```toml\\n[service]\\nservice_name = \\"coffee_shops\\"\\n\\n[[service.guards]]\\nname = \\"role\\"\\nif_expr = \\"headers(\\\\\\"role\\\\\\") != \\\\\\"Admin\\\\\\"\\" # When true, we block access to the entire server.\\nthen_msg = \\"Invalid Role - You may not request from this service.\\"\\n```\\n\\nAs you can see above with the `headers()` function, there are built-in methods to access datapoints that are useful for validating access. Currently,\\nyou can access `header` values as well as `input` (the GraphQL input itself) values. The guards feature is an alpha release with plans to\\ninclude other built-in methods such as `entity` values! Keep tuned as these are developed and rolled out.\\n\\n### Joins\\n\\nMaybe one of the more exciting features for `v0.0.9`, joins allow you to connect entities together quickly and easily bringing the power of GraphQL\\ninto the simplicity of the Subgraph config.\\n\\nFirst, define a few entities in the config file. Our comment entity below will have a property called `created_by` which will\\njoin to a user type.\\n\\n```toml\\n[service]\\nservice_name = \\"my_subgraph\\"\\n\\n[[service.entities]]\\nname = \\"User\\"\\nfields = [\\n  { name = \\"_id\\", scalar = \\"ObjectID\\", required = true },\\n  { name = \\"name\\", scalar = \\"String\\", required = true },\\n]\\n\\n[[service.entities]]\\nname = \\"Comment\\"\\nfields = [\\n  { name = \\"_id\\", scalar = \\"ObjectID\\", required = true },\\n  { name = \\"content\\", scalar = \\"String\\", required = true },\\n  { name = \\"created_by\\", scalar = \\"ObjectID\\", required = true }\\n]\\n```\\n\\nNow we just need to tell Subgraph to join the `created_by` field of the `Comment` to the `User`. Simply update the field definition and Subgraph\\nhandles the rest.\\n\\n```toml\\n{ name = \\"created_by\\", scalar = \\"ObjectID\\", required = true, as_type = \\"User\\", join_on = \\"_id\\" }\\n```\\n\\nSend the network request and you now are able to instantly grab the `User` that created each comment.\\n\\nExample Response:\\n\\n```json\\n{\\n  \\"_id\\": \\"54321\\",\\n  \\"content\\": \\"Joining data is simple!\\",\\n  \\"created_by\\": {\\n    \\"_id\\": \\"12345\\",\\n    \\"name\\": \\"Bongo\\"\\n  }\\n}\\n```\\n\\nJoins can be applied to any entity in a Subgraph from any data source. This means you can join SqLite to Mongo or Postgres to an\\nexternal HTTP API. Associating entities simple and easy without the headache is the idea!\\n\\n## Spin It Up\\n\\nBelieve it or not, the above configuration is just about complete.\\n\\nSubgraph only needs to know two things at minimum\\nincluding where your data lives and what your data looks like. The entities above describe what the data looks like, so let\'s add\\nthe configuration to inform Subgraph of where your data lives.\\n\\n### The Data Source\\n\\nSubgraph supports five different data sources, meaning you can pull in data from five different types of data interfaces. It supports MongoDB, MySQL,\\nPostgres, SQLite, and HTTP Data sources (external third party APIs). Today we will use a Mongo Database.\\n\\nAdd the Data Source to the configuration and Subgraph will automatically connect each entity to the first available configuration. Of course,\\nif you have multiple data sources, you can associate each entity with the appropriate data source.\\n\\n```toml\\n[[service.data_sources]]\\n[service.data_sources.Mongo]\\nname = \\"my_data_source\\"\\nuri = \\"mongodb://user:password@127.0.0.1:27017/db_name\\"\\ndb = \\"db_name\\"\\n```\\n\\n### Start the API\\n\\nOnce added, run the command to start your API. To view the Sandbox, use your browser to navigate to the port that you used to start the service.\\n\\n```bash\\nsubgraph -c ./my_config.toml -p 5000\\n```\\n\\nSandbox would be available at `http://localhost:5000` in the browser.\\n\\nFeel free to define the port in your config file to save time!\\n\\n```toml\\n[service]\\nservice_name = \\"my_subgraph\\"\\nport = 5000\\n```\\n\\n### Example Configurations\\n\\nLike many Rust projects out there, Subgraph provides a folder of example configurations that you can use as reference to write your own!\\n\\nCheck out these [Example Configurations](https://github.com/The-Devoyage/subgraph/tree/master/examples). The configuration file is currently required\\nto be written in TOML or Tom\'s Obvious Minimal Language. Feel free to reference the [TOML Documentation](https://toml.io/en/) if needed.\\n\\n## Wrapping Up - What\'s Next?\\n\\nThanks for taking a moment to check out the new features! If you are interested in spinning up your own Subgraph using the `@the-devoyage/subgraph`\\nproject, take a look at the documentation found in the [Repository](https://www.github.com/the-devoyage/subgraph). If you find this project\\nintriguing, consider starring the repository to express your support.\\n\\nThe next version is already under way with an extremely important update -- Integration Testing will allow us to increase quality and consistency between releases\\nallowing you to depend Subgraph on the next level. Up on deck includes delete resolvers and improvements to guards/authorization/authentication!\\n\\nLastly, if you are interested in the project, we have officially launched a support option on Gumroad! This provides an excellent opportunity for you to contribute\\nto the progression towards Version 1. We offer various levels of support, ranging from quick and easy donations to full-fledged feature requests.\\n\\n<LicenseAlert product=\\"subgraph\\" to=\\"https://thedevoyage.gumroad.com/l/subgraph\\" btnTxt=\\"Support on Gumroad\\" />\\n\\nAgain -- Thanks for taking a few minutes to check out the new features and following along!"},{"id":"fancy-bash-directory-jumpers","metadata":{"permalink":"/blog/fancy-bash-directory-jumpers","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/quick-bash-directory-jumper/index.md","source":"@site/blog/quick-bash-directory-jumper/index.md","title":"Three Fancy Bash Directory Jumpers to \\"Avoid The Path\\"","description":"Avoid typing the path when changing directories in the terminal. These directory jumpers can help you quickly and easily change directories and are just fun to customize.","date":"2023-05-12T00:00:00.000Z","formattedDate":"May 12, 2023","tags":[{"label":"bash","permalink":"/blog/tags/bash"},{"label":"directory jumper","permalink":"/blog/tags/directory-jumper"},{"label":"cd","permalink":"/blog/tags/cd"},{"label":"change directory","permalink":"/blog/tags/change-directory"}],"readingTime":5.48,"hasTruncateMarker":true,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"title":"Three Fancy Bash Directory Jumpers to \\"Avoid The Path\\"","slug":"fancy-bash-directory-jumpers","authors":["nick"],"tags":["bash","directory jumper","cd","change directory"],"date":"2023-05-12T00:00:00.000Z","description":"Avoid typing the path when changing directories in the terminal. These directory jumpers can help you quickly and easily change directories and are just fun to customize.","keywords":["bash","directory jumper","bash alias","cd command","change directory linux"],"image":"https://res.cloudinary.com/the-devoyage/image/upload/v1684014246/cd_DesktopDevelopmentOrganizationProject_3_x1ozor.png"},"prevItem":{"title":"Subgraph v0.0.9 - Instant GraphQL API - Joined Types and Guards","permalink":"/blog/subgraph-v0.0.9-joins-and-guards"},"nextItem":{"title":"Subgraph v0.0.8 - Instant SQL API with Subgraph","permalink":"/blog/subgraph-v0.0.8-instant-sql-api"}},"content":"import {BlogFooter} from \'@site/src/components/common/blog-footer\'\\n\\nHello All, Thanks for Joining!\\n\\nToday, I\'d love to share a quick little bash script that helps you change directories quickly and easily. We will be trying our hardest to \\"Avoid The Path\\", meaning we won\'t be typing out lengthy paths when changing directories.\\n\\nAs developers, we are constantly jumping into and out of directories, spinning up environments in different locations, or even to grabbing a quick reference from another project. Doing such tasks from the command line usually provides power that a GUI just might not have, making it worth the effort to stay in the terminal.\\n\\nSo, let\'s take a look at some fancy ways to \\"avoid the path\\"!\\n\\n![Avoid The Path](https://res.cloudinary.com/the-devoyage/image/upload/v1684007203/cd_DesktopDevelopmentOrganizationProject_1_ao2lhc.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## Three Levels of Fancy Bash Directory Jumpers\\n\\n### The Least Fancy\\n\\nFor the longest of time I was happy with the simplest solution, a quick bash alias. The number of projects on my computer were few in numbers, so this solution made a ton of sense.\\n\\nSetting an alias is quick and easy. Simply add the alias to your bash profile, which is a file in the home directory of your computer. This file name might differ depending on your shell and configuration. That being said, some of the most common names for these settings files are `.bashrc`, `.bash_profile`, or even `.bash_aliases`.\\n\\n```\\n# .bashrc\\n# Typing \\"DEV\\" into the command line will now change directories\\n# to a specified path.\\n\\nalias DEV=`cd ~/Desktop/DEV`\\n```\\n\\nYou\'ll need to source the file that was changed, which will tell the shell that something new is available. You can do this by restarting the terminal or simply running `source .bashrc`, inserting the appropriate file name. Once sourced, your new alias will be ready to use.\\n\\n```\\nnickisyourfan@system76:~$ DEV\\nnickisyourfan@system76:~/Desktop/DEV$\\n```\\n\\nIn the terminal, you can now use your alias from any directory to jump back to your development directory.\\n\\nAvoid The Path - Win!\\n\\n### A Little Fancy\\n\\nAs time passes, you\'ll accumulate numerous projects in your development directory. It\'s the nature of the beast. And, as a developer you\'ll eventually find yourself sitting on the couch late at night trying to avoid doing the work you need to do in favor of writing a new function to help you improve your existing and perfectly fine way of jumping between directories.\\n\\nWe can convert our alias into a function that is callalble from the command line. It\'s extreemly easy and can even take in arguments!\\n\\nOur function below will be called just like the bash alias above, simply type the given name, in our case `DEV`. This time it\'s going to take an optional second word/argument, which is the name of the folder of where you are changing to. For example, `DEV my-project`.\\n\\n```bash\\n# .bashrc\\n\\nfunction DEV() {\\n  # If argument is not provided, go to the dev directory.\\n  # Else go to the nested directory.\\n  if [ -z \\"$1\\" ]; then\\n    cd ~/Desktop/DEV\\n  else\\n    cd ~/Desktop/DEV/$1\\n  fi\\n}\\n```\\n\\nNow we can jump into any project from any location by typing two words.\\n\\nSource the file, then use the command and let\'s try it out.\\n\\n```\\nnickisyourfan@system76:~$ DEV my-project\\nnickisyourfan@system76:~/Desktop/DEV/my-project$\\n```\\n\\nAvoid the Path -- Win!\\n\\n### A Bit Fancier\\n\\nI know what you are thinking... We can do better!\\n\\nI hope you are not in the middle of something important, because here is where procrastination becomes really hard to resist.\\n\\nOur current script makes it easy to jump into our development directory and even somewhat into nested directories one level deep. If you are like me, some projects get organized into the nested folders, meaning that my projects directory is now several levels deep. The previous script just is not cut out to handle my directories structured like this.\\n\\nLet\'s use some common functions to support finding of nested directories. This time, we take a more dynamic approach.\\n\\n```bash\\nfunction DEV() {\\n  # Set your variables such as the directory to search and how many levels deep to search.\\n  local directory=~/Desktop/DEV\\n  local levels_deep=4\\n\\n  # If no args provided, cd into the directory.\\n  if [ -z \\"$1\\" ]; then\\n    cd $directory\\n    return\\n  fi\\n\\n  # Find all the directories that match the name provided in the argument.\\n  directories=($(find $directory -maxdepth $levels_deep -type d -name $1))\\n\\n  # If only one result, cd into that directory.\\n  # Else ask the user which directory they really want to go to.\\n  if [ ${#directories[@]} -eq 1 ]; then\\n    cd ${directories[0]}\\n  elif [ ${#directories[@]} -gt 1 ]; then\\n    echo \\"Which directory do you want to go to?\\"\\n    for i in ${!directories[@]}; do\\n      echo \\"$i. ${directories[$i]}\\"\\n    done\\n    read -p \\"Enter a number: \\" choice\\n    cd ${directories[$choice]}\\n  else\\n    echo \\"Directory does not exist\\"\\n  fi\\n}\\n```\\n\\nNow we can jump to any directory... from anywhere... with ease!\\n\\nSource the file and run the command just like before.\\n\\n```\\nnickisyourfan@system76:~$ DEV my-project\\n```\\n\\nNotice, I have two folders called `my-project`. It will ask me which one I want to change into before changing the directory for me.\\n\\n```\\nWhich directory do you want to go to?\\n0. /home/nickisyourfan/Desktop/DEV/@the-devoyage/my-project\\n1. /home/nickisyourfan/Desktop/DEV/my-project\\nEnter a number: 0\\nnickisyourfan@system76:~/Desktop/DEV/@the-devoyage/my-project$\\n```\\n\\nAvoid the Path - Win!\\n\\n### The Most Fancy\\n\\nTo top off the script we are going to add an additional function that enable some super sweet auto complete.\\n\\nImagine... the name of the project you want to cd into is on the tip of your tongue but you just can\'t remember it\'s name. Instead of using the old trusty `ls` command and reading the dozens of incomplete projects, we can enable some tab completion to help us remember the name of the project/directory we are looking for.\\n\\nStart by typing in the command, then press tab to get some suggestions.\\n\\n```\\nnickisyourfan@system76:~/Desktop/DEV/@the-devoyage/subgraph$ DEV my-proj\\nmy-project                         my-project-1                    my-project-2\\n```\\n\\nAuto complete is as simple as adding one more function to your bash profile.\\n\\n```bash\\nfunction _dev_completion() {\\n  local cur=${COMP_WORDS[COMP_CWORD]}\\n  local directory=~/Desktop/DEV\\n  local levels_deep=4\\n  local subdirs=$(find \\"$directory\\" -maxdepth \\"$levels_deep\\" -type d -printf \'%f\\\\n\')\\n  local options=$(echo \\"$subdirs\\" | grep \\"^$cur\\")\\n\\n  COMPREPLY=( $(compgen -W \\"$options\\" -- \\"$cur\\") )\\n  return 0\\n}\\n```\\n\\nFollowing the previous DEV function, call the newly added function.\\n\\n```bash\\nfunction DEV() {\\n  # Logic to find and switch folders.\\n}\\ncomplete -F _dev_completion DEV\\n```\\n\\n## A Great Friday Night\\n\\nThanks for joining me to procrastinate my Friday night away. It\'s been a fun time expanding and sharing this little directory jumper. It\'s far from perfect but it is easy to configure and gets the job done. Let me know what you\'d add to up the fancy.\\n\\n<BlogFooter />"},{"id":"subgraph-v0.0.8-instant-sql-api","metadata":{"permalink":"/blog/subgraph-v0.0.8-instant-sql-api","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.8/index.md","source":"@site/blog/subgraph-v0.0.8/index.md","title":"Subgraph v0.0.8 - Instant SQL API with Subgraph","description":"Create a nearly instant API for your SQL Database with Subgraph v0.0.8.","date":"2023-05-01T00:00:00.000Z","formattedDate":"May 1, 2023","tags":[{"label":"subgraph","permalink":"/blog/tags/subgraph"}],"readingTime":5.615,"hasTruncateMarker":true,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"title":"Subgraph v0.0.8 - Instant SQL API with Subgraph","slug":"subgraph-v0.0.8-instant-sql-api","authors":["nick"],"tags":["subgraph"],"date":"2023-05-01T00:00:00.000Z","description":"Create a nearly instant API for your SQL Database with Subgraph v0.0.8.","image":"https://res.cloudinary.com/the-devoyage/image/upload/v1683081810/Subgraph_SQL_kteswo.png","keywords":["graphql","subgraph","api","api generator"]},"prevItem":{"title":"Three Fancy Bash Directory Jumpers to \\"Avoid The Path\\"","permalink":"/blog/fancy-bash-directory-jumpers"},"nextItem":{"title":"Subgraph v0.0.7 - Instant Chat GPT GraphQL API","permalink":"/blog/subgraph-v0.0.7-http-with-chat-gpt"}},"content":"import {BlogFooter} from \'@site/src/components/common/blog-footer\'\\n\\nHello All, Thanks for Joining!\\n\\nToday we are creating instant APIs around SQL Databases of various dialects with Subgraph, a proof\\nof concept tool that is made to assist speedy API development.\\n\\nAll it takes to use subgraph is a config file that informs the service where your data is and what your data looks like. Define the\\nconfig and start the API to create an instant API around your database.\\n\\nWith the latest release, v0.0.8, we are taking a look at the newly added support for a few dialects of SQL. In addition to\\nMongo and HTTP Data Sources, Subgraph now supports Postgres, MySQL, and SqLite. Let\'s take a minute and spin up a new\\nAPI from scratch!\\n\\n![Subgraph SQL](https://res.cloudinary.com/the-devoyage/image/upload/v1683081810/Subgraph_SQL_kteswo.png)\\n\\nCheck out the [repo](https://www.github.com/the-devoyage/subgrpah)!\\n\\n\x3c!--truncate--\x3e\\n\\n## Build a Quick API for your SQL Database\\n\\nThe goal with subgraph is pretty simple - Shorten the time it takes to plan, develop, and deploy an API. With subgraph,\\nwe do not need to write routes, controllers, or resolvers from scratch. We do not need to deal with boiler plate, database\\nconnections, or even validation.\\n\\nAll we need to do is tell the Subgraph service where our data is and what it looks like. Subgraph takes care of the rest by\\nconnecting to the database and creating the routes/resolvers. With this, you now can spend your time on the parts of\\nyour business that might make a larger impact for your clients and sales.\\n\\nLet\'s see an example!\\n\\n### 1. Create the Database\\n\\nYou own the database. You get to choose what type of database is best suited for your project. As mentioned above,\\nSubgraph supports Mongo, Postgres, MySQL, and SqLite databases, making it easy for you to connect to your data.\\n\\nIn this example we will create a SqLite DB and use Subgraph to generate an API around a few tables. Keep in mind, that connecting Subgraph\\nto MySQL, Postgres, or even Mongo, is a very similar process.\\n\\nFirst, make sure you have SqLite installed on your system. The following guide is going to assume you are on a Linux machine.\\n\\n```bash\\nsudo apt install sqlite3\\n```\\n\\nCreating a SqLite Database is as easy as creating a file in a folder. Let\'s create a database around Coffees!\\n\\n```\\ntouch caffeine.db\\n```\\n\\nNow, let\'s create a couple tables.\\n\\n```sql\\nCREATE TABLE coffee (\\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\\n  name TEXT NOT NULL,\\n  price INTEGER NOT NULL,\\n  available BOOLEAN NOT NULL\\n);\\n\\nCREATE TABLE espresso (\\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\\n  name TEXT NOT NULL,\\n  price INTEGER NOT NULL,\\n  available BOOLEAN NOT NULL\\n);\\n```\\n\\nThis is all we will need to do to get started. We can now move on to Subgraph specific setup.\\n\\n### 2. Write the Subgraph Config\\n\\nThe config is all about your data. It tells Subgraph where to find your data and what it looks like. Writing the config file is\\neasy, as it uses [TOML or Tom\'s Obvious Minimal Language](https://toml.io/en/).\\n\\nLet\'s start by telling Subgraph where the data is. To do this, add a `Data Source` to the configuration. You can add\\nmultiple data sources, mix and match data sources, or just keep it basic with a single data source.\\n\\n```toml\\n[service]\\nservice_name = \\"espresso\\"\\n\\n[[service.data_sources]]\\n[service.data_sources.SQL]\\nname = \\"caffeine_data_source\\" # Name the data source for reference later.\\nuri = \\"sqlite:/home/nickisyourfan/Desktop/DEV/dbs/caffeine.db\\"\\ndialect = \\"SQLITE\\"\\n```\\n\\nNow that Subgraph knows where the data is, we can inform subgraph what our data looks like. Start by defining an entity for each table. An\\nEntity is a table in the database (collection for Mongo).\\n\\n```toml\\n[[service.entities]]\\nname = \\"Espresso\\"\\n```\\n\\nIn this case, the `Espresso` table has four columns. Let\'s tell Subgraph.\\n\\n```toml\\n[[service.entities.fields]]\\nname = \\"id\\"\\nscalar = \\"Int\\"\\nrequired = true\\nexclude_from_input = [\\"CreateOne\\", \\"UpdateOne\\", \\"UpdateMany\\"] # Don\'t allow uses to create or update the ID prop.\\n\\n[[service.entities.fields]]\\nname = \\"name\\"\\nscalar = \\"String\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"price\\"\\nscalar = \\"Int\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"available\\"\\nscalar = \\"Boolean\\"\\nrequired = true\\n```\\n\\nThat\'s it! Let\'s do the same for the coffee table and take a look at the finished config.\\n\\n```toml\\n# The Finished Configuration:\\n[service]\\nservice_name = \\"espresso\\"\\n\\n[[service.data_sources]]\\n[service.data_sources.SQL]\\nname = \\"caffeine_data_source\\"\\nuri = \\"sqlite:/home/nickisyourfan/Desktop/DEV/dbs/caffeine.db\\"\\ndialect = \\"SQLITE\\"\\n\\n[[service.entities]]\\nname = \\"Coffee\\"\\n[[service.entities.fields]]\\nname = \\"id\\"\\nscalar= \\"Int\\"\\nrequired = true\\nexclude_from_input = [\\"CreateOne\\", \\"UpdateOne\\", \\"UpdateMany\\"]\\n[[service.entities.fields]]\\nname = \\"name\\"\\nscalar = \\"String\\"\\nrequired = true\\n[[service.entities.fields]]\\nname = \\"price\\"\\nscalar = \\"Int\\"\\nrequired = true\\n[[service.entities.fields]]\\nname = \\"available\\"\\nscalar = \\"Boolean\\"\\nrequired = true\\n\\n[[service.entities]]\\nname = \\"Espresso\\"\\n[[service.entities.fields]]\\nname = \\"id\\"\\nscalar = \\"Int\\"\\nrequired = true\\nexclude_from_input = [\\"CreateOne\\", \\"UpdateOne\\", \\"UpdateMany\\"]\\n[[service.entities.fields]]\\nname = \\"name\\"\\nscalar = \\"String\\"\\nrequired = true\\n[[service.entities.fields]]\\nname = \\"price\\"\\nscalar = \\"Int\\"\\nrequired = true\\n[[service.entities.fields]]\\nname = \\"available\\"\\nscalar = \\"Boolean\\"\\nrequired = true\\n```\\n\\n### 3. Start the API\\n\\nIn the previous step, we defined a Subgraph Configuration that tells the service about the data. The hard part is done in\\nabout 50 lines of code. Now, let\'s start the service.\\n\\nFirst, make sure you downloaded the latest release (v0.0.8). The release is a binary, making it easy to run on a linux system.\\nJust make sure to give it execution permissions.\\n\\nCheckout the [releases](https://github.com/The-Devoyage/subgraph/releases) page on GitHub to download the binary.\\n\\n```bash\\nchmod +x subgraph\\n```\\n\\nThen, run subgraph and point it to your config file.\\n\\n```bash\\n./subgraph --config ./caffeine.toml --port 3030\\n```\\n\\nAnd that\'s it! Your new API is now running at the port specified. We can load up the playground and send some queries.\\n\\n### 4. Query the API\\n\\nLoad the playground at the specified port. The playground will let you construct and execute queries against your new API.\\n\\n```\\n# Navigate In Browser:\\nhttp://localhost:3030\\n```\\n\\nOnce loaded, drop in a mutation to insert a new espresso into the espresso table.\\n\\n```graphql\\nmutation createEspresso($input: create_espresso_input!) {\\n  create_espresso(create_espresso_input: $input) {\\n    id\\n    name\\n    price\\n    available\\n  }\\n}\\n\\n{\\n  \\"input\\": {\\n    \\"name\\": \\"Katz Coffee\\",\\n    \\"price\\": 15,\\n    \\"available\\": true\\n  }\\n}\\n```\\n\\nSubgraph creates resolvers for each entity, making it easy for you to query the database. Currently, Subgraph supports\\nFind One, Find Many, Update One, Update Many, and Create One resolvers. Delete operations coming soon!\\n\\n## Subgraph v0.0.8\\n\\nThanks for checking in on the progress. There is a lot of work to do in order to get to v1, a production ready environment!\\n\\nIf you are a curios rusteacean and want to jump in, please feel free to check out the [source code](https://www.github.com/the-devoyage/subgraph),\\nand share your ideas about the future of the project.\\n\\nUpcoming projects include Delete Operations, Authorization Support, Testing Integrations, Federation 2 Support, and Error Handling! Thanks\\nfor keeping tuned and following along.\\n\\n<BlogFooter />"},{"id":"subgraph-v0.0.7-http-with-chat-gpt","metadata":{"permalink":"/blog/subgraph-v0.0.7-http-with-chat-gpt","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.7/index.md","source":"@site/blog/subgraph-v0.0.7/index.md","title":"Subgraph v0.0.7 - Instant Chat GPT GraphQL API","description":"Hello all -- Thanks for joining!","date":"2023-04-14T00:00:00.000Z","formattedDate":"April 14, 2023","tags":[{"label":"subgraph","permalink":"/blog/tags/subgraph"}],"readingTime":4.15,"hasTruncateMarker":true,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"title":"Subgraph v0.0.7 - Instant Chat GPT GraphQL API","slug":"subgraph-v0.0.7-http-with-chat-gpt","authors":["nick"],"tags":["subgraph"],"date":"2023-04-14T00:00:00.000Z"},"prevItem":{"title":"Subgraph v0.0.8 - Instant SQL API with Subgraph","permalink":"/blog/subgraph-v0.0.8-instant-sql-api"},"nextItem":{"title":"Subgraph v0.0.5 - API vs. Car - Startups, What is an API and Why Generate?","permalink":"/blog/subgraph-v0.0.5-api-vs-car"}},"content":"import {BlogFooter} from \'@site/src/components/common/blog-footer\'\\n\\nHello all -- Thanks for joining!\\n\\nToday we are going to use the Chat GPT API to show off the newest release from the subgraph project, which is a tool built to help you start up a well rounded API in a matter of minutes.\\n\\nThe [@The-Devoyage/subgraph](https://www.github.com/the-devoyage/subgraph) project is a proof-of-concept implementation written in Rust for generating a dynamic API from a single\\nconfiguration/schema.\\nThe subgraph allows you to define entities, data sources, and resolvers in a single TOML configuration.\\n\\nThe configuration specifies how the API should be generated around the data you need, existing or not. Subgraph generates CRUD operations from the entities you define and allows you\\nto connect many data sources to a single API, including HTTP and MongoDB (SQL support coming in the future!). In this way, you can create an API in no time, which can be used to\\nmanipulate and find data, and even map third-party RESTful APIs to GraphQL automatically.\\n\\nLet\'s dive into the new HTTP Data Source configurations which will allow us to connect to almost any third party RESTful API, such as the Chat GPT API.\\n\\n![Subgraph](https://res.cloudinary.com/the-devoyage/image/upload/v1681523977/Subgraph_Logo_2_gff26m.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## v0.0.7 and the Chat GPT API\\n\\n### HTTP Data Source\\n\\nThe HTTP data source is a powerful feature in Subgraph that enables data retrieval from external APIs. With this data source, you can easily connect your Subgraph GraphQL server to any REST API and map the API endpoints to\\nyour GraphQL schema. This allows you to consolidate data from multiple sources into a single GraphQL endpoint. The HTTP data source provides various methods to retrieve data, such as GET, POST, PUT, PATCH, DELETE,\\nand allows for custom headers to be set. This feature simplifies the process of fetching data from external sources and reduces the amount of boilerplate code needed.\\n\\n```toml\\n[[service.data_sources]]\\n[service.data_sources.HTTP]\\nname = \\"chat_gpt\\"\\nurl = \\"https://api.openai.com/\\"\\ndefault_headers = [{ name = \\"Authorization\\", value = \\"Bearer $OPENAI_KEY\\" }]\\n```\\n\\n### Object Support\\n\\nIn Subgraph, Scalars are the primitive data types such as String, Int, and Boolean. However, there are situations where we need to represent more complex types or groupings of primitive Scalars. This is where Object types come into play.\\nAn Object \\"Scalar\\" is a custom type that can be defined in the configuration for the schema, representing a complex type that can be used as a type itself. For example, you might have an object scalar representing a comment, with\\nits creator, content, and any other desired attributes.\\n\\n```toml\\n[[service.entities.fields]]\\nname = \\"usage\\"\\nscalar = \\"Object\\"\\nexclude_from_input = [\\"CreateOne\\"]\\nrequired = true\\nfields = [\\n    { name = \\"prompt_tokens\\", scalar = \\"Int\\", required = true },\\n    { name = \\"completion_tokens\\", scalar = \\"Int\\", required = true },\\n    { name = \\"total_tokens\\", scalar = \\"Int\\", required = true },\\n]\\n```\\n\\n### List Options\\n\\nLists or Arrays are one of the most commonly used data types in programming languages. Similarly, in Subgraph, lists can be defined as an array of a certain data types. This allows for a collection of values\\nto be returned as a single response. Lists can be defined in the configuration file by marking the field as a list (as shown below). Lists can also be nested inside objects, allowing for more complex data structures to be\\nrepresented. Lists are useful when you need to return multiple instances of a certain data type, such as a list of products or a list of blog posts.\\n\\n```toml\\n[[service.entities.fields]]\\nname = \\"messages\\"\\nscalar = \\"Object\\"\\nrequired = true\\nlist = true\\nfields = [\\n  {name = \\"role\\", scalar = \\"String\\", required = true},\\n  {name = \\"content\\", scalar = \\"String\\", required = true}\\n]\\nexclude_from_output = true\\n```\\n\\n### New Features\\n\\n- HTTP Data Source - Easily map a HTTP API into this GraphQL API.\\n- Update One Resolver - Update Mongo documents or send HTTP Put/Patch Request\\n- Objects and Lists - Support for more complex data structures.\\n- Exclude From Input/Output - Allows fields to be shared or mapped exclusivly to resolvers input/output.\\n- Environment Variable Support - Use environment variables directly inside your config with the `$` suffix.\\n\\n## The Chat GPT Config\\n\\nLet\'s get down to the nitty gritty and hit the Chat GPT Completions endpoint with a Subgraph Service.\\n\\n1. Download the latest [release](https://www.github.com/the-devoyage/subgraph/releases) of subgraph.\\n2. Get an Open AI API Key and set it as an environment variable.\\n\\n```bash\\nEXPORT OPENAI_KEY=paste_key_here\\n```\\n\\n3. Download the [Chat GPT Service Config Example](https://github.com/The-Devoyage/subgraph/blob/2209c412f3f4fd0664a7963edba1d9830ec8e50c/examples/chat-gpt.toml)\\n\\n4. Start the API.\\n\\n```\\n./subgraph -c ./chat-gpt.toml -p 5012\\n```\\n\\n5. Check out the Sandbox and send some mutations!\\n\\nOpen browser and navigate to the port that the service was started on. `http://localhost:5012`\\n\\n![Sandbox](https://res.cloudinary.com/the-devoyage/image/upload/v1680991221/Screenshot_from_2023-04-08_17-00-02_xidwxl.png)\\n\\n## What\'s Next?\\n\\nThere is still a lot of work in order to get to v0.1.0 - Error handling, SQL Compatibility, Various Scalar Support, GraphQL Subscriptions... just to name a few.\\n\\nSo keep tuned, as v0.0.8 is under way.\\n\\n[@the-devoyage/subgraph](https://www.github.com/the-devoyage/subgraph) - Check out the repo, grab a ticket, let\'s build.\\n<BlogFooter />"},{"id":"subgraph-v0.0.5-api-vs-car","metadata":{"permalink":"/blog/subgraph-v0.0.5-api-vs-car","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.5/index.md","source":"@site/blog/subgraph-v0.0.5/index.md","title":"Subgraph v0.0.5 - API vs. Car - Startups, What is an API and Why Generate?","description":"Hello all, and thanks for joining.","date":"2023-02-26T00:00:00.000Z","formattedDate":"February 26, 2023","tags":[{"label":"subgraph","permalink":"/blog/tags/subgraph"}],"readingTime":5.405,"hasTruncateMarker":true,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"title":"Subgraph v0.0.5 - API vs. Car - Startups, What is an API and Why Generate?","slug":"subgraph-v0.0.5-api-vs-car","authors":["nick"],"tags":["subgraph"],"date":"2023-02-26T00:00:00.000Z"},"prevItem":{"title":"Subgraph v0.0.7 - Instant Chat GPT GraphQL API","permalink":"/blog/subgraph-v0.0.7-http-with-chat-gpt"},"nextItem":{"title":"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator","permalink":"/blog/subgraph-v0.0.4-versatile-typings"}},"content":"import {BlogFooter} from \'@site/src/components/common/blog-footer\'\\n\\nHello all, and thanks for joining.\\n\\nToday, we start a conversation about what an API does at a basic level while talking about the newest release of project `Subgraph`, a GraphQL API Generator built with Rust.\\n\\nYour next startup idea will most likely resolve around tech; It\'s 2023! So before you set out to hire that next developer, it is important that you might understand some basics about the empire you are creating.\\n\\n![API Vs Car](https://res.cloudinary.com/the-devoyage/image/upload/v1677423235/The-Devoyage/API_VS_CAR_keho8m.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## API vs Car, yes a Car\\n\\nAs you may already know, data is your most valuable asset.\\n\\nI am not saying it would be fun, but a company can recover from a broken application. Loss of code, bugs, and crashes can (and will) happen. But nothing is worse than if you loose the data itself.\\n\\nRealizing this, we can compare an API to a Car. Yes, that shiny mode of transportation that gets you everywhere. The core job of an API is to move data.\\n\\nNot unlike a car, as long as data can safely get from point A to point B, the API has done it\'s job. Meaning, that for most cases, any car will do.\\n\\n### The Jobs of an API\\n\\nIn most situations, your car is not that different from my car. In fact, they are almost identical aside from some minor bells and whistles.\\n\\nAt a high overview, the job of an API is pretty basic, move data! There are four basic reasons for data transportation and they boil down to the acronym, \\"CRUD\\".\\n\\n\\"CRUD\\" stands for Create -- Read -- Update -- Delete. The basic responsibilities of an API.\\n\\n#### Create - The Factory\\n\\nHop in your car, and let\'s take a trip down to the industrial district. Grab some supplies because we are going to create something new at the factory.\\n\\nJust like a car might transport raw materials to the factory in order to create something new, we can send data from our shiny new website to the database (through the API) to create a new asset in our database.\\n\\n#### Read - The Grocery Run\\n\\nGrab your reusable grocery bags and shopping list, it\'s time to do the weekly food run.\\n\\nYour users will expect to be able to view data from the database. When your website needs to get some data, you will request that data through the API. It\'s just like that weekly grocery run that keeps us all fed and happy.\\n\\n#### Update - The Shop\\n\\nMy new bike has broken. Load it into the trunk and take it to the shop for me!\\n\\nIt\'s not enough that you can create or read items from the database. You are going to have to update these items, just like we fixed my bike by adding a nice new wicker basket to the front.\\n\\nThe API is going to be responsible to take those update instructions all the way from your website to the database. That way, you can edit those assets you have created.\\n\\n#### Delete - The Dump\\n\\nEach spring, my family does a clean out -- Spring Cleaning. We load things we don\'t need into our vehicle and take them on down to the dump (or donation facility)!\\n\\nYour website will need to do something very similar. It will send some data through the API, which instructs the database to delete some items.\\n\\n## Subgraph - A GraphQL API Generator\\n\\nThe job of an API is to transfer data. A shiny new car is nice, but a clunker can also get you from point A to point B. An API is a vehicle that can be built, updated, or replaced as needed!\\n\\nMany times, we sit down with our development team to build this vehicle (API) part by part, piece by piece, from the ground up. Only to realize we are building the same thing over and over, solving the same issues the same way again and again.\\n\\nSince these basic tasks of an API are mainly universal, an API Generator such as Project `Subgraph` might be a solution that helps you to build your next API.\\n\\nCurrently, the project is a proof of concept. Define a simple configuration to run the API. Instant data transportation in a classy, speedy, and modern vehicle.\\n\\n### Define to Run\\n\\nThe goal is simple -- Since APIs are generally similar, we should be able to generate an API based on the data we currently have or want to have in our database.\\n\\nWe define a simple configuration, and the generator handles the creation of the four main responsibilities of an API - Create, Read, Update, Delete.\\n\\nLet\'s take a look at the ~20 lines of code needed to start your next API.\\n\\n1. Define The Config\\n\\nName your service, connect your database, and define your data. Simple.\\n\\nBelow, my API will be able to Create, Read, Update, and Delete `Restaurants`. Each `Restaurant` has two data points including a `name` and a `rating`. It\'s pretty simple but with this config I\'ll be able to perform the four responsibilities of an API.\\n\\n```toml\\n# Name Your Service\\n[service]\\nservice_name = \\"Restaurants\\"\\n\\n# Connect your Mongo DB\\n[service.database_config]\\nmongo_uri = \\"mongodb://user:pass@127.0.0.1:27017/db\\"\\nmongo_db = \\"myDb\\"\\n\\n# Describe Your Data\\n[[service.entities]]\\nname = \\"Restaurant\\"\\n\\n[[service.entities.fields]]\\nname = \\"name\\"\\nscalar = \\"String\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"rating\\"\\nscalar = \\"Int\\"\\nrequired = true\\n```\\n\\n2. Starting the API\\n\\nSpinning this bad boy up is a One Line Command for your Developers.\\n\\n```bash\\nsubgraph --config ./my-config.toml --port 5000\\n```\\n\\n### v0.0.5 - Subgraph\\n\\nThanks for checking out this crazy simple description of an API and the Subgraph API Generator!\\n\\nVersion `v0.0.5` is officially released and while it is still a proof of concept, it provides some new features that take us one step closer to an official release.\\n\\nIn this new version, we are able to define configuration to block or allow access by domain! In tech terms, we can define some simple CORS Configuration.\\n\\n- Specify Allowed HTTP Methods\\n- Declare Allowed Origins\\n- Allow Specific Headers\\n\\nAside from these tech terms, it allows you to lock your server down from a security prospective. It\'s a small step forward for project `Subgraph` and I am happy to share the progress with you.\\n\\n---\\n\\nIf you are interested in [Checking Out The Code](https://www.github.com/the-devoyage/subgraph), it\'s open source! Download it to try it, view it, or submit your contributions as the project grows.\\n\\nThanks All!\\n\\n<BlogFooter />"},{"id":"subgraph-v0.0.4-versatile-typings","metadata":{"permalink":"/blog/subgraph-v0.0.4-versatile-typings","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.4/index.md","source":"@site/blog/subgraph-v0.0.4/index.md","title":"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator","description":"Hello all! Thanks for joining!","date":"2023-02-20T00:00:00.000Z","formattedDate":"February 20, 2023","tags":[{"label":"subgraph","permalink":"/blog/tags/subgraph"}],"readingTime":2.94,"hasTruncateMarker":true,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"slug":"subgraph-v0.0.4-versatile-typings","title":"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator","authors":["nick"],"tags":["subgraph"],"date":"2023-02-20T00:00:00.000Z"},"prevItem":{"title":"Subgraph v0.0.5 - API vs. Car - Startups, What is an API and Why Generate?","permalink":"/blog/subgraph-v0.0.5-api-vs-car"},"nextItem":{"title":"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust","permalink":"/blog/subgraph-v0.0.3-reusable-resolvers"}},"content":"import {BlogFooter} from \'@site/src/components/common/blog-footer\'\\n\\nHello all! Thanks for joining!\\n\\nToday, the goal is to share the idea of versatile typings for an API Generator.\\n\\nIn version `v0.0.4` of the `subgraph` API Generator Project, I am happy to introduce the (mongo) Object Id Scalar. This means it\'s now possible to instantly start an API `Subgraph` Instance with the capabilities to find Mongo Documents by their Object ID! One simple step forward for this POC GraphQL API Generator written in Rust.\\n\\nIn case you are new to `Project Subgraph`, \\"Define to Run\\", is the motto. Define a simple configuration, and start the API. The code does the rest by generating resolvers and database connections -- An instantly generated API.\\n\\n![GraphQL Versatile Typings](https://res.cloudinary.com/the-devoyage/image/upload/v1676924961/The-Devoyage/INTUITIVE_SCALARS_4_ttaqvh.png)\\n\\nSo, what kind of scalars are we including in this API Generator? Let\'s take a look.\\n\\n\x3c!--truncate--\x3e\\n\\n## Versatile Typings\\n\\nCreating an API Generator needs to be versatile, yet simple. Two steps simple.\\n\\n1. Define the entities.\\n2. Let the code do it\'s job to create the API.\\n\\nThis means that the scalar type of each entity versatile enough to cover many circumstances.\\n\\n### The Typings\\n\\nWith `Subgraph v0.0.4` we have a simple set of options, as the project is still a proof of concept in its infancy. There are 4, mostly primitive, scalars to define entities.\\n\\n- Object ID (Mongo)\\n- String\\n- Int\\n- Boolean\\n\\nAs the project ramps up, more versatile options will be included.\\n\\n- Email\\n- Date\\n- DateTime\\n- Password\\n- Phone\\n- Objects\\n- Other Entities\\n- ... the list goes on!\\n\\nFor now, we can establish some base practices on implementing new scalars before diving into the deep end.\\n\\n### Defining an Entity\\n\\nI\'ll say it once, and I\'ll say it again. Define to Run is the motto.\\n\\nDefining an entity is the almost the only thing you need to do in order to start the API, aside from declaring some database configuration.\\n\\nBelow, we define an entity for our `Beers` service. It\'s the weekend somewhere.\\n\\nThe `Beer` entity has three properties including, `name`, `IBU`, and `inStock`. The ability to define more than one entity is just as simple, if so chosen.\\n\\n```\\n[service]\\n...\\n\\n[[service.entities]]\\nname = \\"Beer\\"\\n\\n[[service.entities.fields]]\\nname = \\"_id\\"\\nscalar = \\"ObjectID\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"name\\"\\nscalar = \\"String\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"IBU\\"\\nscalar = \\"Int\\"\\nrequired = false\\n\\n[[service.entities.fields]]\\nname = \\"inStock\\"\\nscalar = \\"Boolean\\"\\nrequired = true\\n\\n[[service.entities]]\\n...\\n```\\n\\nIn about 50 lines of code, this little API can be started! Compare that to the hundreds or thousands of lines that might be written for a completely custom API that does nearly the exact same thing.\\n\\nNow that these couple lines have been written into a configuration file, the API can be spun up and queried.\\n\\n### Spin It Up\\n\\nOnce the entities are defined, the hard part is done. Starting the service can be done through a simple CLI Command.\\n\\n```bash\\nsubgraph --config ./config.toml --port 5000\\n```\\n\\nAnd like that... a brand new Beer API has been born! Checkout the sandbox hosted at the defined port, `http://localhost:5000`, to sample your server.\\n\\n---\\n\\nThanks for checking out the [Repo](https://www.github.com/the-devoyage/subgraph), and following along with this proof of concept. If you are interested in contributing or have some ideas, feel free to share on the `issues` tab.\\n\\nVersion `v0.0.5` is on it\'s way, with configurable CORS settings. If you like the project or want to keep up to date, follow along to get notifications of future releases.\\n\\n<BlogFooter />"},{"id":"subgraph-v0.0.3-reusable-resolvers","metadata":{"permalink":"/blog/subgraph-v0.0.3-reusable-resolvers","editUrl":"https://www.github.com/The-Devoyage/devoyage-web/blob/master/blog/subgraph-v0.0.3/index.md","source":"@site/blog/subgraph-v0.0.3/index.md","title":"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust","description":"Hello all! Thanks for joining.","date":"2023-02-04T00:00:00.000Z","formattedDate":"February 4, 2023","tags":[{"label":"subgraph","permalink":"/blog/tags/subgraph"}],"readingTime":2.035,"hasTruncateMarker":true,"authors":[{"name":"Nick McLean","title":"Maintainer of The Devoyage","url":"https://medium.com/@thedevoyage","imageURL":"https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg","key":"nick"}],"frontMatter":{"slug":"subgraph-v0.0.3-reusable-resolvers","title":"Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust","authors":["nick"],"tags":["subgraph"],"date":"2023-02-04T00:00:00.000Z"},"prevItem":{"title":"Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator","permalink":"/blog/subgraph-v0.0.4-versatile-typings"}},"content":"import {BlogFooter} from \'@site/src/components/common/blog-footer\'\\n\\nHello all! Thanks for joining.\\n\\nToday I\'d like to share a quick update for `@the-devoyage/subgraph`, a GraphQL API Generator with the goal of simplicity.\\n\\nDefine to run is the motto so far, which references the ease of running this API Generator. Define the schema to run the API. It should be that easy to start an API up.\\n\\nIn version `v0.0.3` we are adding the ability to Find Many which is one of the reusable resolvers that is created for you when you start the service.\\n\\n![GraphQL Resolvers CRUD](https://res.cloudinary.com/the-devoyage/image/upload/v1675543551/The-Devoyage/CRUD_GraphQL_aaooqr.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## Reusable Resolvers\\n\\nThe idea of an API Generator is to make creating a standardized API easy. Many parts of creating an API can be automated, including the creation of resolvers.\\n\\nThe core of an API revolves around CRUD operations (Create, Read, Update, Delete) which can easily be automated considering there are really not many variations to consider.\\n\\nThe Devoyage\'s `subgraph` project (The API Generator) has the goal of automating a variety of these operations for each defined entity.\\n\\n- Find One/Many\\n- Create One/Many\\n- Delete One/Many\\n- Update One/Many\\n\\nThis means there will be a total of 8 reusable resolvers created for each defined entity as this project proceeds.\\n\\n## The New Resolver\\n\\nVersion `v0.0.3` takes a step at closing the gap to including all 8 of these automated resolvers by including the `Find Many` resolver. Let\'s take a look!\\n\\n### Define The Entity (or Entities)\\n\\nFirst define the entity in the config file. Remember the motto - \\"Define to Run\\".\\n\\n```toml\\n[service]\\nservice_name = \\"pets\\"\\n\\n[service.database_config]\\nmongo_uri = \\"mongodb://user:pass@127.0.0.1:27017/db\\"\\nmongo_db = \\"myDb\\"\\n\\n[[service.entities]]\\nname = \\"Dog\\"\\n\\n[service.entities.database_config]\\nmongo_collection = \\"dogs\\"\\n\\n[[service.entities.fields]]\\nname = \\"_id\\"\\nscalar = \\"ObjectID\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"name\\"\\nscalar = \\"String\\"\\nrequired = true\\n\\n[[service.entities.fields]]\\nname = \\"weight\\"\\nscalar = \\"Int\\"\\nrequired = false\\n```\\n\\n### Run The service\\n\\nStep 1 is easy. Step 2 is even easier. Start the service.\\n\\n```bash\\nsubgraph --config ./config.toml --port 5011\\n```\\n\\n### The Find Many Resolver\\n\\nCheck out the schema, the find many resolver is now included as a choice for querying your new API.\\n\\n```graphql\\ntype Query {\\n  get_dogs(get_dogs_input: get_dogs_input!): [Dog!]!\\n  ...resolvers\\n}\\n```\\n\\n---\\n\\nIt\'s a small step toward the goal and I am glad you are here to follow along. If you\'re interested in checking out the code or trying out this proof of concept, check out the [Subgraph Project](https://www.github.com/the-devoyage/subgraph) on GitHub!\\n\\n<BlogFooter />"}]}')}}]);