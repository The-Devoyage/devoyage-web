"use strict";(self.webpackChunkdevoyage_web=self.webpackChunkdevoyage_web||[]).push([[2164],{4789:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var i=a(4848),t=a(8453);const s={id:"eager-loading",title:"Eager Loading"},o=void 0,r={id:"entities/fields/eager-loading",title:"Eager Loading",description:"Advanced Filtering with Eager Loading",source:"@site/subgraph/05-entities/02-fields/10-eager-loading.md",sourceDirName:"05-entities/02-fields",slug:"/entities/fields/eager-loading",permalink:"/subgraph/entities/fields/eager-loading",draft:!1,unlisted:!1,editUrl:"https://www.github.com/The-Devoyage/devoyage-web/blob/master/subgraph/05-entities/02-fields/10-eager-loading.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{id:"eager-loading",title:"Eager Loading"},sidebar:"subgraphSidebar",previous:{title:"Associations",permalink:"/subgraph/entities/fields/associations"},next:{title:"Default Values",permalink:"/subgraph/entities/fields/default-values"}},l={},d=[{value:"Advanced Filtering with Eager Loading",id:"advanced-filtering-with-eager-loading",level:2},{value:"Enabling Eager Loading",id:"enabling-eager-loading",level:3},{value:"After Enabling",id:"after-enabling",level:3},{value:"The Outcome",id:"the-outcome",level:3}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"advanced-filtering-with-eager-loading",children:"Advanced Filtering with Eager Loading"}),"\n",(0,i.jsxs)(n.p,{children:["Subgraph offers the ability to pass the ",(0,i.jsx)(n.code,{children:"eager"})," property to a field in order to enable\na filtering capability called Eager Loading."]}),"\n",(0,i.jsx)(n.p,{children:'What exactly is "Eager Loading"?'}),"\n",(0,i.jsx)(n.p,{children:"Associations and extensions allows the ability to fetch data that is related to an entiy."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"For example, you may search for a user and also include the comments associated with the user."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Eager loading allows you to search for an entity by the fields of a related entity."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'For example, you may search for a user that has a comment that has a title of "Post 123".'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Enable eager loading by passing a true value to the eager property:"}),"\n",(0,i.jsx)(n.h3,{id:"enabling-eager-loading",children:"Enabling Eager Loading"}),"\n",(0,i.jsxs)(n.p,{children:["First, ensure the entity is associated to another entity by providing the association properties\n",(0,i.jsx)(n.code,{children:"as_type"}),", ",(0,i.jsx)(n.code,{children:"join_on"}),", and optionally ",(0,i.jsx)(n.code,{children:"join_from"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Then pass a true value to ",(0,i.jsx)(n.code,{children:"eager"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Eager loaded associations must belong to the same data source as the parent entity."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[[service.entities.fields]]\nname = "access"\nscalar = "Int" # While access is an integer in the database....\nas_type = "todo_access" # We will search by the properties of an actual access object.\nlist = true\nrequired = true\njoin_on = "todo_id"\njoin_from = "id"\neager = true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"after-enabling",children:"After Enabling"}),"\n",(0,i.jsx)(n.p,{children:"Once you have configured eager loading, you will see a few changes in the schema."}),"\n",(0,i.jsx)(n.p,{children:"The input of the eager loaded entity will now change types from the originally defined\nscalar type to an object containing the keys of the eager loaded entity."}),"\n",(0,i.jsx)(n.p,{children:"You may now send queries for FindOne and FindMany to search for entities based on the properties of\nanother entity."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Without Eager Loading\nconst response = await query(GET_TODOS, {\n  query: {\n    completed: false,\n    access: 12345, // Access is of type INT without eager loading.\n  },\n});\n\n// With Eager Loading\nconst response = await query(GET_TODOS, {\n  query: {\n    completed: false,\n    // Access is of type `access` with eager loading.\n    access: {\n      user: {\n        uuid: userUuidVar(),\n      },\n      revoked: false,\n    },\n  },\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-outcome",children:"The Outcome"}),"\n",(0,i.jsxs)(n.p,{children:["Eager loading is a fancy word for creating a ",(0,i.jsx)(n.code,{children:"JOIN"})," in sql or ",(0,i.jsx)(n.code,{children:"$lookup"})," in mongo, which is why\neager loaded associations must belong to the same data source as the parent entity."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var i=a(6540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);