<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>The Devoyage Blog</title>
        <link>https://www.thedevoyage.com/blog</link>
        <description>The Devoyage Blog</description>
        <lastBuildDate>Tue, 14 Feb 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator]]></title>
            <link>https://www.thedevoyage.com/blog/subgraph-v0.0.4-versatile-typings</link>
            <guid>subgraph-v0.0.4-versatile-typings</guid>
            <pubDate>Tue, 14 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Hello all! Thanks for joining!]]></description>
            <content:encoded><![CDATA[<p>Hello all! Thanks for joining!</p><p>Today, the goal is to share the idea of versatile typings for an API Generator. </p><p>In version <code>v0.0.4</code> of the <code>subgraph</code> API Generator Project, I am happy to introduce the (mongo) Object Id Scalar. This means it's now possible to instantly start an API <code>Subgraph</code> Instance with the capabilities to find Mongo Documents by their Object ID! One simple step forward for this POC GraphQL API Generator written in Rust.</p><p>In case you are new to <code>Project Subgraph</code>, "Define to Run", is the motto. Define a simple configuration, and start the API. The code does the rest by generating resolvers and database connections -- An instantly generated API.  </p><p><img loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1676924961/The-Devoyage/INTUITIVE_SCALARS_4_ttaqvh.png" alt="GraphQL Versatile Typings" class="img_ev3q"></p><p>So, what kind of scalars are we including in this API Generator? Let's take a look.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="versatile-typings">Versatile Typings<a class="hash-link" href="#versatile-typings" title="Direct link to heading">​</a></h2><p>Creating an API Generator needs to be versatile, yet simple. Two steps simple. </p><ol><li>Define the entities.</li><li>Let the code do it's job to create the API.</li></ol><p>This means that the scalar type of each entity versatile enough to cover many circumstances.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-typings">The Typings<a class="hash-link" href="#the-typings" title="Direct link to heading">​</a></h3><p>With <code>Subgraph v0.0.4</code> we have a simple set of options, as the project is still a proof of concept in its infancy. There are 4, mostly primitive, scalars to define entities.</p><ul><li>Object ID (Mongo)</li><li>String</li><li>Int</li><li>Boolean</li></ul><p>As the project ramps up, more versatile options will be included.</p><ul><li>Email</li><li>Date</li><li>DateTime</li><li>Password</li><li>Phone</li><li>Objects</li><li>Other Entities</li><li>... the list goes on!</li></ul><p>For now, we can establish some base practices on implementing new scalars before diving into the deep end.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-an-entity">Defining an Entity<a class="hash-link" href="#defining-an-entity" title="Direct link to heading">​</a></h3><p>I'll say it once, and I'll say it again. Define to Run is the motto.</p><p>Defining an entity is the almost the only thing you need to do in order to start the API, aside from declaring some database configuration.</p><p>Below, we define an entity for our <code>Beers</code> service. It's the weekend somewhere.</p><p>The <code>Beer</code> entity has three properties including, <code>name</code>, <code>IBU</code>, and <code>inStock</code>. The ability to define more than one entity is just as simple, if so chosen.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "Beer"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "_id"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "ObjectID"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "name"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "String"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "IBU"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "Int"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = false</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "inStock"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "Boolean"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In about 50 lines of code, this little API can be started! Compare that to the hundreds or thousands of lines that might be written for a completely custom API that does nearly the exact same thing. </p><p>Now that these couple lines have been written into a configuration file, the API can be spun up and queried.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="spin-it-up">Spin It Up<a class="hash-link" href="#spin-it-up" title="Direct link to heading">​</a></h3><p>Once the entities are defined, the hard part is done. Starting the service can be done through a simple CLI Command.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">subgraph --config ./config.toml --port </span><span class="token number">5000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And like that... a brand new Beer API has been born! Checkout the sandbox hosted at the defined port, <code>http://localhost:5000</code>, to sample your server.</p><hr><p>Thanks for checking out the <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">Repo</a>, and following along with this proof of concept. If you are interested in contributing or have some ideas, feel free to share on the <code>issues</code> tab.</p><p>Version <code>v0.0.5</code> is on it's way, with configurable CORS settings. If you like the project or want to keep up to date, follow along to get notifications of future releases.</p>]]></content:encoded>
            <category>subgraph</category>
        </item>
        <item>
            <title><![CDATA[Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust]]></title>
            <link>https://www.thedevoyage.com/blog/subgraph-v0.0.3-reusable-resolvers</link>
            <guid>subgraph-v0.0.3-reusable-resolvers</guid>
            <pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Hello all! Thanks for joining.]]></description>
            <content:encoded><![CDATA[<p>Hello all! Thanks for joining.</p><p>Today I'd like to share a quick update for <code>@the-devoyage/subgraph</code>, a GraphQL API Generator with the goal of simplicity.&nbsp;</p><p>Define to run is the motto so far, which references the ease of running this API Generator. Define the schema to run the API. It should be that easy to start an API up.</p><p>In version <code>v0.0.3</code> we are adding the ability to Find Many which is one of the reusable resolvers that is created for you when you start the service. </p><p><img loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1675543551/The-Devoyage/CRUD_GraphQL_aaooqr.png" alt="GraphQL Resolvers CRUD" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reusable-resolvers">Reusable Resolvers<a class="hash-link" href="#reusable-resolvers" title="Direct link to heading">​</a></h2><p>The idea of an API Generator is to make creating a standardized API easy. Many parts of creating an API can be automated, including the creation of resolvers. </p><p>The core of an API revolves around CRUD operations (Create, Read, Update, Delete) which can easily be automated considering there are really not many variations to consider.</p><p>The Devoyage's <code>subgraph</code> project (The API Generator) has the goal of automating a variety of these operations for each defined entity. </p><ul><li>Find One/Many</li><li>Create One/Many</li><li>Delete One/Many</li><li>Update One/Many</li></ul><p>This means there will be a total of 8 reusable resolvers created for each defined entity as this project proceeds.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-new-resolver">The New Resolver<a class="hash-link" href="#the-new-resolver" title="Direct link to heading">​</a></h2><p>Version <code>v0.0.3</code> takes a step at closing the gap to including all 8 of these automated resolvers by including the <code>Find Many</code> resolver. Let's take a look!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="define-the-entity-or-entities">Define The Entity (or Entities)<a class="hash-link" href="#define-the-entity-or-entities" title="Direct link to heading">​</a></h3><p>First define the entity in the config file. Remember the motto - "Define to Run".</p><div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">service_name = "pets"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service.database_config]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mongo_uri = "mongodb://user:pass@127.0.0.1:27017/db"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mongo_db = "myDb"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "Dog"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service.entities.database_config]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mongo_collection = "dogs"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "_id"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "ObjectID"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "name"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "String"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "weight"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "Int"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = false</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="run-the-service">Run The service<a class="hash-link" href="#run-the-service" title="Direct link to heading">​</a></h3><p>Step 1 is easy. Step 2 is even easier. Start the service.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">subgraph --config ./config.toml --port </span><span class="token number">5011</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-find-many-resolver">The Find Many Resolver<a class="hash-link" href="#the-find-many-resolver" title="Direct link to heading">​</a></h3><p>Check out the schema, the find many resolver is now included as a choice for querying your new API.</p><div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Query</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token attr-name" style="color:rgb(241, 250, 140)">get_dogs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token attr-name" style="color:rgb(241, 250, 140)">get_dogs_input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token property">get_dogs_input</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">Dog</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token operator">...</span><span class="token fragment function" style="color:rgb(80, 250, 123)">resolvers</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><p>It's a small step toward the goal and I am glad you are here to follow along. If you're interested in checking out the code or trying out this proof of concept, check out the <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">Subgraph Project</a> on GitHub!</p>]]></content:encoded>
            <category>subgraph</category>
        </item>
    </channel>
</rss>