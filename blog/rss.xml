<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>The Devoyage Blog</title>
        <link>https://www.thedevoyage.com/blog</link>
        <description>The Devoyage Blog</description>
        <lastBuildDate>Fri, 14 Apr 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Subgraph v0.0.7 - Instant Chat GPT GraphQL API]]></title>
            <link>https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt</link>
            <guid>subgraph-v0.0.7-http-with-chat-gpt</guid>
            <pubDate>Fri, 14 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Hello all -- Thanks for joining!]]></description>
            <content:encoded><![CDATA[<p>Hello all -- Thanks for joining!</p><p>Today we are going to use the Chat GPT API to show off the newest release from the subgraph project, which is a tool built to help you start up a well rounded API in a matter of minutes.</p><p>The <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">@The-Devoyage/subgraph</a> project is a proof-of-concept implementation written in Rust for generating a dynamic API from a single
configuration/schema.
The subgraph allows you to define entities, data sources, and resolvers in a single TOML configuration. </p><p>The configuration specifies how the API should be generated around the data you need, existing or not. Subgraph generates CRUD operations from the entities you define and allows you
to connect many data sources to a single API, including HTTP and MongoDB (SQL support coming in the future!). In this way, you can create an API in no time, which can be used to
manipulate and find data, and even map third-party RESTful APIs to GraphQL automatically.</p><p>Let's dive into the new HTTP Data Source configurations which will allow us to connect to almost any third party RESTful API, such as the Chat GPT API.</p><p><img loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1681523977/Subgraph_Logo_2_gff26m.png" alt="Subgraph" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="v007-and-the-chat-gpt-api">v0.0.7 and the Chat GPT API<a class="hash-link" href="#v007-and-the-chat-gpt-api" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="http-data-source">HTTP Data Source<a class="hash-link" href="#http-data-source" title="Direct link to heading">​</a></h3><p>The HTTP data source is a powerful feature in Subgraph that enables data retrieval from external APIs. With this data source, you can easily connect your Subgraph GraphQL server to any REST API and map the API endpoints to
your GraphQL schema. This allows you to consolidate data from multiple sources into a single GraphQL endpoint. The HTTP data source provides various methods to retrieve data, such as GET, POST, PUT, PATCH, DELETE,
and allows for custom headers to be set. This feature simplifies the process of fetching data from external sources and reduces the amount of boilerplate code needed.</p><div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.data_sources]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service.data_sources.HTTP]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "chat_gpt"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">url = "https://api.openai.com/"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">default_headers = [{ name = "Authorization", value = "Bearer $OPENAI_KEY" }]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="object-support">Object Support<a class="hash-link" href="#object-support" title="Direct link to heading">​</a></h3><p>In Subgraph, Scalars are the primitive data types such as String, Int, and Boolean. However, there are situations where we need to represent more complex types or groupings of primitive Scalars. This is where Object types come into play.
An Object "Scalar" is a custom type that can be defined in the configuration for the schema, representing a complex type that can be used as a type itself. For example, you might have an object scalar representing a comment, with
its creator, content, and any other desired attributes.</p><div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "usage"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "Object"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">exclude_from_input = ["CreateOne"] </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fields = [</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    { name = "prompt_tokens", scalar = "Int", required = true },</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    { name = "completion_tokens", scalar = "Int", required = true },</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    { name = "total_tokens", scalar = "Int", required = true },</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="list-options">List Options<a class="hash-link" href="#list-options" title="Direct link to heading">​</a></h3><p>Lists or Arrays are one of the most commonly used data types in programming languages. Similarly, in Subgraph, lists can be defined as an array of a certain data types. This allows for a collection of values
to be returned as a single response. Lists can be defined in the configuration file by marking the field as a list (as shown below). Lists can also be nested inside objects, allowing for more complex data structures to be
represented. Lists are useful when you need to return multiple instances of a certain data type, such as a list of products or a list of blog posts.</p><div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "messages"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "Object"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">list = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fields = [</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  {name = "role", scalar = "String", required = true}, </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  {name = "content", scalar = "String", required = true}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">exclude_from_output = true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New Features<a class="hash-link" href="#new-features" title="Direct link to heading">​</a></h3><ul><li>HTTP Data Source - Easily map a HTTP API into this GraphQL API.</li><li>Update One Resolver - Update Mongo documents or send HTTP Put/Patch Request</li><li>Objects and Lists - Support for more complex data structures.</li><li>Exclude From Input/Output - Allows fields to be shared or mapped exclusivly to resolvers input/output.</li><li>Environment Variable Support - Use environment variables directly inside your config with the <code>$</code> suffix.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-chat-gpt-config">The Chat GPT Config<a class="hash-link" href="#the-chat-gpt-config" title="Direct link to heading">​</a></h2><p>Let's get down to the nitty gritty and hit the Chat GPT Completions endpoint with a Subgraph Service.</p><ol><li>Download the latest <a href="https://www.github.com/the-devoyage/subgraph/releases" target="_blank" rel="noopener noreferrer">release</a> of subgraph.</li><li>Get an Open AI API Key and set it as an environment variable.</li></ol><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">EXPORT </span><span class="token assign-left variable" style="color:rgb(189, 147, 249);font-style:italic">OPENAI_KEY</span><span class="token operator">=</span><span class="token plain">paste_key_here</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="3"><li><p>Download the <a href="https://github.com/The-Devoyage/subgraph/blob/2209c412f3f4fd0664a7963edba1d9830ec8e50c/examples/chat-gpt.toml" target="_blank" rel="noopener noreferrer">Chat GPT Service Config Example</a></p></li><li><p>Start the API.</p></li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">./subgraph -c ./chat-gpt.toml -p 5012</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="5"><li>Check out the Sandbox and send some mutations!</li></ol><p>Open browser and navigate to the port that the service was started on. <code>http://localhost:5012</code></p><p><img loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1680991221/Screenshot_from_2023-04-08_17-00-02_xidwxl.png" alt="Sandbox" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>There is still a lot of work in order to get to v0.1.0 - Error handling, SQL Compatibility, Various Scalar Support, GraphQL Subscriptions... just to name a few.</p><p>So keep tuned, as v0.0.8 is under way.</p><p><a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">@the-devoyage/subgraph</a> - Check out the repo, grab a ticket, let's build.</p>]]></content:encoded>
            <category>subgraph</category>
        </item>
        <item>
            <title><![CDATA[Subgraph v0.0.5 - API vs. Car - Startups, What is an API and Why Generate?]]></title>
            <link>https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car</link>
            <guid>subgraph-v0.0.5-api-vs-car</guid>
            <pubDate>Sun, 26 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Hello all, and thanks for joining.]]></description>
            <content:encoded><![CDATA[<p>Hello all, and thanks for joining.</p><p>Today, we start a conversation about what an API does at a basic level while talking about the newest release of project <code>Subgraph</code>, a GraphQL API Generator built with Rust.</p><p>Your next startup idea will most likely resolve around tech; It's 2023! So before you set out to hire that next developer, it is important that you might understand some basics about the empire you are creating.</p><p><img loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1677423235/The-Devoyage/API_VS_CAR_keho8m.png" alt="API Vs Car" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="api-vs-car-yes-a-car">API vs Car, yes a Car<a class="hash-link" href="#api-vs-car-yes-a-car" title="Direct link to heading">​</a></h2><p>As you may already know, data is your most valuable asset.</p><p>I am not saying it would be fun, but a company can recover from a broken application. Loss of code, bugs, and crashes can (and will) happen. But nothing is worse than if you loose the data itself.</p><p>Realizing this, we can compare an API to a Car. Yes, that shiny mode of transportation that gets you everywhere. The core job of an API is to move data. </p><p>Not unlike a car, as long as data can safely get from point A to point B, the API has done it's job. Meaning, that for most cases, any car will do. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-jobs-of-an-api">The Jobs of an API<a class="hash-link" href="#the-jobs-of-an-api" title="Direct link to heading">​</a></h3><p>In most situations, your car is not that different from my car. In fact, they are almost identical aside from some minor bells and whistles.</p><p>At a high overview, the job of an API is pretty basic, move data! There are four basic reasons for data transportation and they boil down to the acronym, "CRUD". </p><p>"CRUD" stands for Create -- Read -- Update -- Delete. The basic responsibilities of an API.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="create---the-factory">Create - The Factory<a class="hash-link" href="#create---the-factory" title="Direct link to heading">​</a></h4><p>Hop in your car, and let's take a trip down to the industrial district. Grab some supplies because we are going to create something new at the factory.</p><p>Just like a car might transport raw materials to the factory in order to create something new, we can send data from our shiny new website to the database (through the API) to create a new asset in our database.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="read---the-grocery-run">Read - The Grocery Run<a class="hash-link" href="#read---the-grocery-run" title="Direct link to heading">​</a></h4><p>Grab your reusable grocery bags and shopping list, it's time to do the weekly food run.</p><p>Your users will expect to be able to view data from the database. When your website needs to get some data, you will request that data through the API. It's just like that weekly grocery run that keeps us all fed and happy.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="update---the-shop">Update - The Shop<a class="hash-link" href="#update---the-shop" title="Direct link to heading">​</a></h4><p>My new bike has broken. Load it into the trunk and take it to the shop for me!</p><p>It's not enough that you can create or read items from the database. You are going to have to update these items, just like we fixed my bike by adding a nice new wicker basket to the front.</p><p>The API is going to be responsible to take those update instructions all the way from your website to the database. That way, you can edit those assets you have created.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="delete---the-dump">Delete - The Dump<a class="hash-link" href="#delete---the-dump" title="Direct link to heading">​</a></h4><p>Each spring, my family does a clean out -- Spring Cleaning. We load things we don't need into our vehicle and take them on down to the dump (or donation facility)!</p><p>Your website will need to do something very similar. It will send some data through the API, which instructs the database to delete some items.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="subgraph---a-graphql-api-generator">Subgraph - A GraphQL API Generator<a class="hash-link" href="#subgraph---a-graphql-api-generator" title="Direct link to heading">​</a></h2><p>The job of an API is to transfer data. A shiny new car is nice, but a clunker can also get you from point A to point B. An API is a vehicle that can be built, updated, or replaced as needed!</p><p>Many times, we sit down with our development team to build this vehicle (API) part by part, piece by piece, from the ground up. Only to realize we are building the same thing over and over, solving the same issues the same way again and again.</p><p>Since these basic tasks of an API are mainly universal, an API Generator such as Project <code>Subgraph</code> might be a solution that helps you to build your next API. </p><p>Currently, the project is a proof of concept. Define a simple configuration to run the API. Instant data transportation in a classy, speedy, and modern vehicle.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="define-to-run">Define to Run<a class="hash-link" href="#define-to-run" title="Direct link to heading">​</a></h3><p>The goal is simple -- Since APIs are generally similar, we should be able to generate an API based on the data we currently have or want to have in our database.</p><p>We define a simple configuration, and the generator handles the creation of the four main responsibilities of an API - Create, Read, Update, Delete. </p><p>Let's take a look at the ~20 lines of code needed to start your next API.</p><ol><li>Define The Config</li></ol><p>Name your service, connect your database, and define your data. Simple.</p><p>Below, my API will be able to Create, Read, Update, and Delete <code>Restaurants</code>. Each <code>Restaurant</code> has two data points including a <code>name</code> and a <code>rating</code>. It's pretty simple but with this config I'll be able to perform the four responsibilities of an API.</p><div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain"># Name Your Service</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">service_name = "Restaurants"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"># Connect your Mongo DB</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service.database_config]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mongo_uri = "mongodb://user:pass@127.0.0.1:27017/db"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mongo_db = "myDb"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"># Describe Your Data</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "Restaurant"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "name"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "String"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "rating"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "Int"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li>Starting the API </li></ol><p>Spinning this bad boy up is a One Line Command for your Developers.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">subgraph --config ./my-config.toml --port </span><span class="token number">5000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="v005---subgraph">v0.0.5 - Subgraph<a class="hash-link" href="#v005---subgraph" title="Direct link to heading">​</a></h3><p>Thanks for checking out this crazy simple description of an API and the Subgraph API Generator!</p><p>Version <code>v0.0.5</code> is officially released and while it is still a proof of concept, it provides some new features that take us one step closer to an official release.</p><p>In this new version, we are able to define configuration to block or allow access by domain! In tech terms, we can define some simple CORS Configuration. </p><ul><li>Specify Allowed HTTP Methods</li><li>Declare Allowed Origins</li><li>Allow Specific Headers</li></ul><p>Aside from these tech terms, it allows you to lock your server down from a security prospective. It's a small step forward for project <code>Subgraph</code> and I am happy to share the progress with you.</p><hr><p>If you are interested in <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">Checking Out The Code</a>, it's open source! Download it to try it, view it, or submit your contributions as the project grows. </p><p>Thanks All!</p>]]></content:encoded>
            <category>subgraph</category>
        </item>
        <item>
            <title><![CDATA[Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator]]></title>
            <link>https://www.thedevoyage.com/blog/subgraph-v0.0.4-versatile-typings</link>
            <guid>subgraph-v0.0.4-versatile-typings</guid>
            <pubDate>Mon, 20 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Hello all! Thanks for joining!]]></description>
            <content:encoded><![CDATA[<p>Hello all! Thanks for joining!</p><p>Today, the goal is to share the idea of versatile typings for an API Generator. </p><p>In version <code>v0.0.4</code> of the <code>subgraph</code> API Generator Project, I am happy to introduce the (mongo) Object Id Scalar. This means it's now possible to instantly start an API <code>Subgraph</code> Instance with the capabilities to find Mongo Documents by their Object ID! One simple step forward for this POC GraphQL API Generator written in Rust.</p><p>In case you are new to <code>Project Subgraph</code>, "Define to Run", is the motto. Define a simple configuration, and start the API. The code does the rest by generating resolvers and database connections -- An instantly generated API.  </p><p><img loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1676924961/The-Devoyage/INTUITIVE_SCALARS_4_ttaqvh.png" alt="GraphQL Versatile Typings" class="img_ev3q"></p><p>So, what kind of scalars are we including in this API Generator? Let's take a look.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="versatile-typings">Versatile Typings<a class="hash-link" href="#versatile-typings" title="Direct link to heading">​</a></h2><p>Creating an API Generator needs to be versatile, yet simple. Two steps simple. </p><ol><li>Define the entities.</li><li>Let the code do it's job to create the API.</li></ol><p>This means that the scalar type of each entity versatile enough to cover many circumstances.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-typings">The Typings<a class="hash-link" href="#the-typings" title="Direct link to heading">​</a></h3><p>With <code>Subgraph v0.0.4</code> we have a simple set of options, as the project is still a proof of concept in its infancy. There are 4, mostly primitive, scalars to define entities.</p><ul><li>Object ID (Mongo)</li><li>String</li><li>Int</li><li>Boolean</li></ul><p>As the project ramps up, more versatile options will be included.</p><ul><li>Email</li><li>Date</li><li>DateTime</li><li>Password</li><li>Phone</li><li>Objects</li><li>Other Entities</li><li>... the list goes on!</li></ul><p>For now, we can establish some base practices on implementing new scalars before diving into the deep end.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-an-entity">Defining an Entity<a class="hash-link" href="#defining-an-entity" title="Direct link to heading">​</a></h3><p>I'll say it once, and I'll say it again. Define to Run is the motto.</p><p>Defining an entity is the almost the only thing you need to do in order to start the API, aside from declaring some database configuration.</p><p>Below, we define an entity for our <code>Beers</code> service. It's the weekend somewhere.</p><p>The <code>Beer</code> entity has three properties including, <code>name</code>, <code>IBU</code>, and <code>inStock</code>. The ability to define more than one entity is just as simple, if so chosen.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "Beer"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "_id"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "ObjectID"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "name"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "String"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "IBU"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "Int"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = false</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "inStock"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "Boolean"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In about 50 lines of code, this little API can be started! Compare that to the hundreds or thousands of lines that might be written for a completely custom API that does nearly the exact same thing. </p><p>Now that these couple lines have been written into a configuration file, the API can be spun up and queried.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="spin-it-up">Spin It Up<a class="hash-link" href="#spin-it-up" title="Direct link to heading">​</a></h3><p>Once the entities are defined, the hard part is done. Starting the service can be done through a simple CLI Command.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">subgraph --config ./config.toml --port </span><span class="token number">5000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And like that... a brand new Beer API has been born! Checkout the sandbox hosted at the defined port, <code>http://localhost:5000</code>, to sample your server.</p><hr><p>Thanks for checking out the <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">Repo</a>, and following along with this proof of concept. If you are interested in contributing or have some ideas, feel free to share on the <code>issues</code> tab.</p><p>Version <code>v0.0.5</code> is on it's way, with configurable CORS settings. If you like the project or want to keep up to date, follow along to get notifications of future releases.</p>]]></content:encoded>
            <category>subgraph</category>
        </item>
        <item>
            <title><![CDATA[Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust]]></title>
            <link>https://www.thedevoyage.com/blog/subgraph-v0.0.3-reusable-resolvers</link>
            <guid>subgraph-v0.0.3-reusable-resolvers</guid>
            <pubDate>Sat, 04 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Hello all! Thanks for joining.]]></description>
            <content:encoded><![CDATA[<p>Hello all! Thanks for joining.</p><p>Today I'd like to share a quick update for <code>@the-devoyage/subgraph</code>, a GraphQL API Generator with the goal of simplicity.&nbsp;</p><p>Define to run is the motto so far, which references the ease of running this API Generator. Define the schema to run the API. It should be that easy to start an API up.</p><p>In version <code>v0.0.3</code> we are adding the ability to Find Many which is one of the reusable resolvers that is created for you when you start the service. </p><p><img loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1675543551/The-Devoyage/CRUD_GraphQL_aaooqr.png" alt="GraphQL Resolvers CRUD" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reusable-resolvers">Reusable Resolvers<a class="hash-link" href="#reusable-resolvers" title="Direct link to heading">​</a></h2><p>The idea of an API Generator is to make creating a standardized API easy. Many parts of creating an API can be automated, including the creation of resolvers. </p><p>The core of an API revolves around CRUD operations (Create, Read, Update, Delete) which can easily be automated considering there are really not many variations to consider.</p><p>The Devoyage's <code>subgraph</code> project (The API Generator) has the goal of automating a variety of these operations for each defined entity. </p><ul><li>Find One/Many</li><li>Create One/Many</li><li>Delete One/Many</li><li>Update One/Many</li></ul><p>This means there will be a total of 8 reusable resolvers created for each defined entity as this project proceeds.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-new-resolver">The New Resolver<a class="hash-link" href="#the-new-resolver" title="Direct link to heading">​</a></h2><p>Version <code>v0.0.3</code> takes a step at closing the gap to including all 8 of these automated resolvers by including the <code>Find Many</code> resolver. Let's take a look!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="define-the-entity-or-entities">Define The Entity (or Entities)<a class="hash-link" href="#define-the-entity-or-entities" title="Direct link to heading">​</a></h3><p>First define the entity in the config file. Remember the motto - "Define to Run".</p><div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">service_name = "pets"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service.database_config]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mongo_uri = "mongodb://user:pass@127.0.0.1:27017/db"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mongo_db = "myDb"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "Dog"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[service.entities.database_config]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mongo_collection = "dogs"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "_id"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "ObjectID"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "name"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "String"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name = "weight"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">scalar = "Int"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">required = false</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="run-the-service">Run The service<a class="hash-link" href="#run-the-service" title="Direct link to heading">​</a></h3><p>Step 1 is easy. Step 2 is even easier. Start the service.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">subgraph --config ./config.toml --port </span><span class="token number">5011</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-find-many-resolver">The Find Many Resolver<a class="hash-link" href="#the-find-many-resolver" title="Direct link to heading">​</a></h3><p>Check out the schema, the find many resolver is now included as a choice for querying your new API.</p><div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> </span><span class="token class-name">Query</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token attr-name" style="color:rgb(241, 250, 140)">get_dogs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token attr-name" style="color:rgb(241, 250, 140)">get_dogs_input</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token property">get_dogs_input</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">Dog</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token operator">...</span><span class="token fragment function" style="color:rgb(80, 250, 123)">resolvers</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><p>It's a small step toward the goal and I am glad you are here to follow along. If you're interested in checking out the code or trying out this proof of concept, check out the <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">Subgraph Project</a> on GitHub!</p>]]></content:encoded>
            <category>subgraph</category>
        </item>
    </channel>
</rss>