<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.thedevoyage.com/blog</id>
    <title>The Devoyage Blog</title>
    <updated>2024-04-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.thedevoyage.com/blog"/>
    <subtitle>The Devoyage Blog</subtitle>
    <icon>https://www.thedevoyage.com/img/logo.svg</icon>
    <entry>
        <title type="html"><![CDATA[Rust X JS - Class vs Struct - A look at Rust Through JS Tinted Glasses]]></title>
        <id>https://www.thedevoyage.com/blog/rust_x_js-class_vs_struct</id>
        <link href="https://www.thedevoyage.com/blog/rust_x_js-class_vs_struct"/>
        <updated>2024-04-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Looking at rust vs javascript and comparing classes to structs! Learn some rust, learn some JS.]]></summary>
        <content type="html"><![CDATA[<p>Welcome Voyager!</p>
<p>Today I'd love to try taking a look at Rust through the perspective of
a JavaScript (or TypeScript) developer. Rust's growing popularity is not only something to keep
an eye on, but an excellent excuse to learn something new.</p>
<p>A JavaScript class is a syntax that allows you to define blueprints for creating objects.
Compared to the Rust Programming Language, structs act in a similar way by
providing a mechanism for defining custom data types that encapsulate related data fields.</p>
<p>Let's compare the similarities and differences between these two concepts so that we can
better understand their respective roles and functionalities in programming languages. By
examining their similarities, we can identify common principles that underlie both
concepts, facilitating knowledge transfer between languages and enhancing our ability to
leverage their features effectively. In the end, hopefully we can learn some Rust!</p>
<p>Keep in mind that this is mostly psuedo-code written to show quick comparisons. You may need to tweak
it to get it to run!</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1712804125/Rust_X_JS_adiz47.png" alt="Rust x JS Logo" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-starting-point">A Starting Point<a href="https://www.thedevoyage.com/blog/rust_x_js-class_vs_struct#a-starting-point" class="hash-link" aria-label="Direct link to A Starting Point" title="Direct link to A Starting Point">​</a></h2>
<p>First, take a look at a basic starting point for each language by defining a Class and a Struct.</p>
<p>In JavaScript:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>and in Rust:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">struct</span><span class="token plain"> </span><span class="token type-definition class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In both JavaScript and Rust, the concept of defining a structure or a class is fundamental
to object-oriented programming (OOP). In JavaScript, the <code>class</code> keyword is used to
define a blueprint for creating objects with shared properties and methods. In this
example, User is an empty class declaration, indicating that it serves as a template
for creating user objects, which can later be instantiated with specific attributes and
behaviors.</p>
<p>On the other hand, Rust uses the <code>struct</code> keyword to define a structure. In the given Rust code, User
is declared as an empty struct, representing a user data structure that can hold various fields or
properties.</p>
<p>Both JavaScript classes and Rust structs provide a foundation for organizing and
manipulating data in a structured manner, albeit with different syntax and paradigms.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="adding-properties">Adding Properties<a href="https://www.thedevoyage.com/blog/rust_x_js-class_vs_struct#adding-properties" class="hash-link" aria-label="Direct link to Adding Properties" title="Direct link to Adding Properties">​</a></h3>
<p>Expanding upon the initial examples, let's demonstrate how properties can be added to the
User class in JavaScript and the User struct in Rust.</p>
<p>In JavaScript, properties can be added to a class using the constructor function. Below is
an example illustrating the addition of properties name and age to the User class:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">constructor</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">name</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">name</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">age</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Similarly, in Rust, properties can be added to a struct using fields. Here's an example that
extends the User struct with name and age fields:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">struct</span><span class="token plain"> </span><span class="token type-definition class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">String</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">u32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="methods-and-implementations">Methods and Implementations<a href="https://www.thedevoyage.com/blog/rust_x_js-class_vs_struct#methods-and-implementations" class="hash-link" aria-label="Direct link to Methods and Implementations" title="Direct link to Methods and Implementations">​</a></h3>
<p>Adding functionality to a class or struct is essential for organizing logic associated with the
class or struct that is specific to the class/struct itself.</p>
<p>In both examples, we added a method named greet() to the User class/struct. This method returns a
greeting string using the name and age properties of the user. Instances of User can then
utilize this method to greet the user.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">constructor</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">name</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">name</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">age</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Method to greet the user</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">greet</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword control-flow" style="color:rgb(127, 219, 202)">return</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:rgb(173, 219, 103)">`</span><span class="token template-string string" style="color:rgb(173, 219, 103)">Hello, my name is </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation keyword" style="color:rgb(127, 219, 202)">this</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">name</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(173, 219, 103)"> and I'm </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation keyword" style="color:rgb(127, 219, 202)">this</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">age</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(173, 219, 103)"> years old.</span><span class="token template-string template-punctuation string" style="color:rgb(173, 219, 103)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>and in Rust:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">struct</span><span class="token plain"> </span><span class="token type-definition class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">String</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">u32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">impl</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Method to greet the user</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(130, 170, 255)">greet</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(127, 219, 202)">&amp;</span><span class="token keyword" style="color:rgb(127, 219, 202)">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token macro property" style="color:rgb(128, 203, 196)">format!</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(173, 219, 103)">"Hello, my name is {} and I'm {} years old."</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="creating-an-instance">Creating an Instance<a href="https://www.thedevoyage.com/blog/rust_x_js-class_vs_struct#creating-an-instance" class="hash-link" aria-label="Direct link to Creating an Instance" title="Direct link to Creating an Instance">​</a></h3>
<p>Once a struct is defined, we can create an instance of the user in each respective language.</p>
<p>In JS:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(173, 219, 103)">"Bongo"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">11</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token console class-name" style="color:rgb(255, 203, 139)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">log</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">greet</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Invoke the method.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In Rust:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">let</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Bongo"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">to_string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">11</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token macro property" style="color:rgb(128, 203, 196)">println!</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(173, 219, 103)">"{}"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">greet</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>With Rust, a common pattern would be to manually simulate the <code>constructor</code> functionality. In addition
to adding the <code>greet</code> function from above, we will implement a <code>new</code> function.</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">impl</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// ... greet method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">pub</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(130, 170, 255)">new</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">String</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">u32</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token keyword" style="color:rgb(127, 219, 202)">let</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">            name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">            age</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        user</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">let</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token punctuation" style="color:rgb(199, 146, 234)">::</span><span class="token function" style="color:rgb(130, 170, 255)">new</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(173, 219, 103)">"Bongo"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">to_string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">11</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token macro property" style="color:rgb(128, 203, 196)">println!</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(173, 219, 103)">"{}"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">greet</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="extending-and-traits">Extending and Traits<a href="https://www.thedevoyage.com/blog/rust_x_js-class_vs_struct#extending-and-traits" class="hash-link" aria-label="Direct link to Extending and Traits" title="Direct link to Extending and Traits">​</a></h3>
<p>While methods or implementations generally add functionality that is specific to the target class,
there are also ways to add shared functionality to the target struct/class.</p>
<p>Extending a class in JavaScripts adds functionality to the target class provided by a parent
or <code>super</code> class.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// A parent class that provides some functionality</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Group</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">constructor</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token spread operator" style="color:rgb(127, 219, 202)">...</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">async</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">addToGroup</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Add the user to the group!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Our user class receiving the provided functionality</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">extends</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Group</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">constructor</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// ...rest of constructor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token keyword" style="color:rgb(127, 219, 202)">super</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Get the provided functionality</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token function" style="color:rgb(130, 170, 255)">add</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token keyword" style="color:rgb(127, 219, 202)">this</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">addToGroup</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Call the method from the MySql class.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">//...rest of class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(173, 219, 103)">"Bongo"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">11</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword control-flow" style="color:rgb(127, 219, 202)">await</span><span class="token plain"> user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">add</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In Rust, we can see similar execution using Traits.</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Define a trait named Group</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">trait</span><span class="token plain"> </span><span class="token type-definition class-name" style="color:rgb(255, 203, 139)">Group</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(130, 170, 255)">add_to_group</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(127, 219, 202)">&amp;</span><span class="token keyword" style="color:rgb(127, 219, 202)">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Define a struct representing a user</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">struct</span><span class="token plain"> </span><span class="token type-definition class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">String</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">u32</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">impl</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Constructor function to create a new User instance</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(130, 170, 255)">new</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">String</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> age</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">u32</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token keyword" style="color:rgb(127, 219, 202)">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> age </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">impl</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Group</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">for</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token keyword" style="color:rgb(127, 219, 202)">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(130, 170, 255)">add_to_group</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(127, 219, 202)">&amp;</span><span class="token keyword" style="color:rgb(127, 219, 202)">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Add the user to the group!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Now use the new functionality provided by the Group trait!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">let</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">User</span><span class="token punctuation" style="color:rgb(199, 146, 234)">::</span><span class="token function" style="color:rgb(130, 170, 255)">new</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(173, 219, 103)">"Bongo"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">11</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">add_to_group</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-it-up">Wrapping it Up<a href="https://www.thedevoyage.com/blog/rust_x_js-class_vs_struct#wrapping-it-up" class="hash-link" aria-label="Direct link to Wrapping it Up" title="Direct link to Wrapping it Up">​</a></h2>
<p>While both Rust Structs and JavaScript Classes share similarities, they also can be used in different
capacities. Further reading that might interest you is how a Struct may also be a tuple or
how method overloading is achieved. There is much to learn and compare!</p>
<p>Nonetheless, I hope you had some fun comparing these concepts! To me, it's always interesting finding
and understanding the patterns that persist between the barrier of multiple domains such as
the chosen programming language. We really are all doing the same thing, regardless of language!</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="rust-x-js" term="rust-x-js"/>
        <category label="rust" term="rust"/>
        <category label="javascript" term="javascript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unlocking the Rusty Treasure Trove: Crafting Next-Gen APIs with 6 Powerhouse Crates!]]></title>
        <id>https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust</id>
        <link href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust"/>
        <updated>2024-03-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Discover the secret to supercharging your API development with Rust! Dive into a curated selection of powerful crates, from GraphQL wizards to authentication gurus, and revolutionize your web projects today. Explore the future of backend development with seamless integration, enhanced security, and unparalleled performance. Start building your next-gen APIs now!]]></summary>
        <content type="html"><![CDATA[<p>Welcome Voyager and thanks for joining!</p>
<p>Today, let's dive into the exciting world of using Rust for your next back end GraphQL Project! I'm super pumped to introduce you to some fantastic crates that can truly level up your development journey.</p>
<p>Isn't it awesome how Rust has been buzzing lately? And guess what? The excitement isn't dying down anytime soon! As someone who thrives on learning new languages and embracing their quirks, I can tell you firsthand that Rust is a ride worth hopping on, even if it's just for a quick spin. Exploring different languages not only expands your toolkit but also enriches your overall coding skills.</p>
<p>So, are you ready to embark on this Rust adventure with me? Let's have a blast exploring some top-notch crates that'll help you whip up a stellar GraphQL API in Rust! 🚀</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1711210988/5-crates-for-graphql-in-rust_bieo2m.png" alt="feature image" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-choose-rust">Why Choose Rust?<a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#why-choose-rust" class="hash-link" aria-label="Direct link to Why Choose Rust?" title="Direct link to Why Choose Rust?">​</a></h2>
<p>If you're wondering why you should consider Rust as your go-to language for your next project, well, you're in for a treat! Rust isn't just a passing fad in today's tech landscape – it's here to stay, and for good reasons!</p>
<p>Let's dive into why Rust might be the perfect fit for your next big endeavor:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-its-type-safe">1. It's Type Safe.<a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#1-its-type-safe" class="hash-link" aria-label="Direct link to 1. It's Type Safe." title="Direct link to 1. It's Type Safe.">​</a></h3>
<p>One of the standout features of Rust is its robust type system. With Rust, you can bid farewell to those pesky runtime errors caused by type mismatches. By catching these errors at compile time, Rust ensures your code is rock-solid from the get-go.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-efficient-memory-usage">2. Efficient Memory Usage.<a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#2-efficient-memory-usage" class="hash-link" aria-label="Direct link to 2. Efficient Memory Usage." title="Direct link to 2. Efficient Memory Usage.">​</a></h3>
<p>Memory management is a breeze with Rust, thanks to its ownership model. Say goodbye to memory leaks and dangling pointers – Rust's compiler guarantees memory safety without the need for garbage collection.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-blazing-fast-performance">3. Blazing Fast Performance<a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#3-blazing-fast-performance" class="hash-link" aria-label="Direct link to 3. Blazing Fast Performance" title="Direct link to 3. Blazing Fast Performance">​</a></h3>
<p>Need for speed? Rust has got you covered! Whether you're building a high-performance web server or crunching numbers for data analysis, Rust's zero-cost abstractions and efficient concurrency model ensure your code runs like a well-oiled machine.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-less-debugging-and-less-human-error">4. Less Debugging and Less Human Error<a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#4-less-debugging-and-less-human-error" class="hash-link" aria-label="Direct link to 4. Less Debugging and Less Human Error" title="Direct link to 4. Less Debugging and Less Human Error">​</a></h3>
<p>Forget about spending hours debugging cryptic runtime errors. Rust's fearless concurrency and strict compiler catch common mistakes that often slip through the cracks in other languages, saving you time and headaches in the long run.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-thriving-ecosystem">5. Thriving Ecosystem<a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#5-thriving-ecosystem" class="hash-link" aria-label="Direct link to 5. Thriving Ecosystem" title="Direct link to 5. Thriving Ecosystem">​</a></h3>
<p>The Rust community is vibrant and growing by the day. From cutting-edge libraries to helpful tools, Rust's ecosystem offers everything you need to tackle even the most ambitious projects. And hey, who wouldn't want to be part of such an exciting movement?</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-integraded-type-system-testing-and-documentation">6. Integraded Type System, Testing, and Documentation<a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#6-integraded-type-system-testing-and-documentation" class="hash-link" aria-label="Direct link to 6. Integraded Type System, Testing, and Documentation" title="Direct link to 6. Integraded Type System, Testing, and Documentation">​</a></h3>
<p>Rust doesn't just stop at the language itself – it comes bundled with a suite of powerful tools for testing, documentation generation, and more. With Rust, you can kiss goodbye to juggling multiple third-party tools – everything you need is right at your fingertips.</p>
<p>So there you have it – just a few of the many reasons why Rust might be the perfect choice for your next back end project. But hey, don't just take my word for it – dive in and experience the Rust magic for yourself! Let's take a look at some of these "powerhouse" crates
that make working in rust a bit easier!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-crates">The Crates<a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#the-crates" class="hash-link" aria-label="Direct link to The Crates" title="Direct link to The Crates">​</a></h2>
<p>Let's delve into some exciting crate options that'll kickstart your project and have you up and running in no time!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="async-graphql---async_graphql">Async GraphQL - <a href="https://docs.rs/async-graphql/latest/async_graphql/" target="_blank" rel="noopener noreferrer">async_graphql</a><a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#async-graphql---async_graphql" class="hash-link" aria-label="Direct link to async-graphql---async_graphql" title="Direct link to async-graphql---async_graphql">​</a></h3>
<p>If you're diving into the world of GraphQL with Rust, look no further than the async_graphql crate. This powerhouse of a library not only covers your basic GraphQL needs but also packs a punch with advanced features to streamline your development process.</p>
<p><strong>Federation 2 Compliance</strong></p>
<p>One of the standout features of async_graphql is its Federation 2 compliance. What does that mean for you? Well, it opens up a world of possibilities, particularly if you're working with Apollo federated microservice architectures. With async_graphql, you can seamlessly integrate your services into a federated ecosystem, unlocking unparalleled scalability and flexibility.</p>
<p><strong>Built-in Interfaces for Common Tasks</strong></p>
<p>Handling common API-related tasks like validation and access control can be a breeze with async_graphql. This crate provides intuitive interfaces that streamline these processes, allowing you to focus on building robust and secure APIs without getting bogged down in the nitty-gritty details.</p>
<p><strong>Unlocking the "Secret" Module: Dynamic Schemas</strong></p>
<p>Here's where things get really interesting. While the documented proc-macro functionality is fantastic and a great starting point for most projects, there's a hidden gem within async_graphql that's worth exploring: dynamic schemas. Although not extensively documented, dynamic schemas offer a level of flexibility and control over schema generation that can be invaluable, especially for projects with complex requirements or a need for automated code generation.</p>
<p>Whether you're just getting started with GraphQL or you're a seasoned pro looking to level up your game, async_graphql has something for everyone.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="warp-web-server---warp">Warp Web Server - <a href="https://docs.rs/warp/latest/warp/" target="_blank" rel="noopener noreferrer">warp</a><a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#warp-web-server---warp" class="hash-link" aria-label="Direct link to warp-web-server---warp" title="Direct link to warp-web-server---warp">​</a></h3>
<p>When it comes to handling the networking logic for your Rust back end, look no further than the warp crate. Just like in other languages, you'll need a reliable web server, and warp makes integrating one into your application a breeze.</p>
<p><strong>Filter-Based Composition</strong></p>
<p>What sets warp apart is its innovative "Filter" based composition. This approach makes it incredibly simple to define and compose complex routes and handlers, allowing you to build powerful APIs with minimal boilerplate code. And when it comes to integrating with async_graphql, warp truly shines, particularly in resolving federated graphs. With warp, you can effortlessly combine the power of GraphQL with the flexibility of Warp's filter-based routing, unlocking a world of possibilities for your back end development.</p>
<p>So whether you're building a simple REST API or a sophisticated GraphQL server, warp is your go-to solution for fast, reliable, and flexible networking in Rust. Give it a try and see the difference it can make in your development workflow!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="actix-web---actix_web">Actix Web - <a href="https://docs.rs/actix-web/latest/actix_web/" target="_blank" rel="noopener noreferrer">actix_web</a><a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#actix-web---actix_web" class="hash-link" aria-label="Direct link to actix-web---actix_web" title="Direct link to actix-web---actix_web">​</a></h3>
<p>Looking for a web server in Rust that's both powerful and familiar? Enter actix_web. This popular option offers a syntax reminiscent of ExpressJS, making it a breeze for developers familiar with web development in other languages to jump right in.</p>
<p><strong>ExpressJS-Like Syntax</strong></p>
<p>If you've worked with ExpressJS before, you'll feel right at home with actix_web. Its intuitive syntax and familiar patterns make building APIs a seamless experience, allowing you to focus on crafting robust and efficient endpoints without getting bogged down in the details of the framework.</p>
<p><strong>Modularization Made Easy</strong></p>
<p>One of the standout features of actix_web is its ease of modularization. Whether you're breaking down your application into reusable modules or creating dynamic testing environments, actix_web provides the tools you need to streamline your development workflow. In particular, spinning up a testing module that dynamically sets up the server is a breeze with actix_web, allowing you to write tests that are both comprehensive and efficient.</p>
<p><strong>Versatile and Scalable</strong></p>
<p>From simple REST APIs to complex microservices architectures, actix_web scales with your project's needs. Its lightweight design and asynchronous foundation ensure optimal performance, even under heavy load. And with built-in support for features like WebSockets and middleware, actix_web empowers you to build cutting-edge applications with ease.</p>
<p>Give it a spin and see why it's a favorite among developers worldwide!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sql-database-client---sqlx">SQL Database Client - <a href="https://docs.rs/sqlx/latest/sqlx/" target="_blank" rel="noopener noreferrer">sqlx</a><a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#sql-database-client---sqlx" class="hash-link" aria-label="Direct link to sql-database-client---sqlx" title="Direct link to sql-database-client---sqlx">​</a></h3>
<p>If you're like me and have found yourself drawn to ORMs in your development journey, allow me to introduce you to a game-changer: sqlx. As a TypeScript developer who's accustomed to the convenience of tools like Mongoose or Sequelize, I understand the allure of ORMs – until you hit those inevitable limitations as your application grows.</p>
<p><strong>Embracing the Power of SQL</strong></p>
<p>Enter sqlx, a library that's about to revolutionize the way you interact with databases. Say goodbye to the constraints of ORMs and hello to the raw power of Structured Query Language (SQL). With sqlx, you have full control over your SQL queries, allowing you to craft efficient and optimized database interactions tailored to your application's specific needs.</p>
<p><strong>Type-Safe SQL Queries</strong></p>
<p>But here's where sqlx truly shines: type safety. No more runtime errors or debugging sessions caused by typos in your SQL strings – sqlx performs SQL type checking against your database at build time, ensuring that your queries are error-free before they ever hit production. This means cleaner, more robust code and fewer headaches for you and your team.</p>
<p><strong>Abandoning the ORM – For Good Reason</strong></p>
<p>After diving into sqlx, you may find yourself reevaluating your reliance on ORMs. Why settle for the limitations and overhead of an ORM when you can harness the full power of SQL with sqlx? Whether you're building a small-scale application or a large-scale enterprise system, sqlx empowers you to interact with your database with confidence and efficiency.</p>
<p>Give sqlx a try, and experience the freedom and flexibility of SQL without sacrificing the safety and convenience you've come to expect from modern development tools. Trust me – you won't look back.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mongo-database-client---mongodb">Mongo Database Client - <a href="https://docs.rs/mongodb/latest/mongodb/" target="_blank" rel="noopener noreferrer">mongodb</a><a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#mongo-database-client---mongodb" class="hash-link" aria-label="Direct link to mongo-database-client---mongodb" title="Direct link to mongo-database-client---mongodb">​</a></h3>
<p>If you're looking to connect your Rust application to a MongoDB database seamlessly, look no further than the mongodb client. This library offers a straightforward and hassle-free way to manage your MongoDB connections without any unnecessary bells and whistles.</p>
<p><strong>Simplified Database Interaction</strong></p>
<p>With the mongodb client, creating and managing connections to your MongoDB database is a breeze. Whether you're performing basic CRUD operations or executing more complex queries, this library provides a clean and intuitive interface that gets the job done without any fuss.</p>
<p><strong>No Frills, Just Functionality</strong></p>
<p>While some libraries may boast flashy features or elaborate APIs, mongodb takes a different approach – it focuses on doing one thing, and doing it well. There are no frills or thrills here, just solid functionality that you can rely on to handle your MongoDB interactions with ease.</p>
<p><strong>Dependable Performance</strong></p>
<p>Despite its simplicity, the mongodb client doesn't compromise on performance. Whether you're working with a small-scale application or a large-scale enterprise system, you can trust mongodb to deliver consistent and reliable performance, ensuring that your application runs smoothly even under heavy load.</p>
<p>It may not have all the bells and whistles, but it gets the job done – and isn't that what really matters in the end?</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="passkeys-integration---webauthn-rs">Passkeys Integration - <a href="https://docs.rs/webauthn-rs/latest/webauthn_rs/" target="_blank" rel="noopener noreferrer">webauthn-rs</a><a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#passkeys-integration---webauthn-rs" class="hash-link" aria-label="Direct link to passkeys-integration---webauthn-rs" title="Direct link to passkeys-integration---webauthn-rs">​</a></h3>
<p>Looking to enhance the security and user experience of your authentication system? Meet webauthn-rs, a powerful crate that simplifies the integration of passwordless authentication into your Rust application.</p>
<p><strong>Embracing Passkeys for Enhanced Security</strong></p>
<p>Passkeys are revolutionizing the way we approach authentication, offering users a convenient and secure alternative to traditional password-based systems. With webauthn-rs, you can seamlessly integrate passkey-based authentication into your application, eliminating the need for users to remember or set passwords while bolstering security and enhancing the overall user experience.</p>
<p><strong>Quick and Easy Integration</strong></p>
<p>One of the standout features of webauthn-rs is its ease of integration. Whether you're building a new application from scratch or adding passkey-based authentication to an existing project, webauthn-rs makes the process quick and painless. With straightforward APIs and comprehensive documentation, you'll be up and running with passkey authentication in no time.</p>
<p><strong>Seamless Frontend Integration</strong></p>
<p>But webauthn-rs doesn't stop at the back end – it also plays well with frontend libraries to streamline the authentication flow. Whether you're using React, Vue.js, or another frontend framework, webauthn-rs can easily be paired with frontend libraries to create a seamless and intuitive authentication experience for your users.</p>
<p>So if you're ready to take your authentication system to the next level with passkey-based authentication, give webauthn-rs a try. With its simplicity, security, and sleek user interface, it's sure to be a game-changer for your application.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="persisting-authentication---biscuit_auth">Persisting Authentication - <a href="https://docs.rs/biscuit-auth/latest/biscuit_auth/" target="_blank" rel="noopener noreferrer">biscuit_auth</a><a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#persisting-authentication---biscuit_auth" class="hash-link" aria-label="Direct link to persisting-authentication---biscuit_auth" title="Direct link to persisting-authentication---biscuit_auth">​</a></h3>
<p>If you're familiar with JWTs and looking to take your authentication system to the next level, look no further than biscuit_auth. This powerful crate builds upon the foundation of JWTs, offering offline attenuation and enhanced validation capabilities for a more secure authentication experience.</p>
<p><strong>Elevating JWTs with Offline Attenuation</strong></p>
<p>While JWTs provide a convenient way to validate a user's identity, biscuit_auth takes them a step further with offline attenuation. This means that even if a JWT is compromised, its scope can be limited to prevent unauthorized access, enhancing the security of your authentication system.</p>
<p><strong>Seamless Integration into Your Auth Flow</strong></p>
<p>Integrating biscuit_auth into your Rust application's authentication flow is a breeze. With intuitive APIs and comprehensive documentation, you can quickly incorporate offline attenuation and validation into your existing authentication system, bolstering security without sacrificing usability.</p>
<p><strong>Node Wrapper for Cross-Platform Compatibility</strong></p>
<p>But biscuit_auth doesn't stop at Rust – it also provides a node wrapper, allowing you to consume these tokens in a Node.js or web environment with ease. This cross-platform compatibility ensures that you can leverage the power of biscuit_auth regardless of your preferred development stack.</p>
<p>So if you're ready to enhance the security and integrity of your authentication system with offline attenuation and validation, give biscuit_auth a try. With its seamless integration, cross-platform compatibility, and enhanced security features, it's sure to be a valuable addition to your Rust application.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="happy-building">Happy Building<a href="https://www.thedevoyage.com/blog/6-creates-for-graphql-in-rust#happy-building" class="hash-link" aria-label="Direct link to Happy Building" title="Direct link to Happy Building">​</a></h2>
<p>And there you have it! I hope sharing some of my favorite crates has sparked your curiosity and inspired you to explore the world of API design with Rust. As developers, we have the opportunity to immerse ourselves in any community we choose, and I can assure you that the Rust community is one you won't want to miss out on!</p>
<p>Whether you're a seasoned Rustacean or just dipping your toes into the language for the first time, exploring these crates is sure to expand your horizons and strengthen your skills. Along the way, you'll discover what you love and what you might not love so much – and that's all part of the journey towards becoming a better developer.</p>
<p>If you're itching to get started with GraphQL and want to spin up a GraphQL API in just a few minutes, I highly recommend checking out a tool I have been working on for over a year called <a href="https://www.thedevoyage.com/subgraph/intro" target="_blank" rel="noopener noreferrer">Subgraph</a>. This powerful tool allows you to define a configuration that instantly creates a GraphQL API around your database, saving you time and effort in the development process.</p>
<p>So what are you waiting for? Dive in, explore, and happy building!</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
        <category label="rust" term="rust"/>
        <category label="api" term="api"/>
        <category label="backend" term="backend"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subgraph - A Rust Powered GraphQL API Generator]]></title>
        <id>https://www.thedevoyage.com/blog/subgraph-v0.0.14-scalable-graphql-api</id>
        <link href="https://www.thedevoyage.com/blog/subgraph-v0.0.14-scalable-graphql-api"/>
        <updated>2024-03-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Spin up scalable and flexible GraphQL APIs with Subgraph, a Rust Based GraphQL Engine.]]></summary>
        <content type="html"><![CDATA[<p>Welcome Voyager.</p>
<p>Thank you for joining! Today, we're delving into Subgraph, a Rust-based GraphQL tool designed to simplify the creation of scalable backends.</p>
<p>Building applications can often feel overwhelming, especially when tackling server-side logic that requires scalability,
security, and flexibility. Subgraph aims to ease this challenge by emphasizing data ownership and DevOps control.</p>
<p>With Subgraph, you retain control of your data and servers, allowing you to deploy according to your preferences.
It serves as a vital layer in the stack, facilitating interaction with your rows, documents, tables, and more. Instead of
focusing on architecting scalable backends, Subgraph enables you to dedicate your time to building interfaces around logically organized data.</p>
<p>The latest release, Subgraph v0.0.14, introduces exciting new features that bring this tool closer to being a comprehensive solution for your next application.</p>
<p>I'm thrilled to have you join us on this journey! It's important to note that Subgraph is currently in a pre-alpha release state and is not yet suitable for critical production environments. However, if you create something innovative, I'd love to hear about your experience!</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1711036382/subgraphv14_jnpclv.png" alt="feature image" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-a-scalable-api-with-subgraph">Building a Scalable API with Subgraph<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.14-scalable-graphql-api#building-a-scalable-api-with-subgraph" class="hash-link" aria-label="Direct link to Building a Scalable API with Subgraph" title="Direct link to Building a Scalable API with Subgraph">​</a></h2>
<p>The objective is clear: let's construct a scalable web server to deliver data for a user interface. But what exactly defines "scalability"?</p>
<p>Creating a web server might seem straightforward, but ensuring it remains adaptable and maintainable over time presents its own set of challenges. Scalability encompasses more than just horizontal and vertical deployments; it extends to various aspects of application design and architecture.</p>
<p>Key considerations for achieving scalability include:</p>
<ul>
<li><strong>Organization of Data</strong>: Structuring data and its relationships in a logical and reusable manner.</li>
<li><strong>Distributed Access Controls</strong>: Establishing rules governing who can access specific data points across the entire API, minimizing redundancy.</li>
<li><strong>Interacting with Data</strong>: Designing methods to request, filter, and receive data from the API in a consistent and understandable format.</li>
</ul>
<p>In this article, we'll focus on data organization and interaction. However, for a comprehensive understanding of how Subgraph can aid in distributed access control and other API-related topics, I encourage you to explore the <a href="https://www.thedevoyage.com/subgraph/intro" target="_blank" rel="noopener noreferrer">Subgraph documentation</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="organizing-your-data">Organizing Your Data<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.14-scalable-graphql-api#organizing-your-data" class="hash-link" aria-label="Direct link to Organizing Your Data" title="Direct link to Organizing Your Data">​</a></h2>
<p>If you want to follow along in your own IDE, check out the <a href="https://www.thedevoyage.com/subgraph/quickstart" target="_blank" rel="noopener noreferrer">Quick Start</a> to learn how to download Subgraph. Below, I will skip ahead to step two, writing
the configuration file so that we can see how Subgraph helps you to organize data logically.</p>
<p>Subgraph's magic stems from a configuration file that you manage. There is no true code or build process - only a simple config.</p>
<p><strong>In <code>myconfig.toml</code></strong></p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Define the service</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"parks"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">port</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">3030</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Tell subgraph where your data lives.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Subgraph supports combining multiple data sources together.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Built in clients include Mongo, SqLite, MySql, Postgres, and HTTP (external APIs).</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources.SQL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"my_sql_parks_db"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">uri</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"sqlite:/home/mypath/Desktop/DEV/dbs/my_sqlite_database.db"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">dialect</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"SQLITE"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># An entity is a table(sql) or collection(mongo) in your database.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Defining an entity automatically creates CRU(d) methods to consume.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"park"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">fields</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"id"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"name"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"town"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"playground"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Boolean"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Start the server with a simple command in the terminal: <code>subgraph --config ./myconfig.toml</code> and navigate to the specified port
to explore using the built in GraphQL SandBox - <code>http://localhost:3030</code>.</p>
<p>Once defined, Subgraph creates resolvers so that you can start interacting with the database through the API.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="interaction-with-data">Interaction with Data<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.14-scalable-graphql-api#interaction-with-data" class="hash-link" aria-label="Direct link to Interaction with Data" title="Direct link to Interaction with Data">​</a></h2>
<p>For each entity, Subgraph creates five different resolvers which allow you to interact with the API. Each generated resolver
is logically named based on the entity and the action.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="resolvers">Resolvers<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.14-scalable-graphql-api#resolvers" class="hash-link" aria-label="Direct link to Resolvers" title="Direct link to Resolvers">​</a></h3>
<ul>
<li>Find One - <code>get_park</code></li>
<li>Find Many - <code>get_parks</code></li>
<li>Create One - <code>create_park</code></li>
<li>Update One* - <code>update_park</code></li>
<li>Update Many - <code>update_parks</code></li>
</ul>
<p>*The update one resolver is only available in dialects that nativly support <code>LIMIT 1</code> clauses.</p>
<p>Using the generated resolvers, you can start to perform queries and mutations from the sandbox or your user interface.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="filtering-with-resolver-inputs">Filtering with Resolver Inputs<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.14-scalable-graphql-api#filtering-with-resolver-inputs" class="hash-link" aria-label="Direct link to Filtering with Resolver Inputs" title="Direct link to Filtering with Resolver Inputs">​</a></h3>
<p>Each resolver automatically generates inputs based on the entity field definitions, allowing you to find and filter results based on any
criteria that the entity specifies. Inputs are logically named with the same standards as the resolver.</p>
<ol>
<li><em>Find a park with the name of "Clyde Warren Park".</em></li>
</ol>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">query</span><span class="token plain"> </span><span class="token definition-query function" style="color:rgb(130, 170, 255)">GetPark</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token property-query">get_park</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">get_park_input</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">query</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Clyde Warren Park"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Subgraph provides several filters that allow you to easily find the data you need such as Regex Filters and Conditional (Less Than, Greater Than) Filters.</p>
<ol start="2">
<li><em>Find a park with a name LIKE "Clyde...."</em></li>
</ol>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">query</span><span class="token plain"> </span><span class="token definition-query function" style="color:rgb(130, 170, 255)">GetPark</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token property-query">get_park</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">get_park_input</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">query</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">LIKE</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Clyde%"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li><em>Find many parks with an <code>id</code> that is Greater Than 20.</em></li>
</ol>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">query</span><span class="token plain"> </span><span class="token definition-query function" style="color:rgb(130, 170, 255)">GetParks</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token property-query">get_parks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">get_parks_input</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">query</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">GT</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">20</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Additionally, mixing and matching filters becomes possible with <code>OR</code> and <code>AND</code> operators which recurisvly utilize the generated inputs.</p>
<ol start="4">
<li><em>Find many parks that have an <code>id</code> that is Greater Than 20 and Less Than 40</em></li>
</ol>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">query</span><span class="token plain"> </span><span class="token definition-query function" style="color:rgb(130, 170, 255)">GetParks</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token property-query">get_parks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">get_parks_input</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">query</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">AND</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">GT</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">20</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">LT</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">40</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Large data becomes easy to mananage with database level limit based pagination baked into the generated query.</p>
<ol start="5">
<li><em>Find many parks that have an <code>id</code> that is Greater Than 20 and only return the second page.</em></li>
</ol>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">query</span><span class="token plain"> </span><span class="token definition-query function" style="color:rgb(130, 170, 255)">GetParks</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token property-query">get_parks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">get_parks_input</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">query</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">AND</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">GT</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">20</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">LT</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">40</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">opts</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">per_page</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">10</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">page</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="subgraph-v0014">Subgraph v0.0.14<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.14-scalable-graphql-api#subgraph-v0014" class="hash-link" aria-label="Direct link to Subgraph v0.0.14" title="Direct link to Subgraph v0.0.14">​</a></h2>
<p>Thank you for taking a moment to explore some of the new features in v0.0.14 of Subgraph! This tool simplifies the process of describing the data within your database, creating an intuitive and flexible interface for interacting with that data.</p>
<p>With just over a year of development under its belt, this project has made significant strides in developing tooling that enables easy and standardized API generation.</p>
<p>If you're excited about the direction of the project, please consider showing your support by giving the <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">repository</a> a Star!</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;align-items:center"><span>Want to support `@the-devoyage/<!-- -->subgraph<!-- -->`?</span><a href="https://thedevoyage.gumroad.com/l/subgraph" target="_blank" rel="noopener noreferrer"><button class="button button--primary">Early Alpha Release</button></a></div>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create an Instant Passkey/Auth Server with Subgraph]]></title>
        <id>https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph</id>
        <link href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph"/>
        <updated>2024-01-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn about and incorporate passkeys into your website in minutes with Subgraph.]]></summary>
        <content type="html"><![CDATA[<p>Welcome, Voyager!</p>
<p>I am delighted to present a streamlined approach for integrating webauthn user authentication and authorization into your upcoming project.</p>
<p>In essence, we are implementing a passwordless registration and login system, offering a seamless authentication process for your users while fortifying the security of your servers.</p>
<p>Join us as we delve into the fundamentals of passkeys and explore the utilization of Subgraph as an Authentication Server for your current or prospective applications.</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1704334411/Subgraph_as_Auth_ymnowz.png" alt="subgraph as passkey feature image" class="img_ev3q"></p>
<p>Hey... quick note - Subgraph is in a Pre-Alpha Release State! Enjoy it, build with it, and reach out with your suggested improvements! We are happy to help and listen. Lastly - Supporting working like this is also much appreciated~!</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;align-items:center"><span>Want to support `@the-devoyage/<!-- -->subgraph<!-- -->`?</span><a href="https://thedevoyage.gumroad.com/l/subgraph" target="_blank" rel="noopener noreferrer"><button class="button button--primary">Early Alpha Release</button></a></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-passkeys-work">How Passkeys Work<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#how-passkeys-work" class="hash-link" aria-label="Direct link to How Passkeys Work" title="Direct link to How Passkeys Work">​</a></h2>
<p>Understanding the basic flow of passkey registration and authentication is crucial to the adoption of webauthn for any web application. Let's explore the typical passkey flow for these two scenarios. Below, I'll provide a
concise explanation - however, it is recommended to refer to resources such as <a href="https://webauthn.guide/" target="_blank" rel="noopener noreferrer">webauthn.guide</a> for more in-depth information.</p>
<p>Actions like registration and authentication typically involve two network requests to complete. This is due to the verification process between the external server and the client-side application. The majority of
the intricate work is managed by the browser's WebAuthN API, streamlining the communication between the applications.</p>
<p>Want to see passwordless in action? <a href="https://dev.triceratask.com/" target="_blank" rel="noopener noreferrer">Triceratask</a> is an application developed around Subgraph and the auth process demonstrated below! You can sign up and log in without a password.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="registration-with-passkeys">Registration with Passkeys<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#registration-with-passkeys" class="hash-link" aria-label="Direct link to Registration with Passkeys" title="Direct link to Registration with Passkeys">​</a></h3>
<ol>
<li>
<p>The user initiates the registration process by providing a simple "identifier," which could be an email, phone number, or username. Notably, there's no requirement for a password, and users are not constrained by special characters or minimum length criteria. A single, unique identifier suffices. Straightforward, isn't it?</p>
</li>
<li>
<p>The server verifies whether the user is eligible for registration. If permitted, it responds to the client with a "challenge" that aligns the server's identity with the client's registration request.</p>
</li>
<li>
<p>The client application receives the challenge and leverages it to generate credentials. These credentials, however, are no ordinary passwords – they come in a pair, one private and one public. The client application concludes the registration process by providing the server with the public key for safekeeping, while retaining the private key.</p>
</li>
<li>
<p>The server acknowledges the successful registration, paving the way for a seamless login experience.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="authentication-with-passkeys">Authentication with Passkeys<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#authentication-with-passkeys" class="hash-link" aria-label="Direct link to Authentication with Passkeys" title="Direct link to Authentication with Passkeys">​</a></h3>
<ol>
<li>
<p>The user authenticates by furnishing the same identifier used during registration.</p>
</li>
<li>
<p>Subsequently, the server shares the public key with the client application.</p>
</li>
<li>
<p>Upon possessing a matching private key, the client application responds to the server with a signature of approval.</p>
</li>
<li>
<p>The server receives the success message, conducts a double-check to ensure the signature matches, and reciprocates with the pertinent details – typically in the form of an authentication token.</p>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="using-subgraph-as-an-auth-server">Using Subgraph as an Auth Server<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#using-subgraph-as-an-auth-server" class="hash-link" aria-label="Direct link to Using Subgraph as an Auth Server" title="Direct link to Using Subgraph as an Auth Server">​</a></h2>
<p>Today, our emphasis is on a swift and uncomplicated setup. Introducing Subgraph, a tool designed to expedite the creation of an immediate API for your data, including authentication and more!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="requirements">Requirements<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#requirements" class="hash-link" aria-label="Direct link to Requirements" title="Direct link to Requirements">​</a></h3>
<ol>
<li>
<p><strong>Mongo DB:</strong> Today's focus is on Passkeys, not the setup of a Mongo Database. I'll assume you have this already.</p>
</li>
<li>
<p><strong>Subgraph:</strong> A powerful tool to generate a GraphQL backend that seamlessly manages server-side webauthn and database logic. You can <a href="https://thedevoyage.gumroad.com/l/subgraph" target="_blank" rel="noopener noreferrer">purchase a license here</a> or explore the <a href="https://github.com/The-Devoyage/subgraph/tags" target="_blank" rel="noopener noreferrer">Releases Page</a> to download it for free.</p>
</li>
</ol>
<blockquote>
<p>Your support is sincerely appreciated! Subgraph is a tool that has demanded countless hours of development. If you find value in this tutorial or benefit from using Subgraph, consider purchasing a license to express your support for this project.</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="starting-the-auth-server">Starting The Auth Server<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#starting-the-auth-server" class="hash-link" aria-label="Direct link to Starting The Auth Server" title="Direct link to Starting The Auth Server">​</a></h3>
<p>While Subgraph can serve as a comprehensive API for all your data, today, our focus will be on utilizing it solely as an authentication server. Subgraph is remarkably user-friendly, requiring just a minute to set up and get started. The process involves creating a simple configuration file before launching the service.</p>
<ol>
<li>Create a file named <code>config.toml</code> in the root of your project and paste the following content:</li>
</ol>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"my_first_auth_service"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Define a Data Source to save user information.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources.Mongo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"my_mongo_db"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">uri</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"mongodb://user:pass@127.0.0.1:27017/my_db_name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">db</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"my_db_name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Optionally, generate a key pair and define a set private key.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># If omitted, subgraph generates a new private key each time it starts.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Generate a key pair by running `subgraph --generate-keypair`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># private_key = "paste_private_key_here"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Enable the auth service by providing the following options.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">requesting_party</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"localhost"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># The client side domain name.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">requesting_party_name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"demo_auth"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># The name of the application.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">requesting_party_origin</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"http://localhost:8000"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># The client side origin, must match domain name.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">data_source</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"users_data_source"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># The data source to interact with.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># An entity is a collection in Mongo or Table in SQL. Tell subgraph about the user entity.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"user"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">data_source</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">from</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"my_mongo_db"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">collection</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"subgraph_user"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">fields</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"_id"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"ObjectID"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">exclude_from_input</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(173, 219, 103)">"CreateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateMany"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"uuid"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UUID"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">exclude_from_input</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(173, 219, 103)">"CreateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateMany"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"identifier"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>Run the service with the subgraph cli.</li>
</ol>
<p>The execution might change depending on operating system or if you have placed the binary in the systems path.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">subgraph --config ./config.toml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-frontend-code">The Frontend Code<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#the-frontend-code" class="hash-link" aria-label="Direct link to The Frontend Code" title="Direct link to The Frontend Code">​</a></h2>
<p>Now that you have the auth server running, let's write some frontend example code.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="register-start">Register Start<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#register-start" class="hash-link" aria-label="Direct link to Register Start" title="Direct link to Register Start">​</a></h3>
<p>First, send the API an identifier of which you want to register using the register start mutation.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Create the mutation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">REGISTER_START</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> gql</span><span class="token template-string template-punctuation string" style="color:rgb(173, 219, 103)">`</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql">  </span><span class="token template-string graphql language-graphql keyword" style="color:rgb(127, 219, 202)">mutation</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql definition-mutation function" style="color:rgb(130, 170, 255)">RegisterStart</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string graphql language-graphql variable variable-input" style="color:rgb(214, 222, 235)">$identifier</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql scalar">String</span><span class="token template-string graphql language-graphql operator" style="color:rgb(127, 219, 202)">!</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql">    </span><span class="token template-string graphql language-graphql property-query property-mutation">register_start</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string graphql language-graphql attr-name" style="color:rgb(173, 219, 103);font-style:italic">identifier</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql variable variable-input" style="color:rgb(214, 222, 235)">$identifier</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql">  </span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql"></span><span class="token template-string template-punctuation string" style="color:rgb(173, 219, 103)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Execute the mutation using your client of choice.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> response </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">executeMutation</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">REGISTER_START</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  identifier</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"nickisyourfan"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The response object will contain signed options that the Browser's Passkey API can use
to continue the registration process.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="register-finish">Register Finish<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#register-finish" class="hash-link" aria-label="Direct link to Register Finish" title="Direct link to Register Finish">​</a></h3>
<p>Once the options are received, execute the <code>REGISTER_FINISH</code> mutation to finalize the registration process.</p>
<p>Before executing, build the credential using the options received from the <code>REGISTER_START</code> mutation along with
the browsers Passkey API.</p>
<p>Some properties, as shown below, are required to be of type Int Array. The example below uses the npm library <code>js-base64</code>
to assist with this process.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> Base64 </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"js-base64"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Create the mutation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">REGISTER_FINISH</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> gql</span><span class="token template-string template-punctuation string" style="color:rgb(173, 219, 103)">`</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql">  </span><span class="token template-string graphql language-graphql keyword" style="color:rgb(127, 219, 202)">mutation</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql definition-mutation function" style="color:rgb(130, 170, 255)">RegisterFinish</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string graphql language-graphql variable variable-input" style="color:rgb(214, 222, 235)">$identifier</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql scalar">String</span><span class="token template-string graphql language-graphql operator" style="color:rgb(127, 219, 202)">!</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql variable variable-input" style="color:rgb(214, 222, 235)">$public_key</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql scalar">String</span><span class="token template-string graphql language-graphql operator" style="color:rgb(127, 219, 202)">!</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql">    </span><span class="token template-string graphql language-graphql property-query property-mutation">register_finish</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string graphql language-graphql attr-name" style="color:rgb(173, 219, 103);font-style:italic">identifier</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql variable variable-input" style="color:rgb(214, 222, 235)">$identifier</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql attr-name" style="color:rgb(173, 219, 103);font-style:italic">public_key</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql variable variable-input" style="color:rgb(214, 222, 235)">$public_key</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql">  </span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql"></span><span class="token template-string template-punctuation string" style="color:rgb(173, 219, 103)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">//  Extract the credential creation options from the previous response.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> cco </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">register_start </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> CredentialCreationOptions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Build the credential using the browser's navigator credentials api.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> credential </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">await</span><span class="token plain"> navigator</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">credentials</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">create</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  publicKey</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token operator" style="color:rgb(127, 219, 202)">...</span><span class="token plain">cco</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">publicKey</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    challenge</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">toUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">cco</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">publicKey</span><span class="token operator" style="color:rgb(127, 219, 202)">?.</span><span class="token plain">challenge </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">unknown</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    user</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token operator" style="color:rgb(127, 219, 202)">...</span><span class="token plain">cco</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">publicKey</span><span class="token operator" style="color:rgb(127, 219, 202)">?.</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      id</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">toUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">cco</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">publicKey</span><span class="token operator" style="color:rgb(127, 219, 202)">?.</span><span class="token plain">user</span><span class="token operator" style="color:rgb(127, 219, 202)">?.</span><span class="token plain">id </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">unknown</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">credential </span><span class="token keyword" style="color:rgb(127, 219, 202)">instanceof</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">PublicKeyCredential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Create a credential to share with the API.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> jsonCredential </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    id</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    type</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">type</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    rawId</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">fromUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="color:rgb(127, 219, 202)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Uint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">rawId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    extensions</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">getClientExtensionResults</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    response</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      clientDataJSON</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">fromUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token keyword" style="color:rgb(127, 219, 202)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Uint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">clientDataJSON</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      attestationObject</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">fromUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token keyword" style="color:rgb(127, 219, 202)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Uint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">response </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">unknown</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> Record</span><span class="token operator" style="color:rgb(127, 219, 202)">&lt;</span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> ArrayBuffer</span><span class="token operator" style="color:rgb(127, 219, 202)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">attestationObject </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> ArrayBuffer</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Execute the operation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> success </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">executeMutation</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">REGISTER_START</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    identifier</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"nickisyourfan"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    public_key</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">JSON</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">stringify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">jsonCredential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Once a successful response is received, the user may proceed to "log in" using the Authentication Process.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="authenticate-start">Authenticate Start<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#authenticate-start" class="hash-link" aria-label="Direct link to Authenticate Start" title="Direct link to Authenticate Start">​</a></h3>
<p>First, initialize the process by sending a <code>authenticate_start</code> mutation.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Create the mutation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">export</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">AUTHENTICATE_START</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> gql</span><span class="token template-string template-punctuation string" style="color:rgb(173, 219, 103)">`</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql">  </span><span class="token template-string graphql language-graphql keyword" style="color:rgb(127, 219, 202)">mutation</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql definition-mutation function" style="color:rgb(130, 170, 255)">AuthenticateStart</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string graphql language-graphql variable variable-input" style="color:rgb(214, 222, 235)">$identifier</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql scalar">String</span><span class="token template-string graphql language-graphql operator" style="color:rgb(127, 219, 202)">!</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql">    </span><span class="token template-string graphql language-graphql property-query property-mutation">authenticate_start</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string graphql language-graphql attr-name" style="color:rgb(173, 219, 103);font-style:italic">identifier</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token template-string graphql language-graphql"> </span><span class="token template-string graphql language-graphql variable variable-input" style="color:rgb(214, 222, 235)">$identifier</span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql">  </span><span class="token template-string graphql language-graphql punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string graphql language-graphql"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token template-string graphql language-graphql"></span><span class="token template-string template-punctuation string" style="color:rgb(173, 219, 103)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Execute the mutation using your client of choice.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> response </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">executeMutation</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">REGISTER_START</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> identifier </span><span class="token string" style="color:rgb(173, 219, 103)">"nickisyourfan"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="authenticate-finish">Authenticate Finish<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#authenticate-finish" class="hash-link" aria-label="Direct link to Authenticate Finish" title="Direct link to Authenticate Finish">​</a></h3>
<p>Use the options in the response to create a credential that is used to identify the user in the next request.</p>
<div class="language-ts codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ts codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> credentialRequestOptions </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">authenticate_start </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">unknown</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> CredentialRequestOptions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Create the credential using the browser's navigator api.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> credential </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">await</span><span class="token plain"> navigator</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">credentials</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  publicKey</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token operator" style="color:rgb(127, 219, 202)">...</span><span class="token plain">credentialRequestOptions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">publicKey</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    challenge</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">toUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">credentialRequestOptions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">publicKey</span><span class="token operator" style="color:rgb(127, 219, 202)">?.</span><span class="token plain">challenge </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">unknown</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    allowCredentials</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> credentialRequestOptions</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">publicKey</span><span class="token operator" style="color:rgb(127, 219, 202)">?.</span><span class="token plain">allowCredentials</span><span class="token operator" style="color:rgb(127, 219, 202)">?.</span><span class="token function" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">c</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token operator" style="color:rgb(127, 219, 202)">...</span><span class="token plain">c</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        id</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">toUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">c</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">id </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">unknown</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">credential </span><span class="token keyword" style="color:rgb(127, 219, 202)">instanceof</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">PublicKeyCredential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Get the response from the credential.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> response </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">response </span><span class="token keyword" style="color:rgb(127, 219, 202)">as</span><span class="token plain"> AuthenticatorAssertionResponse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Build a serializable credential to send to the API.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> jsonCredential </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    id</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    type</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">type</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    rawId</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">fromUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="color:rgb(127, 219, 202)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Uint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">rawId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    extensions</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> credential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">getClientExtensionResults</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    response</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      authenticatorData</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">fromUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token keyword" style="color:rgb(127, 219, 202)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Uint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">authenticatorData</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      clientDataJSON</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">fromUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token keyword" style="color:rgb(127, 219, 202)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Uint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">clientDataJSON</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      signature</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> Base64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">fromUint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token keyword" style="color:rgb(127, 219, 202)">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Uint8Array</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">signature</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">        </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic">// Execute the operation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token keyword" style="color:rgb(127, 219, 202)">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    authenticate_finish</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> user_identifier</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> user_uuid</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> token </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">executeMutation</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">REGISTER_FINISH</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    identifier</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"nickisyourfan"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    public_key</span><span class="token operator" style="color:rgb(127, 219, 202)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">JSON</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">stringify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">jsonCredential</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After succcessfuly logging in you will receive three properties including the user's identifier, UUID, and token.</p>
<ul>
<li>Identifier - The input provided by the user to identify their account. Usually an email or username.</li>
<li>UUID - The shareable id that can be used to identify a user.</li>
<li>Token - A signed <code>biscuit</code> token, similar to a JWT, that is used to further access the API. See the biscuit rust crate for more details concerning biscuits.</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://media4.giphy.com/media/RJDkHk2fzVQ4qu7Jif/giphy.gif?cid=ecf05e472neioas4hwda04f7er3xlchy0odkj07msehi7o4p&amp;ep=v1_gifs_search&amp;rid=giphy.gif&amp;ct=g" alt="rocketship launch" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next?<a href="https://www.thedevoyage.com/blog/passkey-auth-server-with-subgraph#whats-next" class="hash-link" aria-label="Direct link to What's Next?" title="Direct link to What's Next?">​</a></h2>
<p>Now, you possess a token representing a user! This token bears a striking resemblance to a JWT Token; it's referred to as a "biscuit" from the <a href="https://www.biscuitsec.org/" target="_blank" rel="noopener noreferrer">Biscuit Auth</a> library. Utilize this token seamlessly with Subgraph APIs or incorporate it into your custom implementation to validate subsequent requests, just as you would with any comparable JWT.</p>
<p>For further insights into creating fully-featured APIs or to delve deeper into the Subgraph auth API and understand how these authentication tokens can be employed to verify requests, refer to the <a href="https://www.thedevoyage.com/subgraph/intro">Subgraph Documentation</a>.</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
        <category label="passkeys" term="passkeys"/>
        <category label="webauthn" term="webauthn"/>
        <category label="passkey server" term="passkey server"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subgraph v0.0.13 - Instant API Generation At Your Fingertips with Subgraph]]></title>
        <id>https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips</id>
        <link href="https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips"/>
        <updated>2023-12-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Creating a flexible and standardized API is now easier than ever with Subgraph's new features such as built-in auth with webauthn and customizable data filtering.]]></summary>
        <content type="html"><![CDATA[<p>Welcome Voyager.</p>
<p>Embark on an epic journey as I unveil an exciting chapter in the realm of <strong>Automated API Generation</strong> using Subgraph!</p>
<p>This iteration, <code>v0.0.13</code>, not only marks a significant milestone but also welcome a wave of powerful new options that promise to redefine the way you craft APIs.</p>
<p>Picture this – the ability to spin up robust yet flexible APIs in only a few moments, freeing you to channel your focus where it truly matters: your business logic. With Subgraph at your helm, bid
farewell to the intricacies of code logic and immerse yourself in the artistry of your unique digital ventures.</p>
<p>Today, the horizon expands, and you, fellow Voyager, are here to see it happen. Ready to dive into the extraordinary? Let's set sail!</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;align-items:center"><span>Want to support `@the-devoyage/<!-- -->subgraph<!-- -->`?</span><a href="https://thedevoyage.gumroad.com/l/subgraph" target="_blank" rel="noopener noreferrer"><button class="button button--primary">Early Alpha Release</button></a></div>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1704334822/Subgraph_v13_jvxykc.png" alt="feature image" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="generate-your-next-api">Generate Your Next API<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips#generate-your-next-api" class="hash-link" aria-label="Direct link to Generate Your Next API" title="Direct link to Generate Your Next API">​</a></h2>
<p>Whether connecting to your existing database or embarking on a new project, Subgraph empowers you to turn ideas into fully functional applications within minutes. The key? A straightforward configuration file that makes management a breeze.</p>
<p>With Subgraph, you can seamlessly bring your concepts to life without the hassle of complex coding. Whether you're accustomed to working with your established databases or starting from scratch, Subgraph streamlines the process, ensuring that your focus remains on the essence of your project, not the intricacies of development.</p>
<p>This user-friendly approach eliminates the need for lengthy development cycles, letting you see results quickly and effortlessly. Subgraph is the tool that simplifies the journey from idea to application, offering a stress-free and efficient way to materialize your vision.</p>
<p>Large applications or small POCs, it all starts with a configuration file that focuses on the data you want to distribute.</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1703825219/carbon_2_pfrg4u.png" alt="subgraph config" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="simplifying-data-management-with-subgraph">Simplifying Data Management with Subgraph<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips#simplifying-data-management-with-subgraph" class="hash-link" aria-label="Direct link to Simplifying Data Management with Subgraph" title="Direct link to Simplifying Data Management with Subgraph">​</a></h3>
<p>At the heart of Subgraph lies a fundamental goal: to streamline the process of data management. Imagine effortlessly managing your data with a tool that revolves around simplicity. Subgraph achieves this by utilizing your provided configuration to establish consistent and user-friendly methods for interacting with data.</p>
<p>In the realm of API development, standardization is key. Subgraph empowers you to deliver a highly standardized API to your developers and customers, easing the burden of interfacing with your data. The result? A seamless and efficient experience for all stakeholders involved.</p>
<p>With Subgraph's generated actions, you can interact with your data in a way that aligns with the needs of almost any project:</p>
<ul>
<li>Find One: Locate a single entity effortlessly.</li>
<li>Find Many: Retrieve multiple entities with ease.</li>
<li>Update One: Modify a single entity conveniently.</li>
<li>Update Many: Streamline the process of updating multiple entities.</li>
<li>Create One: Effortlessly add a new data/entities to your system.</li>
</ul>
<p>Subgraph empowers developers and startup owners by providing a toolkit that not only simplifies but enhances data management. Say goodbye to convoluted processes and hello to a standardized, efficient, and user-friendly approach to handling your data.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="diverse-data-sources-made-simple">Diverse Data Sources Made Simple<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips#diverse-data-sources-made-simple" class="hash-link" aria-label="Direct link to Diverse Data Sources Made Simple" title="Direct link to Diverse Data Sources Made Simple">​</a></h3>
<p>Subgraph thrives on versatility, making it a breeze to incorporate a variety of familiar data sources into your toolkit. With support for various databases and protocols, you have the flexibility to leverage the tools you know and trust.</p>
<p><strong>Supported Data Sources:</strong></p>
<ul>
<li>Mongo: Seamlessly integrate and interact with MongoDB databases.</li>
<li>MySQL: Harness the power of MySQL databases for robust data handling.</li>
<li>Postgres: Benefit from the reliability and scalability of PostgreSQL databases.</li>
<li>SQLite: Enjoy a lightweight yet powerful option for local data storage.</li>
<li>HTTP/Restful: Extend your reach beyond traditional databases with seamless integration of HTTP/Restful APIs.</li>
</ul>
<p>Whether you're rooted in the familiarity of relational databases or exploring the possibilities of HTTP/Restful APIs, Subgraph accommodates your preferences. This flexibility ensures that your data management remains efficient, regardless of the sources you rely on. Subgraph empowers developers and startup owners to work with the tools that suit their needs best, fostering a seamless and adaptable data integration experience. Elevate your data management capabilities with Subgraph—where versatility meets simplicity.</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1703955372/big-data-7216839_1280_ej08cb.png" alt="many data sources" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="enhanced-entity-associations-with-subgraph">Enhanced Entity Associations with Subgraph<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips#enhanced-entity-associations-with-subgraph" class="hash-link" aria-label="Direct link to Enhanced Entity Associations with Subgraph" title="Direct link to Enhanced Entity Associations with Subgraph">​</a></h3>
<p>Unlock a new dimension of efficiency with Subgraph's powerful entity association capabilities. Subgraph empowers you to seamlessly link the entities within a service, paving the way for resolving associated entities in a single network request or GraphQL query. Say goodbye to multiple requests and embrace a streamlined, all-encompassing approach to entity resolution.</p>
<p><strong>Key Features:</strong></p>
<ul>
<li>Effortless Association: With Subgraph, associating entities is a breeze. Connect related entities swiftly and intuitively from within the configuration file, enhancing the coherence of your data structure.</li>
<li>Single Network Request/GraphQL Query: Witness the magic of resolving associated entities with a single network request or GraphQL query. Subgraph optimizes the process, minimizing latency and maximizing efficiency.</li>
<li>Cross-Data Source Association: Subgraph breaks down silos by enabling instant associations across different data sources. Seamlessly integrate entities from diverse origins, creating a unified and comprehensive view of your data.</li>
</ul>
<p>Embrace a future where entity associations are not just a feature but a catalyst for enhanced performance. Subgraph empowers developers and startup owners to elevate their data resolution capabilities, fostering a more connected and
responsive system.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tailored-data-retrieval-with-subgraph-apis">Tailored Data Retrieval with Subgraph APIs<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips#tailored-data-retrieval-with-subgraph-apis" class="hash-link" aria-label="Direct link to Tailored Data Retrieval with Subgraph APIs" title="Direct link to Tailored Data Retrieval with Subgraph APIs">​</a></h3>
<p>In the world of Subgraph, querying APIs isn't just about extracting data—it's about sculpting the precise dataset your UI demands. Subgraph introduces a versatile filtering API, a standard feature for every generated resolver. This empowers users to effortlessly combine custom filters using nested and/or clauses, providing a tailored approach to data retrieval.</p>
<p><strong>Key Benefits:</strong></p>
<ul>
<li>User-Centric Querying: Subgraph acknowledges that every UI is unique. Its querying capabilities enable users to fetch precisely the data needed to support their specific UI requirements, promoting a seamless and tailored user experience.</li>
<li>Flexible Filtering: The filtering API in Subgraph is a game-changer. Users can flexibly combine an array of custom filters, utilizing nested and/or clauses to refine data retrieval. This flexibility ensures that users can adapt their queries to the evolving needs of their projects.</li>
</ul>
<p>In addition to its robust querying capabilities, Subgraph introduces eager loading for database focused data sources. This feature enables filtering based on the properties of associated entities, offering an advanced dimension to data retrieval.</p>
<p>Subgraph isn't just about querying; it's about empowering users to curate data experiences that align precisely with their application needs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="effortless-security-with-subgraph">Effortless Security with Subgraph<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips#effortless-security-with-subgraph" class="hash-link" aria-label="Direct link to Effortless Security with Subgraph" title="Direct link to Effortless Security with Subgraph">​</a></h3>
<p>In the realm of Subgraph, security isn't a complex ordeal—it's a few lines in your config file. Subgraph brings simplicity to the forefront with its seamless authorization and authentication capabilities. Define a concise set of lines in the config file, and Subgraph empowers you with authentication services, leveraging the robustness of web authentication (WebAuthn).</p>
<p><strong>Key Features:</strong></p>
<ul>
<li>Configurable Authorization: Subgraph simplifies the process of configuring authorization with just a few lines in your config file. Define your rules effortlessly, ensuring that your API is secure and accessible only to those with the proper permissions.</li>
<li>Authentication with WebAuthn: Subgraph goes beyond traditional authentication methods by seamlessly integrating with WebAuthn. Elevate your security measures with the robust authentication capabilities offered by the web authentication standard.</li>
<li>No Passwords and Higher Security - WebAuthn eliminates the need for passwords, providing a user-friendly interface while enhancing backend security through advanced cryptographic and biometric authentication methods.</li>
</ul>
<p>Subgraph's commitment to simplicity extends to its security features, ensuring that even the process of authentication and authorization aligns with the tool's user-friendly ethos.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-documentation">New Documentation<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips#new-documentation" class="hash-link" aria-label="Direct link to New Documentation" title="Direct link to New Documentation">​</a></h3>
<p>We are thrilled to unveil the new documentation website for Subgraph, offering users a seamless and intuitive experience in navigating the wealth of information about our API deployment tool.</p>
<ul>
<li><a href="https://www.thedevoyage.com/subgraph/intro">Subgraph Docs</a> - Start from the top, and learn about subgraph.</li>
<li><a href="https://www.thedevoyage.com/subgraph/quickstart">Quick Start</a> - Jump in with a 5 minute quickstart to a brand new API.</li>
</ul>
<p>This user-friendly platform is designed to provide comprehensive guidance on configuring, running, and inspecting APIs with Subgraph. With a clean and organized layout, users can easily
explore the documentation, access quick-start guides, and delve into detailed explanations of Subgraph's features. The new doc website is a testament to our commitment to user accessibility
and support, ensuring that both beginners and experienced developers can harness the full potential of Subgraph effortlessly. Explore the documentation now and embark on a journey to streamline your API development process.</p>
<p><img decoding="async" loading="lazy" src="https://media.giphy.com/media/hWSXtvw9P3aAov0UX3/giphy.gif" alt="sailboat gif" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="create-a-graph-for-free">Create a Graph For Free<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.13-instant-api-at-your-fingertips#create-a-graph-for-free" class="hash-link" aria-label="Direct link to Create a Graph For Free" title="Direct link to Create a Graph For Free">​</a></h2>
<p>It's free to try. No Credit Card Needed.</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;align-items:center"><span>Want to support `@the-devoyage/<!-- -->subgraph<!-- -->`?</span><a href="https://thedevoyage.gumroad.com/l/subgraph" target="_blank" rel="noopener noreferrer"><button class="button button--primary">Early Alpha Release</button></a></div>
<p>Subgraph v0.0.13 represents a monumental leap forward in the realm of Automated API Generation. With a host of powerful new features, this release empowers users to effortlessly create robust APIs in mere moments, redirecting their
focus towards core business logic.</p>
<p>The journey begins with a simple configuration file, making API management a breeze. Subgraph's commitment to simplicity extends across diverse aspects, from streamlined data management, versatile
data source integration, and enhanced entity associations to tailored data retrieval with robust filtering APIs.</p>
<p>Security is seamlessly woven into Subgraph's fabric, leveraging WebAuthn for authentication without passwords, prioritizing user-friendly interfaces while fortifying backend security.</p>
<p>The unveiling of the new documentation website further cements Subgraph's dedication to user accessibility, providing a comprehensive resource for both novice and seasoned developers.</p>
<p>Embark on this transformative journey with Subgraph, where ease meets innovation, and redefine your approach to API development.</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subgraph v0.0.9 - Instant GraphQL API - Joined Types and Guards]]></title>
        <id>https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards</id>
        <link href="https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards"/>
        <updated>2023-06-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Joining types and guards now available for Subgraph, an instant dynamic API.]]></summary>
        <content type="html"><![CDATA[<p>Hello All! Thanks for Joining!</p>
<p>Today, I am super excited to share the most recent update for Subgraph, an application written in Rust that creates an Instant GraphQL API.</p>
<p>Here is the low down: Provide a simple configuration, spin it up, and send those network requests. Your API is running in minutes not
months saving you time and money.</p>
<p>This dynamic application gets fed a configuration file to describe your data in order to instantly spin up a usable GraphQL Server. Version <code>v0.0.9</code>
takes a few huge steps to make your API even more powerful with Joins and Guards.</p>
<p>Let's take a look at the new features and write a quick API in order to demonstrate how Subgraph can benefit your next project.</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1687224196/Subgraph_1_swkuzy.png" alt="Subgraph SQL" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="guards-joins-and-the-new-stuff">Guards, Joins, and the New Stuff<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards#guards-joins-and-the-new-stuff" class="hash-link" aria-label="Direct link to Guards, Joins, and the New Stuff" title="Direct link to Guards, Joins, and the New Stuff">​</a></h2>
<p>Version v0.0.9 introduces a diverse range of new capabilities, improvements, and fixes. Among these are two exciting features called Guards and Joins, designed
to empower you in building a robust API for any upcoming project.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="guards-alpha-release">Guards (alpha release)<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards#guards-alpha-release" class="hash-link" aria-label="Direct link to Guards (alpha release)" title="Direct link to Guards (alpha release)">​</a></h3>
<p>Protecting your API is a must and Subgraph aims to make it easy to guard your data from a variety of prospectives. The first version of
guards allows you to block access at four different points in the life cycle of a request by writing simple boolean evaluations. No complex
logic, framework, or code needed.</p>
<ol>
<li>Service Guards - Stop access to the entire server.</li>
<li>Resolver Guards - Prevent access on a per operation basis.</li>
<li>Entity Guards - Protect specific entities of your service.</li>
<li>Field Guards - Scope access down to a field of an entity.</li>
</ol>
<p>As mentioned above, guards are boolean evaluations that are simple to write. Evaluate a truthy condition and the access to the server is blocked with
custom error messages. Let's take a look at defining a service with a simple guard.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">service_name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"coffee_shops"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.guards</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"role"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">if_expr</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"headers(\"role\") != \"Admin\""</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># When true, we block access to the entire server.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">then_msg</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Invalid Role - You may not request from this service."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As you can see above with the <code>headers()</code> function, there are built-in methods to access datapoints that are useful for validating access. Currently,
you can access <code>header</code> values as well as <code>input</code> (the GraphQL input itself) values. The guards feature is an alpha release with plans to
include other built-in methods such as <code>entity</code> values! Keep tuned as these are developed and rolled out.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="joins">Joins<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards#joins" class="hash-link" aria-label="Direct link to Joins" title="Direct link to Joins">​</a></h3>
<p>Maybe one of the more exciting features for <code>v0.0.9</code>, joins allow you to connect entities together quickly and easily bringing the power of GraphQL
into the simplicity of the Subgraph config.</p>
<p>First, define a few entities in the config file. Our comment entity below will have a property called <code>created_by</code> which will
join to a user type.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">service_name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"my_subgraph"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"User"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">fields</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"_id"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"ObjectID"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"name"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Comment"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">fields</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"_id"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"ObjectID"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"content"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"created_by"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"ObjectID"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now we just need to tell Subgraph to join the <code>created_by</code> field of the <code>Comment</code> to the <code>User</code>. Simply update the field definition and Subgraph
handles the rest.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"created_by"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"ObjectID"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">as_type</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"User"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">join_on</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"_id"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Send the network request and you now are able to instantly grab the <code>User</code> that created each comment.</p>
<p>Example Response:</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">{</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  "_id": "54321",</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  "content": "Joining data is simple!",</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  "created_by": {</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    "_id": "12345",</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    "name": "Bongo"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Joins can be applied to any entity in a Subgraph from any data source. This means you can join SqLite to Mongo or Postgres to an
external HTTP API. Associating entities simple and easy without the headache is the idea!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="spin-it-up">Spin It Up<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards#spin-it-up" class="hash-link" aria-label="Direct link to Spin It Up" title="Direct link to Spin It Up">​</a></h2>
<p>Believe it or not, the above configuration is just about complete.</p>
<p>Subgraph only needs to know two things at minimum
including where your data lives and what your data looks like. The entities above describe what the data looks like, so let's add
the configuration to inform Subgraph of where your data lives.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-data-source">The Data Source<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards#the-data-source" class="hash-link" aria-label="Direct link to The Data Source" title="Direct link to The Data Source">​</a></h3>
<p>Subgraph supports five different data sources, meaning you can pull in data from five different types of data interfaces. It supports MongoDB, MySQL,
Postgres, SQLite, and HTTP Data sources (external third party APIs). Today we will use a Mongo Database.</p>
<p>Add the Data Source to the configuration and Subgraph will automatically connect each entity to the first available configuration. Of course,
if you have multiple data sources, you can associate each entity with the appropriate data source.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources.Mongo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"my_data_source"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">uri</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"mongodb://user:password@127.0.0.1:27017/db_name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">db</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"db_name"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="start-the-api">Start the API<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards#start-the-api" class="hash-link" aria-label="Direct link to Start the API" title="Direct link to Start the API">​</a></h3>
<p>Once added, run the command to start your API. To view the Sandbox, use your browser to navigate to the port that you used to start the service.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">subgraph -c ./my_config.toml -p 5000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Sandbox would be available at <code>http://localhost:5000</code> in the browser.</p>
<p>Feel free to define the port in your config file to save time!</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">service_name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"my_subgraph"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">port</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example-configurations">Example Configurations<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards#example-configurations" class="hash-link" aria-label="Direct link to Example Configurations" title="Direct link to Example Configurations">​</a></h3>
<p>Like many Rust projects out there, Subgraph provides a folder of example configurations that you can use as reference to write your own!</p>
<p>Check out these <a href="https://github.com/The-Devoyage/subgraph/tree/master/examples" target="_blank" rel="noopener noreferrer">Example Configurations</a>. The configuration file is currently required
to be written in TOML or Tom's Obvious Minimal Language. Feel free to reference the <a href="https://toml.io/en/" target="_blank" rel="noopener noreferrer">TOML Documentation</a> if needed.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up---whats-next">Wrapping Up - What's Next?<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.9-joins-and-guards#wrapping-up---whats-next" class="hash-link" aria-label="Direct link to Wrapping Up - What's Next?" title="Direct link to Wrapping Up - What's Next?">​</a></h2>
<p>Thanks for taking a moment to check out the new features! If you are interested in spinning up your own Subgraph using the <code>@the-devoyage/subgraph</code>
project, take a look at the documentation found in the <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">Repository</a>. If you find this project
intriguing, consider starring the repository to express your support.</p>
<p>The next version is already under way with an extremely important update -- Integration Testing will allow us to increase quality and consistency between releases
allowing you to depend Subgraph on the next level. Up on deck includes delete resolvers and improvements to guards/authorization/authentication!</p>
<p>Lastly, if you are interested in the project, we have officially launched a support option on Gumroad! This provides an excellent opportunity for you to contribute
to the progression towards Version 1. We offer various levels of support, ranging from quick and easy donations to full-fledged feature requests.</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;align-items:center"><span>Want to support `@the-devoyage/<!-- -->subgraph<!-- -->`?</span><a href="https://thedevoyage.gumroad.com/l/subgraph" target="_blank" rel="noopener noreferrer"><button class="button button--primary">Support on Gumroad</button></a></div>
<p>Again -- Thanks for taking a few minutes to check out the new features and following along!</p>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Three Fancy Bash Directory Jumpers to "Avoid The Path"]]></title>
        <id>https://www.thedevoyage.com/blog/fancy-bash-directory-jumpers</id>
        <link href="https://www.thedevoyage.com/blog/fancy-bash-directory-jumpers"/>
        <updated>2023-05-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Avoid typing the path when changing directories in the terminal. These directory jumpers can help you quickly and easily change directories and are just fun to customize.]]></summary>
        <content type="html"><![CDATA[<p>Hello All, Thanks for Joining!</p>
<p>Today, I'd love to share a quick little bash script that helps you change directories quickly and easily. We will be trying our hardest to "Avoid The Path", meaning we won't be typing out lengthy paths when changing directories.</p>
<p>As developers, we are constantly jumping into and out of directories, spinning up environments in different locations, or even to grabbing a quick reference from another project. Doing such tasks from the command line usually provides power that a GUI just might not have, making it worth the effort to stay in the terminal.</p>
<p>So, let's take a look at some fancy ways to "avoid the path"!</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1684007203/cd_DesktopDevelopmentOrganizationProject_1_ao2lhc.png" alt="Avoid The Path" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="three-levels-of-fancy-bash-directory-jumpers">Three Levels of Fancy Bash Directory Jumpers<a href="https://www.thedevoyage.com/blog/fancy-bash-directory-jumpers#three-levels-of-fancy-bash-directory-jumpers" class="hash-link" aria-label="Direct link to Three Levels of Fancy Bash Directory Jumpers" title="Direct link to Three Levels of Fancy Bash Directory Jumpers">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-least-fancy">The Least Fancy<a href="https://www.thedevoyage.com/blog/fancy-bash-directory-jumpers#the-least-fancy" class="hash-link" aria-label="Direct link to The Least Fancy" title="Direct link to The Least Fancy">​</a></h3>
<p>For the longest of time I was happy with the simplest solution, a quick bash alias. The number of projects on my computer were few in numbers, so this solution made a ton of sense.</p>
<p>Setting an alias is quick and easy. Simply add the alias to your bash profile, which is a file in the home directory of your computer. This file name might differ depending on your shell and configuration. That being said, some of the most common names for these settings files are <code>.bashrc</code>, <code>.bash_profile</code>, or even <code>.bash_aliases</code>.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain"># .bashrc</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"># Typing "DEV" into the command line will now change directories</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"># to a specified path.</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">alias DEV=`cd ~/Desktop/DEV`</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You'll need to source the file that was changed, which will tell the shell that something new is available. You can do this by restarting the terminal or simply running <code>source .bashrc</code>, inserting the appropriate file name. Once sourced, your new alias will be ready to use.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">nickisyourfan@system76:~$ DEV</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">nickisyourfan@system76:~/Desktop/DEV$</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the terminal, you can now use your alias from any directory to jump back to your development directory.</p>
<p>Avoid The Path - Win!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-little-fancy">A Little Fancy<a href="https://www.thedevoyage.com/blog/fancy-bash-directory-jumpers#a-little-fancy" class="hash-link" aria-label="Direct link to A Little Fancy" title="Direct link to A Little Fancy">​</a></h3>
<p>As time passes, you'll accumulate numerous projects in your development directory. It's the nature of the beast. And, as a developer you'll eventually find yourself sitting on the couch late at night trying to avoid doing the work you need to do in favor of writing a new function to help you improve your existing and perfectly fine way of jumping between directories.</p>
<p>We can convert our alias into a function that is callalble from the command line. It's extreemly easy and can even take in arguments!</p>
<p>Our function below will be called just like the bash alias above, simply type the given name, in our case <code>DEV</code>. This time it's going to take an optional second word/argument, which is the name of the folder of where you are changing to. For example, <code>DEV my-project</code>.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain"># .bashrc</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">function DEV() {</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  # If argument is not provided, go to the dev directory.</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  # Else go to the nested directory.</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  if [ -z "$1" ]; then</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    cd ~/Desktop/DEV</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  else</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    cd ~/Desktop/DEV/$1</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  fi</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now we can jump into any project from any location by typing two words.</p>
<p>Source the file, then use the command and let's try it out.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">nickisyourfan@system76:~$ DEV my-project</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">nickisyourfan@system76:~/Desktop/DEV/my-project$</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Avoid the Path -- Win!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-bit-fancier">A Bit Fancier<a href="https://www.thedevoyage.com/blog/fancy-bash-directory-jumpers#a-bit-fancier" class="hash-link" aria-label="Direct link to A Bit Fancier" title="Direct link to A Bit Fancier">​</a></h3>
<p>I know what you are thinking... We can do better!</p>
<p>I hope you are not in the middle of something important, because here is where procrastination becomes really hard to resist.</p>
<p>Our current script makes it easy to jump into our development directory and even somewhat into nested directories one level deep. If you are like me, some projects get organized into the nested folders, meaning that my projects directory is now several levels deep. The previous script just is not cut out to handle my directories structured like this.</p>
<p>Let's use some common functions to support finding of nested directories. This time, we take a more dynamic approach.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">function DEV() {</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  # Set your variables such as the directory to search and how many levels deep to search.</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  local directory=~/Desktop/DEV</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  local levels_deep=4</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  # If no args provided, cd into the directory.</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  if [ -z "$1" ]; then</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    cd $directory</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    return</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  fi</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  # Find all the directories that match the name provided in the argument.</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  directories=($(find $directory -maxdepth $levels_deep -type d -name $1))</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  # If only one result, cd into that directory.</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  # Else ask the user which directory they really want to go to.</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  if [ ${#directories[@]} -eq 1 ]; then</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    cd ${directories[0]}</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  elif [ ${#directories[@]} -gt 1 ]; then</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    echo "Which directory do you want to go to?"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    for i in ${!directories[@]}; do</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">      echo "$i. ${directories[$i]}"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    done</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    read -p "Enter a number: " choice</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    cd ${directories[$choice]}</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  else</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    echo "Directory does not exist"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  fi</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now we can jump to any directory... from anywhere... with ease!</p>
<p>Source the file and run the command just like before.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">nickisyourfan@system76:~$ DEV my-project</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Notice, I have two folders called <code>my-project</code>. It will ask me which one I want to change into before changing the directory for me.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">Which directory do you want to go to?</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">0. /home/nickisyourfan/Desktop/DEV/@the-devoyage/my-project</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">1. /home/nickisyourfan/Desktop/DEV/my-project</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">Enter a number: 0</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">nickisyourfan@system76:~/Desktop/DEV/@the-devoyage/my-project$</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Avoid the Path - Win!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-most-fancy">The Most Fancy<a href="https://www.thedevoyage.com/blog/fancy-bash-directory-jumpers#the-most-fancy" class="hash-link" aria-label="Direct link to The Most Fancy" title="Direct link to The Most Fancy">​</a></h3>
<p>To top off the script we are going to add an additional function that enable some super sweet auto complete.</p>
<p>Imagine... the name of the project you want to cd into is on the tip of your tongue but you just can't remember it's name. Instead of using the old trusty <code>ls</code> command and reading the dozens of incomplete projects, we can enable some tab completion to help us remember the name of the project/directory we are looking for.</p>
<p>Start by typing in the command, then press tab to get some suggestions.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">nickisyourfan@system76:~/Desktop/DEV/@the-devoyage/subgraph$ DEV my-proj</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">my-project                         my-project-1                    my-project-2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Auto complete is as simple as adding one more function to your bash profile.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">function _dev_completion() {</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  local cur=${COMP_WORDS[COMP_CWORD]}</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  local directory=~/Desktop/DEV</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  local levels_deep=4</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  local subdirs=$(find "$directory" -maxdepth "$levels_deep" -type d -printf '%f\n')</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  local options=$(echo "$subdirs" | grep "^$cur")</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  COMPREPLY=( $(compgen -W "$options" -- "$cur") )</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  return 0</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Following the previous DEV function, call the newly added function.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">function DEV() {</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  # Logic to find and switch folders.</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">}</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">complete -F _dev_completion DEV</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-great-friday-night">A Great Friday Night<a href="https://www.thedevoyage.com/blog/fancy-bash-directory-jumpers#a-great-friday-night" class="hash-link" aria-label="Direct link to A Great Friday Night" title="Direct link to A Great Friday Night">​</a></h2>
<p>Thanks for joining me to procrastinate my Friday night away. It's been a fun time expanding and sharing this little directory jumper. It's far from perfect but it is easy to configure and gets the job done. Let me know what you'd add to up the fancy.</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="bash" term="bash"/>
        <category label="directory jumper" term="directory jumper"/>
        <category label="cd" term="cd"/>
        <category label="change directory" term="change directory"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subgraph v0.0.8 - Instant SQL API with Subgraph]]></title>
        <id>https://www.thedevoyage.com/blog/subgraph-v0.0.8-instant-sql-api</id>
        <link href="https://www.thedevoyage.com/blog/subgraph-v0.0.8-instant-sql-api"/>
        <updated>2023-05-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Create a nearly instant API for your SQL Database with Subgraph v0.0.8.]]></summary>
        <content type="html"><![CDATA[<p>Hello All, Thanks for Joining!</p>
<p>Today we are creating instant APIs around SQL Databases of various dialects with Subgraph, a proof
of concept tool that is made to assist speedy API development.</p>
<p>All it takes to use subgraph is a config file that informs the service where your data is and what your data looks like. Define the
config and start the API to create an instant API around your database.</p>
<p>With the latest release, v0.0.8, we are taking a look at the newly added support for a few dialects of SQL. In addition to
Mongo and HTTP Data Sources, Subgraph now supports Postgres, MySQL, and SqLite. Let's take a minute and spin up a new
API from scratch!</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1683081810/Subgraph_SQL_kteswo.png" alt="Subgraph SQL" class="img_ev3q"></p>
<p>Check out the <a href="https://www.github.com/the-devoyage/subgrpah" target="_blank" rel="noopener noreferrer">repo</a>!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="build-a-quick-api-for-your-sql-database">Build a Quick API for your SQL Database<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.8-instant-sql-api#build-a-quick-api-for-your-sql-database" class="hash-link" aria-label="Direct link to Build a Quick API for your SQL Database" title="Direct link to Build a Quick API for your SQL Database">​</a></h2>
<p>The goal with subgraph is pretty simple - Shorten the time it takes to plan, develop, and deploy an API. With subgraph,
we do not need to write routes, controllers, or resolvers from scratch. We do not need to deal with boiler plate, database
connections, or even validation.</p>
<p>All we need to do is tell the Subgraph service where our data is and what it looks like. Subgraph takes care of the rest by
connecting to the database and creating the routes/resolvers. With this, you now can spend your time on the parts of
your business that might make a larger impact for your clients and sales.</p>
<p>Let's see an example!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-create-the-database">1. Create the Database<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.8-instant-sql-api#1-create-the-database" class="hash-link" aria-label="Direct link to 1. Create the Database" title="Direct link to 1. Create the Database">​</a></h3>
<p>You own the database. You get to choose what type of database is best suited for your project. As mentioned above,
Subgraph supports Mongo, Postgres, MySQL, and SqLite databases, making it easy for you to connect to your data.</p>
<p>In this example we will create a SqLite DB and use Subgraph to generate an API around a few tables. Keep in mind, that connecting Subgraph
to MySQL, Postgres, or even Mongo, is a very similar process.</p>
<p>First, make sure you have SqLite installed on your system. The following guide is going to assume you are on a Linux machine.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">sudo apt install sqlite3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Creating a SqLite Database is as easy as creating a file in a folder. Let's create a database around Coffees!</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">touch caffeine.db</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, let's create a couple tables.</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">TABLE</span><span class="token plain"> coffee </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  id </span><span class="token keyword" style="color:rgb(127, 219, 202)">INTEGER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">KEY</span><span class="token plain"> AUTOINCREMENT</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  name </span><span class="token keyword" style="color:rgb(127, 219, 202)">TEXT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">NULL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  price </span><span class="token keyword" style="color:rgb(127, 219, 202)">INTEGER</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">NULL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  available </span><span class="token keyword" style="color:rgb(127, 219, 202)">BOOLEAN</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">NULL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token keyword" style="color:rgb(127, 219, 202)">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">TABLE</span><span class="token plain"> espresso </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  id </span><span class="token keyword" style="color:rgb(127, 219, 202)">INTEGER</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(127, 219, 202)">KEY</span><span class="token plain"> AUTOINCREMENT</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  name </span><span class="token keyword" style="color:rgb(127, 219, 202)">TEXT</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">NULL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  price </span><span class="token keyword" style="color:rgb(127, 219, 202)">INTEGER</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">NULL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  available </span><span class="token keyword" style="color:rgb(127, 219, 202)">BOOLEAN</span><span class="token plain"> </span><span class="token operator" style="color:rgb(127, 219, 202)">NOT</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">NULL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is all we will need to do to get started. We can now move on to Subgraph specific setup.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-write-the-subgraph-config">2. Write the Subgraph Config<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.8-instant-sql-api#2-write-the-subgraph-config" class="hash-link" aria-label="Direct link to 2. Write the Subgraph Config" title="Direct link to 2. Write the Subgraph Config">​</a></h3>
<p>The config is all about your data. It tells Subgraph where to find your data and what it looks like. Writing the config file is
easy, as it uses <a href="https://toml.io/en/" target="_blank" rel="noopener noreferrer">TOML or Tom's Obvious Minimal Language</a>.</p>
<p>Let's start by telling Subgraph where the data is. To do this, add a <code>Data Source</code> to the configuration. You can add
multiple data sources, mix and match data sources, or just keep it basic with a single data source.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">service_name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"espresso"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources.SQL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"caffeine_data_source"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Name the data source for reference later.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">uri</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"sqlite:/home/nickisyourfan/Desktop/DEV/dbs/caffeine.db"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">dialect</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"SQLITE"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now that Subgraph knows where the data is, we can inform subgraph what our data looks like. Start by defining an entity for each table. An
Entity is a table in the database (collection for Mongo).</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Espresso"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this case, the <code>Espresso</code> table has four columns. Let's tell Subgraph.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">exclude_from_input</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(173, 219, 103)">"CreateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateMany"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Don't allow uses to create or update the ID prop.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"price"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"available"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Boolean"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That's it! Let's do the same for the coffee table and take a look at the finished config.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># The Finished Configuration:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">service_name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"espresso"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources.SQL</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"caffeine_data_source"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">uri</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"sqlite:/home/nickisyourfan/Desktop/DEV/dbs/caffeine.db"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">dialect</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"SQLITE"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Coffee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">exclude_from_input</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(173, 219, 103)">"CreateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateMany"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"price"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"available"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Boolean"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Espresso"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">exclude_from_input</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(173, 219, 103)">"CreateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"UpdateMany"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"price"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"available"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Boolean"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-start-the-api">3. Start the API<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.8-instant-sql-api#3-start-the-api" class="hash-link" aria-label="Direct link to 3. Start the API" title="Direct link to 3. Start the API">​</a></h3>
<p>In the previous step, we defined a Subgraph Configuration that tells the service about the data. The hard part is done in
about 50 lines of code. Now, let's start the service.</p>
<p>First, make sure you downloaded the latest release (v0.0.8). The release is a binary, making it easy to run on a linux system.
Just make sure to give it execution permissions.</p>
<p>Checkout the <a href="https://github.com/The-Devoyage/subgraph/releases" target="_blank" rel="noopener noreferrer">releases</a> page on GitHub to download the binary.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">chmod +x subgraph</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Then, run subgraph and point it to your config file.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">./subgraph --config ./caffeine.toml --port 3030</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And that's it! Your new API is now running at the port specified. We can load up the playground and send some queries.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-query-the-api">4. Query the API<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.8-instant-sql-api#4-query-the-api" class="hash-link" aria-label="Direct link to 4. Query the API" title="Direct link to 4. Query the API">​</a></h3>
<p>Load the playground at the specified port. The playground will let you construct and execute queries against your new API.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain"># Navigate In Browser:</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">http://localhost:3030</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Once loaded, drop in a mutation to insert a new espresso into the espresso table.</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">mutation</span><span class="token plain"> </span><span class="token definition-mutation function" style="color:rgb(130, 170, 255)">createEspresso</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token variable variable-input" style="color:rgb(214, 222, 235)">$input</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token property" style="color:rgb(128, 203, 196)">create_espresso_input</span><span class="token operator" style="color:rgb(127, 219, 202)">!</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token property-query property-mutation">create_espresso</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">create_espresso_input</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token variable variable-input" style="color:rgb(214, 222, 235)">$input</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">price</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token property" style="color:rgb(128, 203, 196)">available</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token string" style="color:rgb(173, 219, 103)">"input"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token string" style="color:rgb(173, 219, 103)">"name"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Katz Coffee"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token string" style="color:rgb(173, 219, 103)">"price"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">15</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token string" style="color:rgb(173, 219, 103)">"available"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Subgraph creates resolvers for each entity, making it easy for you to query the database. Currently, Subgraph supports
Find One, Find Many, Update One, Update Many, and Create One resolvers. Delete operations coming soon!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="subgraph-v008">Subgraph v0.0.8<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.8-instant-sql-api#subgraph-v008" class="hash-link" aria-label="Direct link to Subgraph v0.0.8" title="Direct link to Subgraph v0.0.8">​</a></h2>
<p>Thanks for checking in on the progress. There is a lot of work to do in order to get to v1, a production ready environment!</p>
<p>If you are a curios rusteacean and want to jump in, please feel free to check out the <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">source code</a>,
and share your ideas about the future of the project.</p>
<p>Upcoming projects include Delete Operations, Authorization Support, Testing Integrations, Federation 2 Support, and Error Handling! Thanks
for keeping tuned and following along.</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subgraph v0.0.7 - Instant Chat GPT GraphQL API]]></title>
        <id>https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt</id>
        <link href="https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt"/>
        <updated>2023-04-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello all -- Thanks for joining!]]></summary>
        <content type="html"><![CDATA[<p>Hello all -- Thanks for joining!</p>
<p>Today we are going to use the Chat GPT API to show off the newest release from the subgraph project, which is a tool built to help you start up a well rounded API in a matter of minutes.</p>
<p>The <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">@The-Devoyage/subgraph</a> project is a proof-of-concept implementation written in Rust for generating a dynamic API from a single
configuration/schema.
The subgraph allows you to define entities, data sources, and resolvers in a single TOML configuration.</p>
<p>The configuration specifies how the API should be generated around the data you need, existing or not. Subgraph generates CRUD operations from the entities you define and allows you
to connect many data sources to a single API, including HTTP and MongoDB (SQL support coming in the future!). In this way, you can create an API in no time, which can be used to
manipulate and find data, and even map third-party RESTful APIs to GraphQL automatically.</p>
<p>Let's dive into the new HTTP Data Source configurations which will allow us to connect to almost any third party RESTful API, such as the Chat GPT API.</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1681523977/Subgraph_Logo_2_gff26m.png" alt="Subgraph" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="v007-and-the-chat-gpt-api">v0.0.7 and the Chat GPT API<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt#v007-and-the-chat-gpt-api" class="hash-link" aria-label="Direct link to v0.0.7 and the Chat GPT API" title="Direct link to v0.0.7 and the Chat GPT API">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="http-data-source">HTTP Data Source<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt#http-data-source" class="hash-link" aria-label="Direct link to HTTP Data Source" title="Direct link to HTTP Data Source">​</a></h3>
<p>The HTTP data source is a powerful feature in Subgraph that enables data retrieval from external APIs. With this data source, you can easily connect your Subgraph GraphQL server to any REST API and map the API endpoints to
your GraphQL schema. This allows you to consolidate data from multiple sources into a single GraphQL endpoint. The HTTP data source provides various methods to retrieve data, such as GET, POST, PUT, PATCH, DELETE,
and allows for custom headers to be set. This feature simplifies the process of fetching data from external sources and reduces the amount of boilerplate code needed.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.data_sources.HTTP</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"chat_gpt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">url</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"https://api.openai.com/"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">default_headers</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Authorization"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">value</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Bearer $OPENAI_KEY"</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="object-support">Object Support<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt#object-support" class="hash-link" aria-label="Direct link to Object Support" title="Direct link to Object Support">​</a></h3>
<p>In Subgraph, Scalars are the primitive data types such as String, Int, and Boolean. However, there are situations where we need to represent more complex types or groupings of primitive Scalars. This is where Object types come into play.
An Object "Scalar" is a custom type that can be defined in the configuration for the schema, representing a complex type that can be used as a type itself. For example, you might have an object scalar representing a comment, with
its creator, content, and any other desired attributes.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"usage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Object"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">exclude_from_input</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(173, 219, 103)">"CreateOne"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">fields</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"prompt_tokens"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"completion_tokens"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"total_tokens"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="list-options">List Options<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt#list-options" class="hash-link" aria-label="Direct link to List Options" title="Direct link to List Options">​</a></h3>
<p>Lists or Arrays are one of the most commonly used data types in programming languages. Similarly, in Subgraph, lists can be defined as an array of a certain data types. This allows for a collection of values
to be returned as a single response. Lists can be defined in the configuration file by marking the field as a list (as shown below). Lists can also be nested inside objects, allowing for more complex data structures to be
represented. Lists are useful when you need to return multiple instances of a certain data type, such as a list of products or a list of blog posts.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"messages"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Object"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">list</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">fields</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"role"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"content"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">exclude_from_output</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-features">New Features<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt#new-features" class="hash-link" aria-label="Direct link to New Features" title="Direct link to New Features">​</a></h3>
<ul>
<li>HTTP Data Source - Easily map a HTTP API into this GraphQL API.</li>
<li>Update One Resolver - Update Mongo documents or send HTTP Put/Patch Request</li>
<li>Objects and Lists - Support for more complex data structures.</li>
<li>Exclude From Input/Output - Allows fields to be shared or mapped exclusivly to resolvers input/output.</li>
<li>Environment Variable Support - Use environment variables directly inside your config with the <code>$</code> suffix.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-chat-gpt-config">The Chat GPT Config<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt#the-chat-gpt-config" class="hash-link" aria-label="Direct link to The Chat GPT Config" title="Direct link to The Chat GPT Config">​</a></h2>
<p>Let's get down to the nitty gritty and hit the Chat GPT Completions endpoint with a Subgraph Service.</p>
<ol>
<li>Download the latest <a href="https://www.github.com/the-devoyage/subgraph/releases" target="_blank" rel="noopener noreferrer">release</a> of subgraph.</li>
<li>Get an Open AI API Key and set it as an environment variable.</li>
</ol>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">EXPORT OPENAI_KEY=paste_key_here</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="3">
<li>
<p>Download the <a href="https://github.com/The-Devoyage/subgraph/blob/2209c412f3f4fd0664a7963edba1d9830ec8e50c/examples/chat-gpt.toml" target="_blank" rel="noopener noreferrer">Chat GPT Service Config Example</a></p>
</li>
<li>
<p>Start the API.</p>
</li>
</ol>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">./subgraph -c ./chat-gpt.toml -p 5012</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="5">
<li>Check out the Sandbox and send some mutations!</li>
</ol>
<p>Open browser and navigate to the port that the service was started on. <code>http://localhost:5012</code></p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1680991221/Screenshot_from_2023-04-08_17-00-02_xidwxl.png" alt="Sandbox" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's Next?<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.7-http-with-chat-gpt#whats-next" class="hash-link" aria-label="Direct link to What's Next?" title="Direct link to What's Next?">​</a></h2>
<p>There is still a lot of work in order to get to v0.1.0 - Error handling, SQL Compatibility, Various Scalar Support, GraphQL Subscriptions... just to name a few.</p>
<p>So keep tuned, as v0.0.8 is under way.</p>
<p><a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">@the-devoyage/subgraph</a> - Check out the repo, grab a ticket, let's build.</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subgraph v0.0.5 - API vs. Car - Startups, What is an API and Why Generate?]]></title>
        <id>https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car</id>
        <link href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car"/>
        <updated>2023-02-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello all, and thanks for joining.]]></summary>
        <content type="html"><![CDATA[<p>Hello all, and thanks for joining.</p>
<p>Today, we start a conversation about what an API does at a basic level while talking about the newest release of project <code>Subgraph</code>, a GraphQL API Generator built with Rust.</p>
<p>Your next startup idea will most likely resolve around tech; It's 2023! So before you set out to hire that next developer, it is important that you might understand some basics about the empire you are creating.</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1677423235/The-Devoyage/API_VS_CAR_keho8m.png" alt="API Vs Car" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="api-vs-car-yes-a-car">API vs Car, yes a Car<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car#api-vs-car-yes-a-car" class="hash-link" aria-label="Direct link to API vs Car, yes a Car" title="Direct link to API vs Car, yes a Car">​</a></h2>
<p>As you may already know, data is your most valuable asset.</p>
<p>I am not saying it would be fun, but a company can recover from a broken application. Loss of code, bugs, and crashes can (and will) happen. But nothing is worse than if you loose the data itself.</p>
<p>Realizing this, we can compare an API to a Car. Yes, that shiny mode of transportation that gets you everywhere. The core job of an API is to move data.</p>
<p>Not unlike a car, as long as data can safely get from point A to point B, the API has done it's job. Meaning, that for most cases, any car will do.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-jobs-of-an-api">The Jobs of an API<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car#the-jobs-of-an-api" class="hash-link" aria-label="Direct link to The Jobs of an API" title="Direct link to The Jobs of an API">​</a></h3>
<p>In most situations, your car is not that different from my car. In fact, they are almost identical aside from some minor bells and whistles.</p>
<p>At a high overview, the job of an API is pretty basic, move data! There are four basic reasons for data transportation and they boil down to the acronym, "CRUD".</p>
<p>"CRUD" stands for Create -- Read -- Update -- Delete. The basic responsibilities of an API.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="create---the-factory">Create - The Factory<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car#create---the-factory" class="hash-link" aria-label="Direct link to Create - The Factory" title="Direct link to Create - The Factory">​</a></h4>
<p>Hop in your car, and let's take a trip down to the industrial district. Grab some supplies because we are going to create something new at the factory.</p>
<p>Just like a car might transport raw materials to the factory in order to create something new, we can send data from our shiny new website to the database (through the API) to create a new asset in our database.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="read---the-grocery-run">Read - The Grocery Run<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car#read---the-grocery-run" class="hash-link" aria-label="Direct link to Read - The Grocery Run" title="Direct link to Read - The Grocery Run">​</a></h4>
<p>Grab your reusable grocery bags and shopping list, it's time to do the weekly food run.</p>
<p>Your users will expect to be able to view data from the database. When your website needs to get some data, you will request that data through the API. It's just like that weekly grocery run that keeps us all fed and happy.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="update---the-shop">Update - The Shop<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car#update---the-shop" class="hash-link" aria-label="Direct link to Update - The Shop" title="Direct link to Update - The Shop">​</a></h4>
<p>My new bike has broken. Load it into the trunk and take it to the shop for me!</p>
<p>It's not enough that you can create or read items from the database. You are going to have to update these items, just like we fixed my bike by adding a nice new wicker basket to the front.</p>
<p>The API is going to be responsible to take those update instructions all the way from your website to the database. That way, you can edit those assets you have created.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="delete---the-dump">Delete - The Dump<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car#delete---the-dump" class="hash-link" aria-label="Direct link to Delete - The Dump" title="Direct link to Delete - The Dump">​</a></h4>
<p>Each spring, my family does a clean out -- Spring Cleaning. We load things we don't need into our vehicle and take them on down to the dump (or donation facility)!</p>
<p>Your website will need to do something very similar. It will send some data through the API, which instructs the database to delete some items.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="subgraph---a-graphql-api-generator">Subgraph - A GraphQL API Generator<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car#subgraph---a-graphql-api-generator" class="hash-link" aria-label="Direct link to Subgraph - A GraphQL API Generator" title="Direct link to Subgraph - A GraphQL API Generator">​</a></h2>
<p>The job of an API is to transfer data. A shiny new car is nice, but a clunker can also get you from point A to point B. An API is a vehicle that can be built, updated, or replaced as needed!</p>
<p>Many times, we sit down with our development team to build this vehicle (API) part by part, piece by piece, from the ground up. Only to realize we are building the same thing over and over, solving the same issues the same way again and again.</p>
<p>Since these basic tasks of an API are mainly universal, an API Generator such as Project <code>Subgraph</code> might be a solution that helps you to build your next API.</p>
<p>Currently, the project is a proof of concept. Define a simple configuration to run the API. Instant data transportation in a classy, speedy, and modern vehicle.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="define-to-run">Define to Run<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car#define-to-run" class="hash-link" aria-label="Direct link to Define to Run" title="Direct link to Define to Run">​</a></h3>
<p>The goal is simple -- Since APIs are generally similar, we should be able to generate an API based on the data we currently have or want to have in our database.</p>
<p>We define a simple configuration, and the generator handles the creation of the four main responsibilities of an API - Create, Read, Update, Delete.</p>
<p>Let's take a look at the ~20 lines of code needed to start your next API.</p>
<ol>
<li>Define The Config</li>
</ol>
<p>Name your service, connect your database, and define your data. Simple.</p>
<p>Below, my API will be able to Create, Read, Update, and Delete <code>Restaurants</code>. Each <code>Restaurant</code> has two data points including a <code>name</code> and a <code>rating</code>. It's pretty simple but with this config I'll be able to perform the four responsibilities of an API.</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Name Your Service</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">service_name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Restaurants"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Connect your Mongo DB</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.database_config</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">mongo_uri</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"mongodb://user:pass@127.0.0.1:27017/db"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">mongo_db</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"myDb"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token comment" style="color:rgb(99, 119, 119);font-style:italic"># Describe Your Data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Restaurant"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"rating"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol start="2">
<li>Starting the API</li>
</ol>
<p>Spinning this bad boy up is a One Line Command for your Developers.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">subgraph --config ./my-config.toml --port 5000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="v005---subgraph">v0.0.5 - Subgraph<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.5-api-vs-car#v005---subgraph" class="hash-link" aria-label="Direct link to v0.0.5 - Subgraph" title="Direct link to v0.0.5 - Subgraph">​</a></h3>
<p>Thanks for checking out this crazy simple description of an API and the Subgraph API Generator!</p>
<p>Version <code>v0.0.5</code> is officially released and while it is still a proof of concept, it provides some new features that take us one step closer to an official release.</p>
<p>In this new version, we are able to define configuration to block or allow access by domain! In tech terms, we can define some simple CORS Configuration.</p>
<ul>
<li>Specify Allowed HTTP Methods</li>
<li>Declare Allowed Origins</li>
<li>Allow Specific Headers</li>
</ul>
<p>Aside from these tech terms, it allows you to lock your server down from a security prospective. It's a small step forward for project <code>Subgraph</code> and I am happy to share the progress with you.</p>
<hr>
<p>If you are interested in <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">Checking Out The Code</a>, it's open source! Download it to try it, view it, or submit your contributions as the project grows.</p>
<p>Thanks All!</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subgraph v0.0.4 - Versatile Typings for a GraphQL API Generator]]></title>
        <id>https://www.thedevoyage.com/blog/subgraph-v0.0.4-versatile-typings</id>
        <link href="https://www.thedevoyage.com/blog/subgraph-v0.0.4-versatile-typings"/>
        <updated>2023-02-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello all! Thanks for joining!]]></summary>
        <content type="html"><![CDATA[<p>Hello all! Thanks for joining!</p>
<p>Today, the goal is to share the idea of versatile typings for an API Generator.</p>
<p>In version <code>v0.0.4</code> of the <code>subgraph</code> API Generator Project, I am happy to introduce the (mongo) Object Id Scalar. This means it's now possible to instantly start an API <code>Subgraph</code> Instance with the capabilities to find Mongo Documents by their Object ID! One simple step forward for this POC GraphQL API Generator written in Rust.</p>
<p>In case you are new to <code>Project Subgraph</code>, "Define to Run", is the motto. Define a simple configuration, and start the API. The code does the rest by generating resolvers and database connections -- An instantly generated API.</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1676924961/The-Devoyage/INTUITIVE_SCALARS_4_ttaqvh.png" alt="GraphQL Versatile Typings" class="img_ev3q"></p>
<p>So, what kind of scalars are we including in this API Generator? Let's take a look.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="versatile-typings">Versatile Typings<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.4-versatile-typings#versatile-typings" class="hash-link" aria-label="Direct link to Versatile Typings" title="Direct link to Versatile Typings">​</a></h2>
<p>Creating an API Generator needs to be versatile, yet simple. Two steps simple.</p>
<ol>
<li>Define the entities.</li>
<li>Let the code do it's job to create the API.</li>
</ol>
<p>This means that the scalar type of each entity versatile enough to cover many circumstances.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-typings">The Typings<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.4-versatile-typings#the-typings" class="hash-link" aria-label="Direct link to The Typings" title="Direct link to The Typings">​</a></h3>
<p>With <code>Subgraph v0.0.4</code> we have a simple set of options, as the project is still a proof of concept in its infancy. There are 4, mostly primitive, scalars to define entities.</p>
<ul>
<li>Object ID (Mongo)</li>
<li>String</li>
<li>Int</li>
<li>Boolean</li>
</ul>
<p>As the project ramps up, more versatile options will be included.</p>
<ul>
<li>Email</li>
<li>Date</li>
<li>DateTime</li>
<li>Password</li>
<li>Phone</li>
<li>Objects</li>
<li>Other Entities</li>
<li>... the list goes on!</li>
</ul>
<p>For now, we can establish some base practices on implementing new scalars before diving into the deep end.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-an-entity">Defining an Entity<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.4-versatile-typings#defining-an-entity" class="hash-link" aria-label="Direct link to Defining an Entity" title="Direct link to Defining an Entity">​</a></h3>
<p>I'll say it once, and I'll say it again. Define to Run is the motto.</p>
<p>Defining an entity is the almost the only thing you need to do in order to start the API, aside from declaring some database configuration.</p>
<p>Below, we define an entity for our <code>Beers</code> service. It's the weekend somewhere.</p>
<p>The <code>Beer</code> entity has three properties including, <code>name</code>, <code>IBU</code>, and <code>inStock</code>. The ability to define more than one entity is just as simple, if so chosen.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">[service]</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">...</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">[[service.entities]]</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">name = "Beer"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">name = "_id"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">scalar = "ObjectID"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">name = "name"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">scalar = "String"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">name = "IBU"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">scalar = "Int"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">required = false</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">[[service.entities.fields]]</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">name = "inStock"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">scalar = "Boolean"</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">required = true</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">[[service.entities]]</span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In about 50 lines of code, this little API can be started! Compare that to the hundreds or thousands of lines that might be written for a completely custom API that does nearly the exact same thing.</p>
<p>Now that these couple lines have been written into a configuration file, the API can be spun up and queried.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="spin-it-up">Spin It Up<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.4-versatile-typings#spin-it-up" class="hash-link" aria-label="Direct link to Spin It Up" title="Direct link to Spin It Up">​</a></h3>
<p>Once the entities are defined, the hard part is done. Starting the service can be done through a simple CLI Command.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">subgraph --config ./config.toml --port 5000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And like that... a brand new Beer API has been born! Checkout the sandbox hosted at the defined port, <code>http://localhost:5000</code>, to sample your server.</p>
<hr>
<p>Thanks for checking out the <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">Repo</a>, and following along with this proof of concept. If you are interested in contributing or have some ideas, feel free to share on the <code>issues</code> tab.</p>
<p>Version <code>v0.0.5</code> is on it's way, with configurable CORS settings. If you like the project or want to keep up to date, follow along to get notifications of future releases.</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Subgraph v0.0.3 - Reusable Resolvers with a GraphQL API Generator Built in Rust]]></title>
        <id>https://www.thedevoyage.com/blog/subgraph-v0.0.3-reusable-resolvers</id>
        <link href="https://www.thedevoyage.com/blog/subgraph-v0.0.3-reusable-resolvers"/>
        <updated>2023-02-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello all! Thanks for joining.]]></summary>
        <content type="html"><![CDATA[<p>Hello all! Thanks for joining.</p>
<p>Today I'd like to share a quick update for <code>@the-devoyage/subgraph</code>, a GraphQL API Generator with the goal of simplicity.</p>
<p>Define to run is the motto so far, which references the ease of running this API Generator. Define the schema to run the API. It should be that easy to start an API up.</p>
<p>In version <code>v0.0.3</code> we are adding the ability to Find Many which is one of the reusable resolvers that is created for you when you start the service.</p>
<p><img decoding="async" loading="lazy" src="https://res.cloudinary.com/the-devoyage/image/upload/v1675543551/The-Devoyage/CRUD_GraphQL_aaooqr.png" alt="GraphQL Resolvers CRUD" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reusable-resolvers">Reusable Resolvers<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.3-reusable-resolvers#reusable-resolvers" class="hash-link" aria-label="Direct link to Reusable Resolvers" title="Direct link to Reusable Resolvers">​</a></h2>
<p>The idea of an API Generator is to make creating a standardized API easy. Many parts of creating an API can be automated, including the creation of resolvers.</p>
<p>The core of an API revolves around CRUD operations (Create, Read, Update, Delete) which can easily be automated considering there are really not many variations to consider.</p>
<p>The Devoyage's <code>subgraph</code> project (The API Generator) has the goal of automating a variety of these operations for each defined entity.</p>
<ul>
<li>Find One/Many</li>
<li>Create One/Many</li>
<li>Delete One/Many</li>
<li>Update One/Many</li>
</ul>
<p>This means there will be a total of 8 reusable resolvers created for each defined entity as this project proceeds.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-new-resolver">The New Resolver<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.3-reusable-resolvers#the-new-resolver" class="hash-link" aria-label="Direct link to The New Resolver" title="Direct link to The New Resolver">​</a></h2>
<p>Version <code>v0.0.3</code> takes a step at closing the gap to including all 8 of these automated resolvers by including the <code>Find Many</code> resolver. Let's take a look!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="define-the-entity-or-entities">Define The Entity (or Entities)<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.3-reusable-resolvers#define-the-entity-or-entities" class="hash-link" aria-label="Direct link to Define The Entity (or Entities)" title="Direct link to Define The Entity (or Entities)">​</a></h3>
<p>First define the entity in the config file. Remember the motto - "Define to Run".</p>
<div class="language-toml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-toml codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">service_name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"pets"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.database_config</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">mongo_uri</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"mongodb://user:pass@127.0.0.1:27017/db"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">mongo_db</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"myDb"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Dog"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.database_config</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">mongo_collection</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"dogs"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"_id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"ObjectID"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"name"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"String"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token table class-name" style="color:rgb(255, 203, 139)">service.entities.fields</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">name</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"weight"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">scalar</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(173, 219, 103)">"Int"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token key property" style="color:rgb(128, 203, 196)">required</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="run-the-service">Run The service<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.3-reusable-resolvers#run-the-service" class="hash-link" aria-label="Direct link to Run The service" title="Direct link to Run The service">​</a></h3>
<p>Step 1 is easy. Step 2 is even easier. Start the service.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token plain">subgraph --config ./config.toml --port 5011</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-find-many-resolver">The Find Many Resolver<a href="https://www.thedevoyage.com/blog/subgraph-v0.0.3-reusable-resolvers#the-find-many-resolver" class="hash-link" aria-label="Direct link to The Find Many Resolver" title="Direct link to The Find Many Resolver">​</a></h3>
<p>Check out the schema, the find many resolver is now included as a choice for querying your new API.</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#d6deeb;--prism-background-color:#011627"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="color:#d6deeb;background-color:#011627"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#d6deeb"><span class="token keyword" style="color:rgb(127, 219, 202)">type</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 139)">Query</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">get_dogs</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token attr-name" style="color:rgb(173, 219, 103);font-style:italic">get_dogs_input</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token property" style="color:rgb(128, 203, 196)">get_dogs_input</span><span class="token operator" style="color:rgb(127, 219, 202)">!</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token class-name" style="color:rgb(255, 203, 139)">Dog</span><span class="token operator" style="color:rgb(127, 219, 202)">!</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token operator" style="color:rgb(127, 219, 202)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain">  </span><span class="token operator" style="color:rgb(127, 219, 202)">...</span><span class="token fragment function" style="color:rgb(130, 170, 255)">resolvers</span><span class="token plain"></span><br></span><span class="token-line" style="color:#d6deeb"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<hr>
<p>It's a small step toward the goal and I am glad you are here to follow along. If you're interested in checking out the code or trying out this proof of concept, check out the <a href="https://www.github.com/the-devoyage/subgraph" target="_blank" rel="noopener noreferrer">Subgraph Project</a> on GitHub!</p>
<div class="alert alert--info margin-vert--lg" style="display:flex;justify-content:space-between;flex-direction:column"><div class="avatar"><a class="avatar__photo-link avatar__photo avatar__photo--lg" href="https://medium.com/@thedevoyage"><img alt="Nick McLean Profile Image" src="https://cdn-images-1.medium.com/fit/c/63/63/1*TY45PiqMrWiUkivbhmp-Sw.jpeg"></a><div class="avatar__intro"><div class="avatar__name">Nick McLean</div><small class="avatar__subtitle padding-bottom--md">Thanks for following along. If you would like to keep up to date make sure to check in frequently and/or follow us below!</small><div><a href="https://medium.com/@thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Medium</button></a><a href="https://twitter.com/thedevoyage" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Twitter</button></a><a href="https://thedevoyage.slack.com/" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Slack</button></a><a href="https://thedevoyage.gumroad.com/subscribe" target="_blank" rel="noopener noreferrer"><button class="button button--primary margin-right--md" style="color:#fff;background-color:var(--ifm-color-dark-blue)">Newsletter</button></a></div></div></div></div>]]></content>
        <author>
            <name>Nick McLean</name>
            <uri>https://medium.com/@thedevoyage</uri>
        </author>
        <category label="subgraph" term="subgraph"/>
    </entry>
</feed>